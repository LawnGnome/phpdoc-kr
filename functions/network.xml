<?xml version="1.0" encoding="utf-8"?>
<reference id="ref.network">
	<title>네트워크 관련 함수</title>
	<titleabbrev>네트워크</titleabbrev>
	<refentry id="function.checkdnsrr">
		<refnamediv>
			<refname>checkdnsrr</refname>
			<refpurpose>
     인터넷 호스트 네임이나 IP 어드레스에 대응되는 DNS 레코드를 체크함
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>checkdnsrr</methodname>
					<methodparam><type>string</type><parameter>host</parameter></methodparam>
					<methodparam choice="opt"><type>string</type><parameter>
							type
						</parameter></methodparam>
				</methodsynopsis>
			<simpara>
				<parameter>host</parameter>에 대응이 되는 <parameter>type</parameter>의 레코드를 DNS에서 찾습니다. 
	어떠한 레코드라도 발견이 되면 &true;를 반환합니다. 그리고 레코드가 발견되지 않거나 에러가 발생하면 &false;를 반환합니다. 
	</simpara>
			<simpara>
				<parameter>type</parameter>은  A, MX, NS, SOA, PTR, CNAME 중에 있거나 다른 것이 올수도 있습니다.
				디폴트 값은  MX 입니다.
    </simpara>
			<simpara>
				<parameter>Host</parameter>는 IP 어드레스이거나 호스트 네임이 될 수 있습니다.
    </simpara>
			<simpara>
     참조: <function>getmxrr</function>,
     <function>gethostbyaddr</function>,
     <function>gethostbyname</function>,
     <function>gethostbynamel</function>, 그리고 named(8) 지침서. 
    </simpara>
		</refsect1>
	</refentry>
	<refentry id="function.closelog">
		<refnamediv>
			<refname>closelog</refname>
			<refpurpose>시스템 로그에 기록을 못하도록 연결을 닫습니다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>closelog</methodname>
					<void/>
				</methodsynopsis>
			<para>
				<function>closelog</function>는  정보서술자가 시스템 로그에 기록해 오던 것을 닫습니다.
     <function>closelog</function>를 사용하는 것은 선택사항입니다. 
    </para>
			<para>
     참조: <function>define_syslog_variables</function>,
     <function>syslog</function>그리고 
     <function>openlog</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.debugger-off">
		<refnamediv>
			<refname>debugger_off</refname>
			<refpurpose>PHP 내부 디버거 사용을 멈춥니다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>debugger_off</methodname>
					<void/>
				</methodsynopsis>
			<para>
     PHP 내부 디버거 사용을 멈춥니다. 디버거는 계속해서 향상중입니다.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.debugger-on">
		<refnamediv>
			<refname>debugger_on</refname>
			<refpurpose>PHP 내부 디버거를 사용합니다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>debugger_on</methodname>
					<methodparam><type>string</type><parameter>address</parameter></methodparam>
				</methodsynopsis>
			<para>
				<parameter>address</parameter>로 연결해서 PHP 내부 디버거를 사용합니다. 디버거는 계속해서 향상중입니다.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.define-syslog-variables">
		<refnamediv>
			<refname>define_syslog_variables</refname>
			<refpurpose>syslog에 연관된 모든 상수를 초기화합니다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>void</type><methodname>define_syslog_varaibles</methodname>
					<void/>
				</methodsynopsis>
			<para>
     syslog 함수에 사용되던 모든 상수들을 초기화합니다.
    </para>
			<para>
     참조:  <function>openlog</function>,
     <function>syslog</function> 그리고
     <function>closelog</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.fsockopen">
		<refnamediv>
			<refname>fsockopen</refname>
			<refpurpose>
     인터넷이나 유닉스 도메인의 소켓 연결을 열어줍니다.
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>fsockopen</methodname>
					<methodparam choice="opt"><type>string</type><parameter>
							udp://hostname</parameter></methodparam>
					<methodparam><type>int</type><parameter>port</parameter></methodparam>
					<methodparam choice="opt"><type>int</type><parameter>
							errno
						</parameter></methodparam>
					<methodparam choice="opt"><type>string</type><parameter>
							errstr
						</parameter></methodparam>
					<methodparam choice="opt"><type>double</type><parameter>
							timeout
						</parameter></methodparam>
				</methodsynopsis>
			<para>
     인터넷 (TCP 또는 UDP를 사용하는AF_INET) 또는 유닉스(AF_UNIX)도메인에서 
	스트림 연결을 시작합니다. 
     이것은 인터넷 도메인이라는 것 때문에 TCP 소켓을 <parameter>port</parameter>상에서 
	<parameter>hostname</parameter>에 연결하는 것을 열어줍니다.
    <parameter>hostname</parameter>은 이와 같은 경우에 완전히 증명이 된 도메인 네임이거나 
	IP 어드레스일 수 있습니다. 
	UDP 연결에서는 프로토콜을 미리 정의해야 합니다 : <parameter>udp://hostname</parameter>. 
	유닉스 도메인에서는 <parameter>hostname</parameter>이 소켓의 경로로 사용될 수 있는데
	이 경우에 <parameter>port</parameter>는 0 으로 설정되어야 합니다.
	선택사항인 <parameter>timeout</parameter>은 시스템 호출에 연결되는 것에 대한 
	시간초과가 몇 초안에 이루어지도록 설정할 수 있습니다.
    </para>
			<para>
				<function>fsockopen</function>은 다른 파일관련 함수(다음과 같은
     <function>fgets</function>, <function>fgetss</function>,
     <function>fputs</function>, <function>fclose</function> 그리고 <function>feof</function>)
	와 사용할 수 있는 파일 포인터를 반환합니다.
    </para>
			<para>
     호출에 실패하면 &false;를 반환하고 임의항목인 <parameter>errno</parameter>와
	<parameter>errstr</parameter>인수가 있다면 시스템 차원의 <literal>connect()</literal>호출
	에서 발생한 실제의 시스템 차원의 에러를 측정하기 위해 설정될 수 있습니다.
	반환되는 errno 가 0  이고 함수가 &false;를 반환했다면 <literal>connect()</literal>호출 
	이전에 에러가 발생했다는 것을 알 수 있습니다.
	이것은 소켓을 초기화하면서 발생한 문제일 가능성이 높습니다.
	주의할 것은 <parameter>errno</parameter>와 <parameter>errstr</parameter>인수는
	레러 passed by reference되어야 합니다.
    </para>
			<para>
     환경에 따라 유닉스 도메인이나 선택사항인 연결 시간초과는 사용이 지원되지 않을 수도 있습니다.
    </para>
			<para>
     소켓은 기본적으로 블로킹 모드(blocking mode)로 열려집니다. 
     <function>socket_set_blocking</function>을 사용해서 블로킹모드 해제상태(non-blocking mode)
	로 전환할 수 있습니다..
     <example>
					<title>
						<function>fsockopen</function> 예문</title>
					<programlisting role="php">
$fp = fsockopen ("www.php.net", 80, $errno, $errstr, 30);
if (!$fp) {
    echo "$errstr ($errno)&lt;br&gt;\n";
} else {
    fputs ($fp, "GET / HTTP/1.0\r\n\r\n");
    while (!feof($fp)) {
        echo fgets ($fp,128);
    }
    fclose ($fp);
}
      </programlisting>
				</example>
     다음의 예문은 가지고 있는 장비에서 UDP 서비스인 "daytime" (port 13)을 이용해서 어떻게 날짜와 시간을 가져오는지 보여줍니다.
     <example>
					<title>UDP 연결을 사용합니다</title>
					<programlisting role="php">
&lt;?php
$fp = fsockopen("udp://127.0.0.1", 13, $errno, $errstr);
if (!$fp) {
    echo "ERROR: $errno - $errstr&lt;br&gt;\n";
} else {
    fwrite($fp,"\n");
    echo fread($fp, 26);
    fclose($fp);
}
?&gt;
     </programlisting>
				</example>
				<note>
					<para>시간초과 매개변수는 PHP 3.0.9 에 소개가 되었고 UDP 지원은 PHP 4에 추가되었습니다.
      </para>
				</note>
    참조: <function>pfsockopen</function>, 
     <function>socket_set_blocking</function>,
     <function>socket_set_timeout</function>, <function>fgets</function>,
     <function>fgetss</function>, <function>fputs</function>,
     <function>fclose</function>, 그리고 <function>feof</function>).
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.gethostbyaddr">
		<refnamediv>
			<refname>gethostbyaddr</refname>
			<refpurpose>
     주어진 IP 어드레스에 대응이 되는 인터넷 호스트 이름을 가져옵니다.
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>string</type><methodname>gethostbyaddr</methodname>
					<methodparam><type>string</type><parameter>ip_address</parameter></methodparam>
				</methodsynopsis>
			<para>
     Returns the host name of the Internet host specified by
     <parameter>ip_address</parameter>에 정의된 인터넷 호스트의 호스트 이름을 반환합니다.
	에러가 발생하면 <parameter>ip_address</parameter>를 반환합니다.
    </para>
			<para>
     참조: <function>gethostbyname</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.gethostbyname">
		<refnamediv>
			<refname>gethostbyname</refname>
			<refpurpose>
     주어진 인터넷 호스트 이름에 대응되는 IP 어드레스를 가져옵니다.
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>string</type><methodname>gethostbyname</methodname>
					<methodparam><type>string</type><parameter>hostname</parameter></methodparam>
				</methodsynopsis>
			<para>
				<parameter>hostname</parameter>에 정의된 인터넷 호스트의 IP 어드레스를 반환합니다.
    </para>
			<para>
     참조: <function>gethostbyaddr</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.gethostbynamel">
		<refnamediv>
			<refname>gethostbynamel</refname>
			<refpurpose>
     주어진 인터넷 호스트 이름에 대응이 되는 IP 어드레스의 목록을 가져옵니다.
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>array</type><methodname>gethostbynamel</methodname>
					<methodparam><type>string</type><parameter>hostname</parameter></methodparam>
				</methodsynopsis>
			<para>
				<parameter>hostname</parameter>분석에 정의된 인터넷 호스트의 IP 어드레스의 목록을 반환합니다.
    </para>
			<para>
     참조: <function>gethostbyname</function>,
     <function>gethostbyaddr</function>,
     <function>checkdnsrr</function>, <function>getmxrr</function>,
     그리고 <literal>named(8)</literal> 기능설명(manual) 페이지.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.getmxrr">
		<refnamediv>
			<refname>getmxrr</refname>
			<refpurpose>
     주어진 인터넷 호스트 이름에 대응이 되는 MX 레코드를 가져옵니다.
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>getmxrr</methodname>
					<methodparam><type>string</type><parameter>hostname</parameter></methodparam>
					<methodparam><type>array</type><parameter>mxhosts</parameter></methodparam>
					<methodparam choice="opt"><type>array</type><parameter>
							weight
						</parameter></methodparam>
				</methodsynopsis>
			<simpara>
     Searches DNS for MX records corresponding to
     <parameter>hostname</parameter>에 대응이 되는 MX 레코드를 찾기위해 DNS를 찾습니다. 
	아무 레코드라도 발견이 되면 &true;를 반환합니다.
	레코드가 없거나 에러가 발생되면 &false;를 반환합니다.
    </simpara>
			<simpara>
     찾아낸 MX 레코드의 목록은 <parameter>mxhosts</parameter> 배열에 위치합니다.
	<parameter>weight</parameter>배열이 주어지면 수집된 weight 정보로 채워집니다.
    </simpara>
			<simpara>
     참조: <function>checkdnsrr</function>,
     <function>gethostbyname</function>,
     <function>gethostbynamel</function>,
     <function>gethostbyaddr</function> 그리고 
     <literal>named(8)</literal> 기능설명(manual) 페이지
    </simpara>
		</refsect1>
	</refentry>
	<refentry id="function.getprotobyname">
		<refnamediv>
			<refname>getprotobyname</refname>
			<refpurpose>
     프로토콜과 조합된 프로토콜 번호를 가져옵니다.
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>getprotobyname</methodname>
					<methodparam><type>string</type><parameter>name</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>getprotobyname</function>은 /etc/protocols 각 프로토콜 <parameter>name</parameter>
				과 조합이 된 프로토콜의 번호를 반환합니다.
    </para>
			<para>
     참조: <function>getprotobynumber</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.getprotobynumber">
		<refnamediv>
			<refname>getprotobynumber</refname>
			<refpurpose>
     프로토콜 번호와 조합된 프로토콜의 이름을 가져옵니다.
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>string</type><methodname>getprotobynumber</methodname>
					<methodparam><type>int</type><parameter>number</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>getprotobynumber</function> 은 /etc/protocols 각 프로토콜 <parameter>number</parameter>
				와 조합이 된 프로토콜의 이름을 반환합니다.
    </para>
			<para>
     참조: <function>getprotobyname</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.getservbyname">
		<refnamediv>
			<refname>getservbyname</refname>
			<refpurpose>
     인터넷 서비스와 프로토콜과 조합이 되어있는 포트 번호를 가져옵니다.
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>getservbyname</methodname>
					<methodparam><type>string</type><parameter>service</parameter></methodparam>
					<methodparam><type>string</type><parameter>protocol</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>getservbyname</function>은 <filename>/etc/services</filename>
	에 정의된 <parameter>protocol</parameter>의 <parameter>service</parameter>에 
	대응이 되는 인터넷 포트를 반환합니다.
     <parameter>protocol</parameter>은  <literal>TCP</literal> 이거나 <literal>UDP</literal>입니다.
    </para>
			<para>
     참조: <function>getservbyport</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.getservbyport">
		<refnamediv>
			<refname>getservbyport</refname>
			<refpurpose>
     포트와 프로토콜에 대응이 되는 인터넷 서비스를 가져옵니다.
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>string</type><methodname>getservbyport</methodname>
					<methodparam><type>int</type><parameter>port</parameter></methodparam>
					<methodparam><type>string</type><parameter>protocol</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>getservbyport</function>는 /etc/services의 각 <parameter>protocol</parameter>
	에 정의된  <parameter>port</parameter>와 조합이 되는 인터넷 서비스를 반환합니다.
     <parameter>protocol</parameter>은 <literal>TCP</literal>이거나 <literal>UDP</literal>입니다.
    </para>
			<para>
     참조: <function>getservbyname</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.ip2long">
		<refnamediv>
			<refname>ip2long</refname>
			<refpurpose>
      (IPv4) 인터넷 프로토콜의 점이 찍혀 있는 주소를 포함한 문자열을 고유의 주소로 바꾸어줍니다.
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>ip2long</methodname>
					<methodparam><type>string</type><parameter>ip_address</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>ip2long</function> 함수는  보통의(점이 찍혀 있는 문자열) 인터넷 표시 형식에서 IPv4 인터넷 네트워크 주소를 생성합니다.
     <example>
					<title>
						<function>ip2long</function> Example</title>
					<programlisting role="php">
&lt;?php
$ip = gethostbyname("www.php.net");
$out = "아래의 URL과  같습니다:&lt;br&gt;\n";
$out .= "http://www.php.net/, http://".$ip."/, and http://".ip2long($ip)."/&lt;br&gt;\n";
echo $out;
?&gt;
     </programlisting>
				</example>
			</para>
			<para>
     See also: <function>long2ip</function>
			</para>
		</refsect1>
	</refentry>
	<refentry id="function.long2ip">
		<refnamediv>
			<refname>long2ip</refname>
			<refpurpose>
      (IPv4) 인터넷 네크워크 주소를 인터넷 표준의 점이 찍혀있는 문자열로 바꿉니다.
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>string</type><methodname>long2ip</methodname>
					<methodparam><type>int</type><parameter>proper_address</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>long2ip</function>는 고유의 주소 표시 형식을 점이 찍혀 있는 인터넷 주소 
	표시형식(예를 들면 : aaa.bbb.ccc.ddd)으로 바꾸어줍니다.
    </para>
			<para>
     참조: <function>ip2long</function>
			</para>
		</refsect1>
	</refentry>
	<refentry id="function.openlog">
		<refnamediv>
			<refname>openlog</refname>
			<refpurpose>시스템 로그에 연결합니다</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>openlog</methodname>
					<methodparam><type>string</type><parameter>ident</parameter></methodparam>
					<methodparam><type>int</type><parameter>option</parameter></methodparam>
					<methodparam><type>int</type><parameter>facility</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>openlog</function>는 프로그램에 사용하는 시스템 로그 기록자에 연결을 열어줍니다. opens a connection to the system
     logger for a program.  문자열 <parameter>ident</parameter>는 각각의 메시지에 추가됩니다.
	<parameter>option</parameter>과 <parameter>facility</parameter>에 대한 값은 아래에 주어집니다.
     <parameter>option</parameter>의 인수는 로그 메시지를 생성할때 어떤 로긴 옵션이 사용되었는지 
	알아내는 데 사용됩니다.
     <parameter>facility</parameter>의 인수는 어떤 형식의 프로그램이 로그 메시지를 남기는 지 정의하는데 사용됩니다.
	이것은 당신이 정의(기계의 syslog 설정)할 때 서로 다른 설비에서 들어오는 메시지 중 어떤 메시지를 핸들할지 정의할 수 있도록 합니다.
     <function>openlog</function>의 사용은 선택적입니다. 
	이것은 <parameter>ident</parameter>가 기본적으로 &false;일 경우 필요하다면 자동으로 <function>syslog</function>에 의해 호출됩니다.
    </para>
			<para>
				<table>
					<title>
						<function>openlog</function> Options</title>
					<tgroup cols="2">
						<thead>
							<row>
								<entry>Constant</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>LOG_CONS</entry>
								<entry>
          시스템 로그 기록자에 데이터를 보내는 중에 에러가 발생한다면 직접적으로 시스템 콘솔에 기록합니다.
         </entry>
							</row>
							<row>
								<entry>LOG_NDELAY</entry>
								<entry>
          로그기록자에 대한 연결을 즉시 엽니다.
         </entry>
							</row>
							<row>
								<entry>LOG_ODELAY</entry>
								<entry>
          (기본값) 첫번째 메시지가 로그에 기록될때까지 연결을 여는 것을 미룹니다.
         </entry>
							</row>
							<row>
								<entry>LOG_PERROR</entry>
								<entry>로그 메시지 역시 표준 에러로 출력합니다.</entry>
							</row>
							<row>
								<entry>LOG_PID</entry>
								<entry>각각의 메시지마다 PID를 포함시킵니다.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
     이 옵션들 중에서 한개 혹은 한개 이상을 사용할 수 있습니다. 
	여러개의 옵션을 사용할 경우 <literal>OR</literal>할 필요가 있습니다. 예를 들자면 
	즉시 연결을 열고, 콘솔에 기록하고, 각각의 메시지에 PID를 포함시킨다면 
	다음과 같이 사용합니다: <literal>LOG_CONS | LOG_NDELAY | LOG_PID</literal>
			</para>
			<para>
				<table>
					<title>
						<function>openlog</function> Facilities</title>
					<tgroup cols="2">
						<thead>
							<row>
								<entry>Constant</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>LOG_AUTH</entry>
								<entry>
          보안/인증 메시지 (상수가 정의된 시스템대신  LOG_AUTHPRIV 를 사용)
         </entry>
							</row>
							<row>
								<entry>LOG_AUTHPRIV</entry>
								<entry>보안/인증 메시지 (private)</entry>
							</row>
							<row>
								<entry>LOG_CRON</entry>
								<entry>클락 데몬clock daemon (cron and at)</entry>
							</row>
							<row>
								<entry>LOG_DAEMON</entry>
								<entry>다른 시스템 데몬</entry>
							</row>
							<row>
								<entry>LOG_KERN</entry>
								<entry>커널 메시지</entry>
							</row>
							<row>
								<entry>LOG_LOCAL0 ... LOG_LOCAL7</entry>
								<entry>로컬 사용을 위해 예약된 것</entry>
							</row>
							<row>
								<entry>LOG_LPR</entry>
								<entry>라인 프린터 하위시스템</entry>
							</row>
							<row>
								<entry>LOG_MAIL</entry>
								<entry>메일 하위 시스템</entry>
							</row>
							<row>
								<entry>LOG_NEWS</entry>
								<entry>USENET 뉴스 하위 시스템</entry>
							</row>
							<row>
								<entry>LOG_SYSLOG</entry>
								<entry>syslogd에 의해 내부적으로 생성된 메시지</entry>
							</row>
							<row>
								<entry>LOG_USER</entry>
								<entry>일반적인 사용자 수준의 메시지</entry>
							</row>
							<row>
								<entry>LOG_UUCP</entry>
								<entry>UUCP 하위 시스템</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</para>
			<para>
     참조: <function>define_syslog_variables</function>,
     <function>syslog</function> 그리고
     <function>closelog</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pfsockopen">
		<refnamediv>
			<refname>pfsockopen</refname>
			<refpurpose>
     지속적인 인터넷이나 유닉스 소켓 연결을 엽니다.
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>pfsockopen</methodname>
					<methodparam><type>string</type><parameter>hostname</parameter></methodparam>
					<methodparam><type>int</type><parameter>port</parameter></methodparam>
					<methodparam choice="opt"><type>int</type><parameter>
							errno
						</parameter></methodparam>
					<methodparam choice="opt"><type>string</type><parameter>
							errstr
						</parameter></methodparam>
					<methodparam choice="opt"><type>int</type><parameter>
							timeout
						</parameter></methodparam>
				</methodsynopsis>
			<para>
     이 함수는 스크립트가 끝난뒤에도 연결이 닫히지 않는 차이점을 제외하고 <function>fsockopen</function>과 정확히 똑같습니다.  
	이것은 <function>fsockopen</function>의 지속적인 연결 버전입니다.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.socket-get-status">
		<refnamediv>
			<refname>socket_get_status</refname>
			<refpurpose>
     존재하는 소켓의 자원에 대한 정보를 반환합니다.
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>array</type><methodname>socket_get_status</methodname>
					<methodparam><type>resource</type><parameter>socket_get_status</parameter></methodparam>
				</methodsynopsis>
			<para>
     존재하는 소켓의 자원에 대한 정보를 반환합니다. 
	일반적으로 결과 배열안에 네개의 항목을 반환합니다.
    </para>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>timed_out</parameter> (부울 값) - 데이터를 기다리는 소켓의 시간초과
      </para>
				</listitem>
				<listitem>
					<para>
						<parameter>blocked</parameter> (부울 값) - 닫혀진 소켓
      </para>
				</listitem>
				<listitem>
					<para>
						<parameter>eof</parameter> (부울 값) - EOF 이벤트 검사
      </para>
				</listitem>
				<listitem>
					<para>
						<parameter>unread_bytes</parameter> (정수값) - 소켓의 버퍼에 남겨진 바이트 수
      </para>
				</listitem>
			</itemizedlist>
			<para>
     참조: 
     <function>accept_connect</function>,
     <function>bind</function>,
     <function>connect</function>,
     <function>listen</function>,
     <function>strerror</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.socket-set-blocking">
		<refnamediv>
			<refname>socket_set_blocking</refname>
			<refpurpose>소켓의 모드를 설정 (blocking 모드/ non-blocking 모드)</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>socket_set_blocking</methodname>
					<methodparam><type>int</type><parameter>socket descriptor</parameter></methodparam>
					<methodparam><type>int</type><parameter>mode</parameter></methodparam>
				</methodsynopsis>
			<para>
				<parameter>mode</parameter>가 &false;이면, 소켓 서술자는 모드를 non-blocking 모드로 전환할 것입니다.the given socket
     그리고 &true;일 경우 서술자는 blocking 모드로 전환할 것입니다. 
     이것의 효과는 소켓에서 읽어들인 <function>fgets</function>와 비슷합니다.
	non-blocking 모드에서 <function>fgets</function>호출은 
	항상 소켓에서 사용가능하게 되기를 	대기하고 있는 데이타를 
	blocking 모드일 때 바로 반환합니다.
	will always
     return right away while in blocking mode it will wait for data to
     become available on the socket.
    </para>
			<para>
     이 함수는 이전에는 <function>set_socket_blocking</function>로 불려 졌지만 
	지금은 그렇게 사용되지 않습니다.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.socket-set-timeout">
		<refnamediv>
			<refname>socket_set_timeout</refname>
			<refpurpose>소켓에서의 시간초과 주기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>bool</type><methodname>socket_set_timeout</methodname>
					<methodparam><type>int</type><parameter>socket descriptor</parameter></methodparam>
					<methodparam><type>int</type><parameter>seconds</parameter></methodparam>
					<methodparam><type>int</type><parameter>microseconds</parameter></methodparam>
				</methodsynopsis>
			<para>
				<parameter>seconds</parameter>와  <parameter>microseconds</parameter>의 합을 사용해서
	<parameter>socket descriptor</parameter>의 시간초과 값을 설정합니다.
     <example>
					<title>
						<function>socket_set_timeout</function> Example</title>
					<programlisting role="php">
&lt;?php
$fp = fsockopen("www.php.net", 80);
if(!$fp) {
    echo "열 수 없습니다\n";
} else {
    fputs($fp,"GET / HTTP/1.0\n\n");
    $start = time();
    socket_set_timeout($fp, 2);
    $res = fread($fp, 2000);
    var_dump(socket_get_status($fp));
    fclose($fp);
    print $res;
}
?&gt;
      </programlisting>
				</example>
			</para>
			<para>
     이 함수는 이전에는<function>set_socket_timeout</function>처럼 불려졌지만 
	지금은 그렇게 사용되지 않습니다.
    </para>
			<para>
     참조: <function>fsockopen</function>, <function>fopen</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.syslog">
		<refnamediv>
			<refname>syslog</refname>
			<refpurpose>시스템 로그 메시지를 생성합니다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>syslog</methodname>
					<methodparam><type>int</type><parameter>priority</parameter></methodparam>
					<methodparam><type>string</type><parameter>message</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>syslog</function>는 시스템 기록자에 의해 배분이 될 로그 메시지를 생성합니다.
     <parameter>priority</parameter>는 다음 장에서 주어진 값에 대한 난이도와 수준의 조합입니다.
     남겨진 인수는 현재의 <errortype>errno</errortype> 값에 대응이 되는 에러 메시지 문자열(strerror)은 
	<literal>%m</literal>의 두개 문자로 대치가 되고 나머지는 보내지는 메시지 입니다.
    </para>
			<para>
				<table>
					<title>
						<function>syslog</function> 우선순위 (역순정렬)</title>
					<tgroup cols="2">
						<thead>
							<row>
								<entry>Constant</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>LOG_EMERG</entry>
								<entry>시스템을 사용할 수 없습니다.</entry>
							</row>
							<row>
								<entry>LOG_ALERT</entry>
								<entry>즉시 수행해야 할 행동</entry>
							</row>
							<row>
								<entry>LOG_CRIT</entry>
								<entry>위험한 상태</entry>
							</row>
							<row>
								<entry>LOG_ERR</entry>
								<entry>에러 상태</entry>
							</row>
							<row>
								<entry>LOG_WARNING</entry>
								<entry>경고 상태</entry>
							</row>
							<row>
								<entry>LOG_NOTICE</entry>
								<entry>일반적이지만 중요한 상태</entry>
							</row>
							<row>
								<entry>LOG_INFO</entry>
								<entry>정보 메시지</entry>
							</row>
							<row>
								<entry>LOG_DEBUG</entry>
								<entry>디버그 수준 메시지</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</para>
			<para>
				<example>
					<title>
						<function>syslog</function>의 사용
					</title>
					<programlisting role="php">
&lt;?php
define_syslog_variables();
// 프로세스 ID를 포함하고 있으며 로그를 표준 에러로 보내는 syslog를 열고
// 사용자에 의해 정의된 logging 메카니즘을 사용합니다.
openlog(&quot;myScripLog&quot;, LOG_PID | LOG_PERROR, LOG_LOCAL0);

// 코드가 들어갑니다.

if (authorized_client()) {
    // 무슨 일인가를 수행합니다.

} else {
    // 인증되지 않은 사용자!
    // 로그를 시도합니다.
    $access = date(&quot;Y/m/d H:i:s&quot;);
    syslog(LOG_WARNING,&quot;인증되지 않은 사용자: $access $REMOTE_ADDR ($HTTP_USER_AGENT)&quot;);
}

closelog();
?&gt;
      </programlisting>
				</example>
     사용자가 정의한 로그 핸들러를 설정하기 위한 정보는 
     <citerefentry>
					<refentrytitle>syslog.conf</refentrytitle>
					<manvolnum>5</manvolnum>
				</citerefentry>유닉스의 기능설명(manual) 페이지를 보세요. 
	syslog 난이도와 옵션에 관해서 정보를 좀 더 알고 싶을 때는 
				<citerefentry>
					<refentrytitle>syslog</refentrytitle>
					<manvolnum>3</manvolnum>
				</citerefentry> 유닉스 머신의 man 페이지에서 찾아 볼 수 있습니다.
    </para>
			<para>
     Windows NT에서 syslog 서비스는 이벤트 로그로 에뮬레이트 되어 사용됩니다.
    </para>
			<para>
     참조: <function>define_syslog_variables</function>,
     <function>openlog</function>,
     <function>closelog</function>.
    </para>
		</refsect1>
	</refentry>
</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

