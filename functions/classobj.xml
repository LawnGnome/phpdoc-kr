<reference id="ref.classobj">
	<title>클래스/객체 함수</title>
	<titleabbrev>클래스/객체</titleabbrev>
	<partintro>
		<sect1 id="classobj.partintro">
			<title>소 개</title>
			<sect2 id="classobj.intro">
				<title>About</title>
				<para>
여기에 있는 함수들은 클래스와 객체에 대한 정보를 얻는데 도움을 줍니다. 여러분은 이 함수들을 사용하여 어떤 객체가 속한 클래스의 이름, 그리고 그 객체의 속성(멤버 함수(메소드,method)와 속성(멤버변수 등.))을 찾아낼수 있습니다. 여기있는 함수들을 사용하면 어떤 객체의 속성및 메소드뿐만 아니라, 그 객체의 혈통도 알아낼 수 있습니다.(즉, 그 객체가 어떤 클래스의 상속을 받았는지를 알아낼 수 있습니다.)
     </para>
			</sect2>
			<sect2 id="classobj.example">
				<title>사용방법</title>
				<para>
여기에 있는 예제에서는 먼저 기본적인 형태의 클래스를 정의하고, 그 클래스의 상속을 받은 클래스를 정의합니다. 여기의 기본적인 형태의 클래스는 일반적인 야채에 대한 클래스로, 그 야채가 먹을수 있는 것인지 혹은 그렇지 않은지, 또한 그 야채의 색깔은 무엇인지를 정의합니다. 그 클래스의 하위클래스(자식 클래스)는 <varname>시금치</varname> 클래스로 요리를 할수 있는 멤버함수(메소드, method)와 "<varname>시금치</varname> 객체가 요리를 할수 있는지를 알아내는 다른 멤버함수들을 추가 합니다.
     </para>
				<para>
					<example>
						<title>classes.inc</title>
						<programlisting role="php">
&lt;?php

// 멤버변수(속성)와 멤버함수를 가지는 기본 클래스
	
    class Vegetable {

    var $edible;
    var $color;

    function Vegetable( $edible, $color=&quot;green&quot; ) {
        $this-&gt;edible = $edible;
        $this-&gt;color = $color;
    }

    function is_edible() {
        return $this-&gt;edible;
    }

    function what_color() {
        return $this-&gt;color;
    }
    
} // end of class Vegetable


// 기본클랙스의 상속(확장)
class Spinach extends Vegetable {

    var $cooked = false;

    function Spinach() {
        $this-&gt;Vegetable( true, &quot;green&quot; );
    }

    function cook_it() {
        $this-&gt;cooked = true;
    }

    function is_cooked() {
        return $this-&gt;cooked;
    }
    
} // 시금치 객체의 끝

?&gt;
       </programlisting>
					</example>
				</para>
				<para>
위의 클래스들로 부터 2개의 객체를 생성하면, 그 클래스의 혈통을 포함한 클래스들에 대한 정보를 알아낼수 있습니다.
변수들을 깔끔하게 출력하기 위해 몇개의 멤버함수들을 추가해서 정의할수 있습니다.
     </para>
				<para>
					<example>
						<title>test_script.php</title>
						<programlisting role="php">
&lt;pre&gt;
&lt;?php

include &quot;classes.inc&quot;;

// utility functions

function print_vars($obj) {
    $arr = get_object_vars($obj);
    while (list($prop, $val) = each($arr))
        echo &quot;\t$prop = $val\n&quot;;
}

function print_methods($obj) {
    $arr = get_class_methods(get_class($obj));
    foreach ($arr as $method)
        echo &quot;\tfunction $method()\n&quot;;
}

function class_parentage($obj, $class) {
    global $$obj;
    if (is_subclass_of($$obj, $class)) {
        echo &quot;Object $obj belongs to class &quot;.get_class($$obj);
        echo &quot; a subclass of $class\n&quot;;
    } else {
        echo &quot;Object $obj does not belong to a subclass of $class\n&quot;;
    }
}

// instantiate 2 objects

$veggie = new Vegetable(true,&quot;blue&quot;);
$leafy = new Spinach();

// print out information about objects
echo &quot;veggie: CLASS &quot;.get_class($veggie).&quot;\n&quot;;
echo &quot;leafy: CLASS &quot;.get_class($leafy);
echo &quot;, PARENT &quot;.get_parent_class($leafy).&quot;\n&quot;;

// show veggie properties
echo &quot;\nveggie: Properties\n&quot;;
print_vars($veggie);

// and leafy methods
echo &quot;\nleafy: Methods\n&quot;;
print_methods($leafy);

echo &quot;\nParentage:\n&quot;;
class_parentage(&quot;leafy&quot;, &quot;Spinach&quot;);
class_parentage(&quot;leafy&quot;, &quot;Vegetable&quot;);
?&gt;
&lt;/pre&gt;
       </programlisting>
					</example>
				</para>
				<para>
위의 예제에서 중요한 것은, <varname>$leafy</varname> 객체는 <classname>Vegetable</classname> 클래스의 하위클래스인 <classname>시금치</classname>클래스의 객체라는 것입니다.
위의 예제는 다음과 같은 결과가 출력됩니다.
     </para>
				<para>
					<informalexample>
						<programlisting>
       [...]
Parentage:
Object leafy does not belong to a subclass of Spinach
Object leafy belongs to class spinach a subclass of Vegetable
       </programlisting>
					</informalexample>
				</para>
			</sect2>
		</sect1>
	</partintro>
	<refentry id="function.call-user-method">
		<refnamediv>
			<refname>call_user_method</refname>
			<refpurpose>
주어진 객체의 사용자 메소드(멤버함수)를 호출합니다.
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>mixed 
       <function>call_user_method</function>
					</funcdef>
					<paramdef>string 
       <parameter>method_name</parameter>
					</paramdef>
					<paramdef>object 
       <parameter>obj</parameter>
					</paramdef>
					<paramdef>mixed 
       <parameter>
							<optional>parameter</optional>
						</parameter>
					</paramdef>
					<paramdef>mixed 
       <parameter>
							<optional>...</optional>
						</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
사용자가 정의한 <parameter>obj</parameter> 객체의 <parameter>method_name</parameter> 메소드를 호출합니다. 사용방법은 아래와 같습니다.
클래스를 정의한 후에 객체를 생성하고 <function>call_user_method</function> 함수를 호출하여 <varname>print_info</varname> 메소드를 간접 호출합니다.
     <informalexample>
					<programlisting role="php">
&lt;?php
class Country {
    var $NAME;
    var $TLD;
    
    function Country($name, $tld) {
        $this-&gt;NAME = $name;
        $this-&gt;TLD = $tld;
    }

    function print_info($prestr=&quot;&quot;) {
        echo $prestr.&quot;Country: &quot;.$this-&gt;NAME.&quot;\n&quot;;
        echo $prestr.&quot;Top Level Domain: &quot;.$this-&gt;TLD.&quot;\n&quot;;
    }
}

$cntry = new Country(&quot;Peru&quot;,&quot;pe&quot;);

echo &quot;* Calling the object method directly\n&quot;;
$cntry-&gt;print_info();

echo &quot;\n* Calling the same method indirectly\n&quot;;
call_user_method (&quot;print_info&quot;, $cntry, &quot;\t&quot;);
?&gt;
      </programlisting>
				</informalexample>
			</para>
			<simpara>
				<function>call_user_func</function>함수를 참고하세요.
    </simpara>
		</refsect1>
	</refentry>
	<refentry id="function.class-exists">
		<refnamediv>
			<refname>class_exists</refname>
			<refpurpose>클래스가 정의 되어있는지 검사합니다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>bool <function>class_exists</function>
					</funcdef>
					<paramdef>string <parameter>class_name</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
이 함수는 인수로 주어진 <parameter>class_name</parameter> 클래스가 정의 되어 있으면 참(true)을 반환하고, 그렇지 않으면 거짓(false)을 반환합니다.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.get-class">
		<refnamediv>
			<refname>get_class</refname>
			<refpurpose>어떤(임의의) 객체가 속한 클래스의 이름을 반환합니다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>설 명</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>string <function>get_class</function>
					</funcdef>
					<paramdef>object <parameter>obj</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
이 함수는 객체 <parameter>obj</parameter>가 속한 클래스 이름을 반환합니다.
    </para>
			<simpara>
				<function>get_parent_class</function>
				<function>is_subclass_of</function>함수를 참고하세요.
			</simpara>
		</refsect1>
	</refentry>
	<refentry id="function.get-class-methods">
		<refnamediv>
			<refname>get_class_methods</refname>
			<refpurpose>클래스의 기본적인 속성(멤버변수)들을 배열로 반환합니다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>설 명</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>array <function>get_class_methods</function>
					</funcdef>
					<paramdef>string <parameter>class_name</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
이 함수는 인수로 주어진 <parameter>class_name</parameter>클래스의 멤버함수(메소드) 이름을 배열로 반환합니다.
    </para>
			<simpara>
				<function>get_class_vars</function>,<function>get_object_vars</function>를 참고하세요.
			</simpara>
		</refsect1>
	</refentry>
	<refentry id="function.get-class-vars">
		<refnamediv>
			<refname>get_class_vars</refname>
			<refpurpose>
클래스의 기본적인 속성(멤버변수)들을 배열로 반환합니다.
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>설 명</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>array <function>get_class_vars</function>
					</funcdef>
					<paramdef>string <parameter>class_name</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
이 함수는 클래스의 기본속성(멤버변수)들을 배열로 반환합니다.
    </para>
			<simpara>
				<function>get_class_methods</function>,<function>get_object_vars</function>를 참고하세요.
			</simpara>
		</refsect1>
	</refentry>
	<refentry id="function.get-declared-classes">
		<refnamediv>
			<refname>get_declared_classes</refname>
			<refpurpose>Returns an array with the name of the defined classes</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>array <function>get_declared_classes</function>
					</funcdef>
					<paramdef>void</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
정의된 클래스들의 이름을 배열로 반환합니다
    </para>
			<note>
				<para>
PHP 4.0.1pl2에서는 배열의 첫부분에 세개의 클래스들이 들어가 있습니다. : <classname>stdClass</classname> ( <filename>Zend/zend.c</filename>에 정의 되어있는 클래스),
<classname>OverloadedTestClass</classname>  ( <filename>ext/standard/basic_functions.c</filename>에 정의 되어있는 클래스), <classname>Directory</classname> (<filename>ext/standard/dir.c</filename>에 정의 되어있는 클래스)
     </para>
			</note>
		</refsect1>
	</refentry>
	<refentry id="function.get-object-vars">
		<refnamediv>
			<refname>get_object_vars</refname>
			<refpurpose>객체의 속성(멤버변수)들을 associative 배열로 반환한다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>설 명 </title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>array <function>get_object_vars</function>
					</funcdef>
					<paramdef>object <parameter>obj</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
이 함수는 인자로 주어진 객체 <parameter>obj</parameter>의 객체속성(멤버변수)들을 associative 배열로 반환합니다. 
만약 객체 <parameter>obj</parameter>가 선언되어진 클래스의 변수들에 할당된 값들이 없는 경우는 반환되는 배열에서 이러한 객체속성(멤버변수)들은 제외됩니다.
     <example>
					<title>Use of <function>get_object_vars</function>
					</title>
					<programlisting role="php">
&lt;?php
class Point2D {
    var $x, $y;
    var $label;

    function Point2D($x, $y) {
        $this-&gt;x = $x;
        $this-&gt;y = $y;
    }

    function setLabel($label) {
        $this-&gt;label = $label;
    }

    function getPoint() {
        return array("x" =&gt; $this-&gt;x,
                     "y" =&gt; $this-&gt;y,
                     "label" =&gt; $this-&gt;label);
    }
}

$p1 = new Point2D(1.233, 3.445);
print_r(get_object_vars($p1));
// "$label" is declared but not defined
// "$label" 는 선언되어 있지만, 정의 되어있지 않다.
// Array
// (
//     [x] =&gt; 1.233
//     [y] =&gt; 3.445
// )

$p1-&gt;setLabel("point #1");
print_r(get_object_vars($p1));
// Array
// (
//     [x] =&gt; 1.233
//     [y] =&gt; 3.445
//     [label] =&gt; point #1
// )

?&gt;
      </programlisting>
				</example>
			</para>
			<simpara>
<function>get_class_methods</function>,<function>get_class_vars</function>함수를 참고하세요.
			</simpara>
		</refsect1>
	</refentry>
	<refentry id="function.get-parent-class">
		<refnamediv>
			<refname>get_parent_class</refname>
			<refpurpose>객체의 상위(아버지) 클래스의 이름을 반환합니다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>설 명</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>string <function>get_parent_class</function>
					</funcdef>
					<paramdef>object <parameter>obj</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
이 함수는 객체 <parameter>obj</parameter>가 속한 클래스의 상위(아버지) 클래스의 이름을 반환합니다.
    </para>
			<simpara>
     See also <function>get_class</function>,
     <function>is_subclass_of</function>ㄱ하세요
			</simpara>
		</refsect1>
	</refentry>
	<refentry id="function.is-subclass-of">
		<refnamediv>
			<refname>is_subclass_of</refname>
			<refpurpose>
인수로 주어진 클래스의 하위(자식)클래스의 객체인지 검사합니다.
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>설 명</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>bool <function>is_subclass_of</function>
					</funcdef>
					<paramdef>object <parameter>obj</parameter>
					</paramdef>
					<paramdef>string <parameter>superclass</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
이 함수는 객체 <parameter>obj</parameter>가 상위클래스(<parameter>superclass</parameter>)의 하위클래스에 속하면 참(true)을 , 그렇지 않으면 거짓(false)를 반환합니다.
    </para>
			<simpara>
<function>get_class</function>,<function>get_parent_class</function>를 참고하세요.
			</simpara>
		</refsect1>
	</refentry>
	<refentry id="function.method-exists">
		<refnamediv>
			<refname>method_exists</refname>
			<refpurpose>클래스의 멤버함수(메소드)가 존재하는지 검사합니다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>설 명</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>bool <function>method_exists</function>
					</funcdef>
					<paramdef>object <parameter>object</parameter>
					</paramdef>
					<paramdef>string <parameter>method_name</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
이 함수는 객체 <parameter>object</parameter>에 메소드 <parameter>method_name</parameter>이 존재하면 참(true)을 반환하고, 그렇지 않으면 거짓(false)을 반환합니다.
    </para>
		</refsect1>
	</refentry>
</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
