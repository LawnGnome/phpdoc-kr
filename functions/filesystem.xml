<reference id="ref.filesystem">
	<title>파일시스템 관련함수</title>
	<titleabbrev>파일시스템</titleabbrev>
	<refentry id="function.basename">
		<refnamediv>
			<refname>basename</refname>
			<refpurpose>
     경로명에서 파일이름만 반환합니다
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>string <function>basename</function>
					</funcdef>
					<paramdef>string <parameter>path</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     이 함수는 경로가 포함된 파일이름이 주어졌을때 파일의 이름부분만 반환합니다
    </para>
			<para>
     윈도우즈에서는 슬래쉬와 (<literal>/</literal>) 백슬래쉬(<literal>\</literal>) 모두 경로구분자로 사용됩니다. 그 외의 환경에서는 슬래쉬(<literal>/</literal>)만 사용됩니다
     .
    </para>
			<para>
				<example>
					<title>
						<function>basename</function> 예문</title>
					<programlisting role="php">
$path = "/home/httpd/html/index.php3";
$file = basename ($path); // $file 은 "index.php3" 로 설정됩니다.
      </programlisting>
				</example>
			</para>
			<para>
     참조: <function>dirname</function>
			</para>
		</refsect1>
	</refentry>
	<refentry id="function.chgrp">
		<refnamediv>
			<refname>chgrp</refname>
			<refpurpose>파일의 그룹을 변환합니다</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>chgrp</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
					<paramdef>mixed <parameter>group</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
파일의 그룹을 <parameter>filename</parameter>에서 <parameter>group</parameter>으로 바꾸고자 할때 수퍼유저만이 파일의 그룹을 임으로 변경할 수 있고 그 외의 사용자들은 멤버로 있을때만 어떤 파일의 그룹을 변경할 수 있습니다. 
    </para>
			<para>
성공하면 true, 실패하면 false를 반환합니다.
    </para>
			<para>
 참조: <function>chown</function> 그리고 <function>chmod</function>.
    </para>
			<note>
				<simpara>
이 함수는 윈도우즈에서는 동작하지 않습니다.
     </simpara>
			</note>
		</refsect1>
	</refentry>
	<refentry id="function.chmod">
		<refnamediv>
			<refname>chmod</refname>
			<refpurpose>파일의 모드 변경</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>chmod</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
					<paramdef>int <parameter>mode</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
				<parameter>filename</parameter>에 정의된 파일의 모드를 주어진 <parameter>mode</parameter>로 변경하고자 할때 사용합니다.
    </para>
			<para>
주의할 점은 <parameter>mode</parameter>가 자동으로 8진수로 바뀌지 않는다는 것입니다. 그래서 만약에 문자열("g+w")를 사용한다면 정확하게 동작하지 않을 수 있습니다. 그래서 확실히 동작하는 구문을 사용하려면 0을 이용해서 <parameter>mode</parameter>의 형태를 미리 정의해 주어야 합니다:
      <informalexample>
					<programlisting role="php">
chmod ("/somedir/somefile", 755);   // 10진수 : 정확하게 동작하지 않을 것임
chmod ("/somedir/somefile", "u+rwx,go+rx"); // 문자열 :  잘못된 구문
chmod ("/somedir/somefile", 0755);  // 8진수 : 정확한 모드 값
      </programlisting>
				</informalexample>
			</para>
			<para>
성공하면 true, 실패하면 false를 반환합니다.    </para>
			<para>
     참조: <function>chown</function> 그리고 <function>chgrp</function>.
    </para>
			<note>
				<simpara>
이 함수는 윈도우즈에서는 동작하지 않습니다.
     </simpara>
			</note>
		</refsect1>
	</refentry>
	<refentry id="function.chown">
		<refnamediv>
			<refname>chown</refname>
			<refpurpose>파일의 소유자 변경</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>chown</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
					<paramdef>mixed <parameter>user</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     어떤 파일의 소유자를 변경하고자 할때 수퍼유저만이 파일의 소유자를 바꿀 수 있습니다.
    </para>
			<para>
     성공하면 true, 그렇지 않으면 false를 반환합니다.
    </para>
			<para>
    참조: <function>chown</function> 그리고 <function>chmod</function>.
    </para>
			<note>
				<simpara>
이 함수는 윈도우즈에서는 동작하지 않습니다.
     </simpara>
			</note>
		</refsect1>
	</refentry>
	<refentry id="function.clearstatcache">
		<refnamediv>
			<refname>clearstatcache</refname>
			<refpurpose>파일의 통계(stat) 캐시를 삭제합니다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>void <function>clearstatcache</function>
					</funcdef>
					<void/>
				</funcprototype>
			</funcsynopsis>
			<para>
대부분의 운영체제에서<systemitem>stat</systemitem>나<systemitem>lstat</systemitem>등의 시스템호출을 사용해서 일을하는 것은 꽤 자원을 많이 소모합니다. 그렇기 때문에 최종적으로 사용된 상태를 나타내는 함수(아래에 나열된)의 결과는 다음번에 같은 파일이름을 사용하여 그런 호출을 할 경우를 위하여 저장이 됩니다. 만약에 파일이 여러번 체크가 되었고 파일이 바뀌거나 파일이 없어졌을 경우등에 상태를 강제로 다시 체크하고자 한다면 이 함수를 사용하여 저장되어있는 최종결과를 메모리에서 삭제할 수 있습니다.
    </para>
			<para>
이 값은 어떤 단일 요청(request)이 유효할 때까지만 캐시된 값입니다.
    </para>
			<para>
				<function>stat</function>을 포함하여
     <function>lstat</function>,
     <function>file_exists</function>,
     <function>is_writable</function>,
     <function>is_readable</function>,
     <function>is_executable</function>,
     <function>is_file</function>,
     <function>is_dir</function>,
     <function>is_link</function>,
     <function>filectime</function>,
     <function>fileatime</function>,
     <function>filemtime</function>,
     <function>fileinode</function>,
     <function>filegroup</function>,
     <function>fileowner</function>,
     <function>filesize</function>,
     <function>filetype</function> 그리고
     <function>fileperms</function>이 이 함수의 영향을 받게 되는 함수입니다.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.copy">
		<refnamediv>
			<refname>copy</refname>
			<refpurpose>파일을 복사합니다</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description설명</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>copy</function>
					</funcdef>
					<paramdef>string <parameter>source</parameter>
					</paramdef>
					<paramdef>string <parameter>dest</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
파일의 복사본을 만듭니다. 복사가 되면 true, 그렇지 않으면 false를 반환합니다.
     <example>
					<title>
						<function>copy</function>예문</title>
					<programlisting role="php">
if (!copy($file, $file.'.bak')) {
    print ("$file을 복사하는데 실패했습니다...&lt;br>\n");
}
      </programlisting>
				</example>
			</para>
			<para>
     참조: <function>rename</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.delete">
		<refnamediv>
			<refname>delete</refname>
			<refpurpose>실제로는 없는 명령</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>void <function>delete</function>
					</funcdef>
					<paramdef>string <parameter>file</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
이것은 <function>unlink</function>나 <function>unset</function>의 함수를 잘못된 장소에서 사람들이 찾을까봐 목록에 끼워넣은 것입니다.
    </para>
			<para>
     참조: <function>unlink</function>는 파일을 삭제하고자 할때,
     <function>unset</function>는 변수를 삭제하고자 할 때.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.dirname">
		<refnamediv>
			<refname>dirname</refname>
			<refpurpose>경로의 구성요소중에서 디렉토리 이름만 반환합니다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>string <function>dirname</function>
					</funcdef>
					<paramdef>string <parameter>path</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
이 함수는 어떤 파일을 지정하는 경로가 주어졌을때 디렉토리의 이름을 반환합니다</para>
			<para>
윈도우즈에서는 슬래시(<literal>/</literal>) 와 역슬래시 (<literal>\</literal>) 모두 경로명을 구분하는 구분자로 사용되지만 기타의 운영체제에서는 슬래시(<literal>/</literal>)만 사용됩니다.
     </para>
			<para>
				<example>
					<title>
						<function>dirname</function> 예문</title>
					<programlisting role="php">
$path = "/etc/passwd";
$file = dirname ($path); // $file 은 "/etc" 로 설정됩니다.
      </programlisting>
				</example>
			</para>
			<para>
     참조: <function>basename</function>
			</para>
		</refsect1>
	</refentry>
	<refentry id="function.diskfreespace">
		<refnamediv>
			<refname>diskfreespace</refname>
			<refpurpose>디렉토리의 사용가능한 공간을 반환합니다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>float <function>diskfreespace</function>
					</funcdef>
					<paramdef>string <parameter>directory</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
이 함수는 디렉토리를 포함한 문자열이 주어졌을때 파일시스템이나 디스크파티션의 사용가능한 공간을 바이트로 반환합니다.
    </para>
			<para>
				<example>
					<title>
						<function>diskfreespace</function>예문</title>
					<programlisting role="php">
$df = diskfreespace("/"); // $df 는 "/"에서 사용가능한 공간의 바이트 크기를 보여줍니다.
      </programlisting>
				</example>
			</para>
		</refsect1>
	</refentry>
	<refentry id="function.fclose">
		<refnamediv>
			<refname>fclose</refname>
			<refpurpose>열려있는 파일 포인터를 닫습니다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>fclose</function>
					</funcdef>
					<paramdef>int <parameter>fp</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     이 파일은 fp가 닫힐때 지정됩니다.
    </para>
			<para>
     성공하면 true, 실패하면 false를 반환합니다.
    </para>
			<para>
파일포인터는 반드시 유효한 것이어야 하고,<function>fopen</function> 이나 <function>fsockopen</function>등에의해 성공적으로 열려진 파일을 지정해야 합니다.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.feof">
		<refnamediv>
			<refname>feof</refname>
			<refpurpose>파일의 끝이 파일포인터에 있는지 테스트합니다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>feof</function>
					</funcdef>
					<paramdef>int <parameter>fp</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
파일 포인터가 파일의 끝에 있거나 에러가 발생하면 true, 그렇지 않으면 false를 반환합니다.
    </para>
			<para>파일포인터는 반드시 유효한 것이어야하고,<function>fopen</function> 이나 <function>popen</function> 또는  <function>fsockopen</function>에 의해 성공적으로 열려진 파일을 지정해야 합니다. 
	</para>
		</refsect1>
	</refentry>
	<refentry id="function.fflush">
		<refnamediv>
			<refname>fflush</refname>
			<refpurpose>출력결과를 파일로 보냅니다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>fflush</function>
					</funcdef>
					<paramdef>int <parameter>fp</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     이 함수는모든 버퍼에 저장되어있던 출력을 파일핸들에 의해 지정된 자원에 강제로 쓰기합니다.
     <parameter>fp</parameter>.
성공하면 true, 실패하면 false를 반환.
    </para>
			<para>이 파일포인터는 반드시 유효한 것이어야 하고,<function>fopen</function>이나 <function>popen</function>또는 <function>fsockopen</function>에 의해 성공적으로 열려진 파일을 가리켜야 합니다.
	</para>
		</refsect1>
	</refentry>
	<refentry id="function.fgetc">
		<refnamediv>
			<refname>fgetc</refname>
			<refpurpose>파일포인터로부터 문자 가져오기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>string <function>fgetc</function>
					</funcdef>
					<paramdef>int <parameter>fp</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
fp에 의해 가리켜진 파일로부터 한개의 문자를 포함한 문자열을 반환합니다.  FALSE 나 EOF를 반환합니다.
    </para>
			<para>이 파일포인터는 반드시 유효한 것이어야 하고,<function>fopen</function>이나 <function>popen</function> 또는 <function>fsockopen</function>에 의해 성공적으로 열려진 파일을 가리켜야 합니다.
	</para>		<para> 
     참조: <function>fread</function>, <function>fopen</function>,
     <function>popen</function>, <function>fsockopen</function>, 그리고 <function>fgets</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.fgetcsv">
		<refnamediv>
			<refname>fgetcsv</refname>
			<refpurpose>
   파일포인터에서 라인을 가져오고 CVS 에 맞게 변환합니다.
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>array <function>fgetcsv</function>
					</funcdef>
					<paramdef>int <parameter>fp</parameter>
					</paramdef>
					<paramdef>int <parameter>length</parameter>
					</paramdef>
					<paramdef>string 
       <parameter>
							<optional>delimiter</optional>
						</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<simpara>
				<function>fgetcsv</function>가 <acronym>CSV</acronym>형식으로 필드를 읽어와서 변환하고 읽은 필드를 포함하는 배열로 반환하는 것을 제외하고는 <function>fgets</function>와 비슷합니다. 세번째 매개변수로 특정한 구분문자를 지정하지 않는다면 필드의 구분문자는 콤마가 됩니다. 
    </simpara>
			<simpara>
				<parameter>Fp</parameter>는 <function>fopen</function>,<function>popen</function> 이나<function>fsockopen</function>에 의해 성공적으로 열려진 파일에 대한 유효한 파일 포인터여야 합니다. 
			</simpara>
			<simpara>
     CSV 파일에서 가장 긴 라인보다 더 길어야 합니다.(마지막 문자 찾기가 허용되었을 때)
    </simpara>
			<simpara>
				<function>fgetcsv</function>는 파일의 끝이거나 실패시 false를 반환합니다. 
    </simpara>
			<simpara>
     주의-- CSV 파일에서 비어있는 라인은 null 필드를 배열로 만들어서 반환하고 에러로 처리되지 않습니다.
    </simpara>
			<example>
				<title>
					<function>fgetcsv</function>예문 - CSV 파일의 전체 내용을 읽고 프린트하기
     </title>
				<programlisting role="php">
$row = 1;
$fp = fopen ("test.csv","r");
while ($data = fgetcsv ($fp, 1000, ",")) {
    $num = count ($data);
    print "&lt;p&gt; $row 라인에 $num 개의 필드: &lt;br&gt;";
    $row++;
    for ($c=0; $c&lt;$num; $c++) {
        print $data[$c] . "&lt;br&gt;";
    }
}
fclose ($fp);
     </programlisting>
			</example>
		</refsect1>
	</refentry>
	<refentry id="function.fgets">
		<refnamediv>
			<refname>fgets</refname>
			<refpurpose>파일 포인터에서 라인 가져오기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>string <function>fgets</function>
					</funcdef>
					<paramdef>int <parameter>fp</parameter>
					</paramdef>
					<paramdef>int <parameter>length</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
    리턴값을 포함한 새로운 문자열이거나 파일의 끝중에서 먼저 도달되는 것에서 1 바이트를 읽어들인후 length만큼 증가되는 문자열 - fp에 의해 가리켜진 파일로부터 1 바이트를 읽습니다. length일때 끝을 읽습니다. - 을 반환합니다. 
    </para>
			<para>
   에러가 발생하면 false를 반환합니다.
    </para>
			<para>
   일반적인 함정:
    </para>
			<simpara>
fgets의 'C' 구조를 자주 사용하는 사람들은 EOF 가 반환되는 방법이 다르다는 것을 주의해야 합니다.
    </simpara>
			<simpara>
     파일 포인터는 유효한 것이어야 하고 포인터가 가리키는 것은 성공적으로 열려진 <function>fopen</function>,<function>popen</function> 또는 <function>fsockopen</function>에 의해 성공적으로 열려진 파일이어야 한다.
    </simpara>
			<para>
     단순한 예문     <example>
					<title>파일을 한 라인씩 읽어들이기</title>
					<programlisting role="php">
$fd = fopen ("/tmp/inputfile.txt", "r");
while (!feof ($fd)) {
    $buffer = fgets($fd, 4096);
    echo $buffer;
}
fclose ($fd);
      </programlisting>
				</example>
			</para>
			<para> 
     참조: <function>fread</function>, <function>fopen</function>,
     <function>popen</function>, <function>fgetc</function>,
     <function>fsockopen</function>, 그리고
     <function>socket_set_timeout</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.fgetss">
		<refnamediv>
			<refname>fgetss</refname>
			<refpurpose>
     파일포인터에서 라인을 가져오고 HTML 태그를 없애기
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>string <function>fgetss</function>
					</funcdef>
					<paramdef>int <parameter>fp</parameter>
					</paramdef>
					<paramdef>int <parameter>length</parameter>
					</paramdef>
					<paramdef>string 
       <parameter>
							<optional>allowable_tags</optional>
						</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
fgetss가 읽어들인 텍스트에서 HTML과 PHP 태그를 없애는 것을 제외하고는 <function>fgets</function>와 같습니다.
    </para>
			<para>
세번째 매개변수로 옵션을 사용해서 특정한 태그를 제외시킬 수가 있습니다. 
     <note>
					<para>
						<parameter>allowable_tags</parameter>가 PHP 3.0.13, PHP4B3 에 추가되었습니다.
      </para>
				</note>
			</para>
			<para>
     참조: <function>fgets</function>, <function>fopen</function>,
     <function>fsockopen</function>, <function>popen</function>, 그리고
     <function>strip_tags</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.file">
		<refnamediv>
			<refname>file</refname>
			<refpurpose>파일전체를 배열로 읽어들임</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>array <function>file</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
					<paramdef>int 
       <parameter>
							<optional>use_include_path</optional>
						</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
				<function>file</function>이 파일을 배열로 반환하는 것을 제외하고는 <function>readfile</function>과 같습니다.  새로운 라인이 연결되는 것을 포함해서 배열의 매 요소는 파일의 라인과 비슷합니다.
    </para>
			<para>파일에서 <link linkend="ini.include-path">include_path</link>에서 파일을 찾고 싶다면 두번째 매개변수로 "1"을 사용하면 됩니다.	
	</para>
				<informalexample>
					<programlisting role="php">
&lt;?php
// 배열로 웹 페이지를 가져오고 출력함
$fcontents = file ('http://www.php.net');
while (list ($line_num, $line) = each ($fcontents)) {
    echo "&lt;b&gt;Line $line_num:&lt;/b&gt; " . htmlspecialchars ($line) . "&lt;br&gt;\n";
}

//문자열로 웹 페이지를 가져옴
$fcontents = join ('', file ('http://www.php.net'));
?&gt;
      </programlisting>
				</informalexample>
			<para> 
     참조: <function>readfile</function>,
     <function>fopen</function>, <function>fsockopen</function>, 그리고 <function>popen</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.file-exists">
		<refnamediv>
			<refname>file_exists</refname>
			<refpurpose>파일이 있는지 체크</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>bool <function>file_exists</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<simpara>
     Returns true if the file specified by
     <parameter>filename</parameter>에 의해 지정된 파일이 있으면 true, 없으면 false를 반환합니다.
    </simpara>
			<simpara>
				<function>file_exists</function>는 원격 파일에는 동작하지 않습니다.;
서버의 파일시스템을 통해 파일에 접근한 것인지 검사됩니다.
    </simpara>
			<simpara>
이 함수의 실행결과는 캐시가 됩니다. 좀 더 자세한 내용을 알고 싶다면 <function>clearstatcache</function>를 보십시오.
    </simpara>
		</refsect1>
	</refentry>
	<refentry id="function.fileatime">
		<refnamediv>
			<refname>fileatime</refname>
			<refpurpose>최근에 파일에 접근한 시간을 가져옴</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>fileatime</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<simpara> 
    파일에 최종 접근 시간을 반환하며 에러가 발생할 경우에는 false를 반환합니다. 반환되는 시간은 유닉스형식입니다.
    </simpara>
			<simpara>
    이 함수의 실행결과는 캐시가 됩니다. 좀 더 자세한 내용을 알고 싶다면 <function>clearstatcache</function>를 보십시오.

    </simpara>
			<simpara>
주의: 파일에 접근한 시간은 파일을 읽어들인후에 접근이 막혔을 때마다 바뀌는 것이 지원됩니다.이렇게 하는 것은 정기적으로 매우 많은 파일이나 디렉토리에 어플리케이션에서 접근할 때 꽤 많은 자원을 요구합니다.몇몇 유닉스 시스템에서는 그런 어플리케이션의 퍼포먼스 증가를 막기 위해서 접근시간 업데이트 설정을 꺼놓고 마운트 하기도 합니다. USENET 뉴스 스풀이 일반적인 예입니다. 그런 파일시스템에는 이 함수는 별로 쓸모 없을것입니다.
    </simpara>
		</refsect1>
	</refentry>
	<refentry id="function.filectime">
		<refnamediv>
			<refname>filectime</refname>
			<refpurpose>파일의 아이노드 변경시간을 가져옵니다</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>filectime</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     파일이 마지막으로 변경된 시간을 반환합니다. 에러가 발생하면 false를 반환합니다. 반환되는 시간은 유닉스 형식입니다. 
    </para>
			<para>
    이 함수의 실행결과는 캐쉬가 됩니다. 좀 더 자세한 내용은  <function>clearstatcache</function>를 참조하세요.
    </para>
			<para>주의: 대부분의 유닉스 파일시스템에서는 아이노드의 데이타(권한, 소유자, 그룹이나 다른 요소)가 변경되었을 때 파일이 바뀌는 것이 허용됩니다. 
			참조: <function>filemtime</function> (이것은 웹 페이지의 하단에 "마지막 수정시간"을 붙이고 싶을 때 사용합니다. ) 그리고 
     <function>fileatime</function>.
    </para>
			<para>주의: 몇 몇 유닉스 텍스트에서 파일의 ctime이 파일이 만들어진 시간으로 사용하고자 하는 경우가 있는데 이것은 잘못된 것입니다. 대부분의 유닉스 파일시스템에는 파일이 만들어진 시간이라는 것이 없습니다. 
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.filegroup">
		<refnamediv>
			<refname>filegroup</refname>
			<refpurpose>파일의 그룹을 가져옵니다</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>filegroup</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>    
      파일의 소유자나 그룹의 ID를 반환합니다. 에러가 발생하면 false를 반환합니다. 그룹 ID는 숫자형식으로 반환이 됩니다. 그룹의 이름으로 바꾸기 위해서 <function>posix_getgrgid</function>함수가 사용됩니다. 
    </para>
			<para>
     이 함수의 실행결과는 캐시가 됩니다. 좀 더 자세한 내용을 알고 싶을 때는 
     <function>clearstatcache</function>를 보십시오.    </para>
			<note>
				<simpara>
     이 함수는 윈도우즈에서는 동작하지 않습니다. 
     </simpara>
			</note>
		</refsect1>
	</refentry>
	<refentry id="function.fileinode">
		<refnamediv>
			<refname>fileinode</refname>
			<refpurpose>파일의 아이노드를 가져옵니다</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>fileinode</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para> 
      파일의 아이노드 숫자를 반환하거나 에러일 경우에는 false를 반환합니다.
     </para>
			<para>
     이 함수의 실행결과는 캐시가 됩니다. 좀 더 자세한 내용을 알고 싶을 때는 
     <function>clearstatcache</function>를 보십시오.    </para>
			<note>
				<simpara>
     이 함수는 윈도우즈에서는 동작하지 않습니다
     </simpara>
			</note>
		</refsect1>
	</refentry>
	<refentry id="function.filemtime">
		<refnamediv>
			<refname>filemtime</refname>
			<refpurpose>파일이 수정된 시간을 가져옵니다</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>filemtime</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     파일이 마지막으로 수정이 된 시간을 반환하거나 실패할 경우에는 false를 반환합니다. 반환되는 시간은 유닉스 형식입니다
    </para>
			<para>
     이 함수의 실행결과는 캐시가 됩니다. 좀 더 자세한 내용을 알고 싶을 때는 
     <function>clearstatcache</function>를 보십시오.    </para>
			<para>주의: 이 함수는 파일의 내용이 수정되는 도중에 접근을 막은 시간이 기록이 됩니다. 이 함수의 실행결과와 함께 <function>date</function>를 사용하면 페이지의 하단에 출력가능한 수정일자를 표시할 수 있습니다. 
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.fileowner">
		<refnamediv>
			<refname>fileowner</refname>
			<refpurpose>파일의 소유자를 가져옵니다</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>fileowner</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>    
     파일 소유자의 ID를 숫자형식으로 반환하거나 실패할 경우에는 false를 반환합니다. ID를 사용자의 이름으로 바꾸기 위해서 <function>posix_getpwuid</function>를 사용합니다.
    </para>
			<para>
     이 함수의 실행결과는 캐시가 됩니다. 좀 더 자세한 내용을 알고 싶을 때는 
     <function>clearstatcache</function>를 보십시오.
    </para>
			<note>
				<simpara>
     이 함수는 윈도우즈에서는 동작하지 않습니다.
     </simpara>
			</note>
		</refsect1>
	</refentry>
	<refentry id="function.fileperms">
		<refnamediv>
			<refname>fileperms</refname>
			<refpurpose>파일의 권한을 가져옵니다</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>fileperms</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>파일의 권한을 반환하거나 실패할 경우에는 false를 반환합니다.
    </para>
			<para>이 함수의 실행결과는 캐시가 됩니다. 좀 더 자세한 내용을 알고 싶을때는 
     <function>clearstatcache</function>를 참조하세요   </para>
		</refsect1>
	</refentry>
	<refentry id="function.filesize">
		<refnamediv>
			<refname>filesize</refname>
			<refpurpose>파일의 크기를 가져옵니다</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>filesize</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para> 파일의 크기나 false를 반환합니다.
    </para>
			<para>이 함수의 실행결과는 캐시가 됩니다. 
     좀 더 자세한 내용을 알고 싶을때는 
     <function>clearstatcache</function>를 참조하세요.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.filetype">
		<refnamediv>
			<refname>filetype</refname>
			<refpurpose>파일의 형식을 가져옵니다</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>string <function>filetype</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>반환되는 파일의 형식은  fifo, char,
     dir, block, link, file, 그리고 unknown 입니다.</para>
			<para>에러가 발생하면 false를 반환합니다.
    </para>
			<para>
     이 함수의 실행결과는 캐시가 됩니다. 
     좀 더 자세한 내용을 알고 싶을때는 
     <function>clearstatcache</function>를 참조하세요.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.flock">
		<refnamediv>
			<refname>flock</refname>
			<refpurpose>파일 잠김에 관한 간단한 도움말</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>bool <function>flock</function>
					</funcdef>
					<paramdef>int <parameter>fp</parameter>
					</paramdef>
					<paramdef>int <parameter>operation</parameter>
					</paramdef>
					<paramdef>int 
       <parameter>
							<optional>wouldblock</optional>
						</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<simpara>PHP는 파일에 대한 접근을 막는데 간단한 방법을 제공합니다. 
			이것은 모든 접근하는 프로그램이 파일을 잠그는데 같은 방법을 사용해야 하며 
			그렇지 않으면 동작하지 않습니다.
    </simpara>
			<simpara>
				<function>flock</function>은 <parameter>fp</parameter>가 열려진 
				파일에 대한 포인터일때 이것위에서 동작합니다
		<parameter>operation</parameter>은 산출되는 값중에 하나입니다:
</simpara>
			<para>
				<itemizedlist>
					<listitem>
						<simpara>공동으로 접근을 막고자 할때(읽는 사람) 
         <parameter>operation</parameter>을 LOCK_SH로 설정합니다 (PHP 4.0.1 이전버전은 1로 설정합니다).
       </simpara>
					</listitem>
					<listitem>
						<simpara>
         단독으로 접근을 막는 것이 필요할때(쓰는 사람)
         <parameter>operation</parameter>을 LOCK_EX로 설정합니다 (PHP 4.0.1이전버전은 2로 설정합니다).
       </simpara>
					</listitem>
					<listitem>
						<simpara>
         파일에 대한 접근을 풀어줄때 (공동 또는 단독)
         <parameter>operation</parameter>을 LOCK_UN으로 설정합니다. (PHP 4.0.1이전 버전은 3으로 설정합니다).
       </simpara>
					</listitem>
					<listitem>
						<simpara>
         파일에 대한 접근을 막는데 <function>flock</function>을 사용하고 싶지않으면 
         LOCK_NB을 추가 하세요 (PHP 4.0.1 이전버젼에서는)
         <parameter>operation</parameter>을 4로 설정하세요.
       </simpara>
					</listitem>
				</itemizedlist>
			</para>
			<simpara>
				<function>flock</function>은  실제로 모든 환경에서 
				간단한 읽기/쓰기 예를 수행할 수 있게 만들어줍니다
     reader/writer model which can be used on virtually every platform
     (대부분의 유닉스와 윈도우즈 환경에서도). 접근을 막을 수가 없다면
     세번째 매개변수가 true로 설정되어 있는 것입니다.(EWOULDBLOCK
     errno condition)
    </simpara>
			<simpara>
				<function>flock</function>은 성공하면 true를 반환하고 실패하면 false를 반환합니다.
				(예를 들면 파일 접근을 막는것이 요청되지 못할 때).
    </simpara>
			<warning>
				<para>
					<function>flock</function>은 대부분의 운영체제에서 프로세스 단계에서 실행됩니다
     . ISAPI같은 멀티쓰레드된 서버 API를 사용하고자 할 경우에 
      <function>flock</function>이 같은 서버의 인스턴스의 병렬 쓰레드로서 
     다른 PHP스크립트가 진행될때 파일을 보호할 것을 기대하지 마십시오
     </para>
			</warning>
		</refsect1>
	</refentry>
	<refentry id="function.fopen">
		<refnamediv>
			<refname>fopen</refname>
			<refpurpose>파일이나 URL을 엽니다</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>fopen</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
					<paramdef>string <parameter>mode</parameter>
					</paramdef>
					<paramdef>int 
       <parameter>
							<optional>use_include_path</optional>
						</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<simpara>
     만약<parameter>filename</parameter>이 "http://"로 시작하면 
	(sensitive 하지 않은 경우에), HTTP 1.0 연결이 지정된 서버를 열어줍니다.그리고 파일 포인터는 
	응답텍스트의 시작부분으로 돌려집니다.. A '호스트:' 헤더부분은 
     name-based virtual hosts를 핸들링하기 위해서 요청과 함께 보내집니다.
    </simpara>
			<simpara>
     HTTP 리다이렉트를 건드리지 마십시오. 반드시 디렉토리뒤에 따르는 슬래쉬를 포함시켜야 합니다.
    </simpara>
			<simpara>
     만약에 <parameter>filename</parameter>이 "ftp://"로 시작이 되면 
     (sensitive 하지 않은 경우에), 지정된 서버가 ftp연결에 의해 열려집니다. 
     그리로 요청된 파일에 대한 포인터가 반환됩니다. 
     만약에 서버의 ftp가 받을 수 있는 모드를 지원하지 않으면, 이것은 실행될 수 없습니다. 
     ftp를 통해서 파일을 읽거나 쓸수도 있습니다.ftp (동시에 할 수는 없습니다).
    </simpara>
			<simpara>
     만약에<parameter>filename</parameter>이 "php://stdin",
     "php://stdout", "php://stderr",중의 하나라면  일치하는 
     표준입출력 스트림이 열리게 됩니다
     (PHP 3.0.13에 소개가 되어 있습니다;
     이전 버전에서 표준입출력 스트림에 접근하려면
    filename이 "/dev/stdin" 이나 "/dev/fd/0" 이어야 합니다.)
    </simpara>
			<simpara>
				<parameter>filename</parameter>이 다른 것으로 시작되면 그 파일은 
      파일 시스템에서 열려집니다. 그리고, 파일에 대한 파일 포인터가 열려서 반환됩니다.
    </simpara>
			<simpara>
     열수가 없다면 false를 반환합니다.
    </simpara>
			<para>
				<parameter>mode</parameter>다음의 어느것이라도 될 수가 있습니다:
     <itemizedlist>
					<listitem>
						<simpara>
        'r' - 읽기전용으로 열립니다; 파일포인터를 파일의 맨 앞에 놓습니다.
       </simpara>
					</listitem>
					<listitem>
						<simpara>
        'r+' - 읽기 쓰기가 가능합니다.; 파일 포인터를 파일의 맨 앞에 놓습니다.
       </simpara>
					</listitem>
					<listitem>
						<simpara>
        'w' - 쓰기 전용으로 열립니다; 파일 포인터를 파일의 맨 앞에 놓습니다
        그리고 파일의 크기를 0으로 만듭니다. 파일이 없으면 만듭니다.
       </simpara>
					</listitem>
					<listitem>
						<simpara>
        'w+' - 읽기 쓰기가 가능합니다; 파일포인터를 파일의 맨 앞에 놓습니다. 
       그리고 파일의 크기를0으로 만듭니다. 파일이 없으면 만듭니다.
       </simpara>
					</listitem>
					<listitem>
						<simpara>
        'a' - 쓰기 전용으로 열립니다; 파일 포인터를 파일의 끝에 놓습니다.
        파일이 없으면 만듭니다.
       </simpara>
					</listitem>
					<listitem>
						<simpara>
        'a+' - 읽기 쓰기가 가능합니다; 파일 포인터를 파일의 끝에 놓습니다.
         파일이 없으면 만듭니다.
       </simpara>
					</listitem>
				</itemizedlist>
				<parameter>mode</parameter>가 문자'b'를 포함할 수도 있습니다. 
     이것은 시스템상에서 바이너리와 텍스트 파일을 구별짓는데 쓸모가 있습니다
     (다시 말하면 유닉스에서는 쓸모가 없습니다).필요가 없으면 사용하지 마세요.
    </para>
			<para>
     세번째 매개변수를 사용할 수 있는데 <link linkend="ini.include-path">include_path</link>가운데서
     파일을 찾고 싶으면 "1"로 설정하세요.
    </para>
			<para>
				<example>
					<title>
						<function>fopen</function> example</title>
					<programlisting role="php">
$fp = fopen ("/home/rasmus/file.txt", "r");
$fp = fopen ("/home/rasmus/file.gif", "wb");
$fp = fopen ("http://www.php.net/", "r");
$fp = fopen ("ftp://user:password@example.com/", "w");
      </programlisting>
				</example>
			</para>
			<simpara>
     PHP의 서버 모듈 버전을 사용하는데 파일을 읽고 쓰는데 문제를 겪었다면
     파일과 디렉토리를 서버 프로세스가 접근이 가능하게 했는지 확인해보세요
    </simpara>
			<para>
     윈도우즈에서는, 파일의 경로에서 백슬래시를 사용했는지 슬래시를 사용했는지 주의하세요.
     <informalexample>
					<programlisting role="php"> 
$fp = fopen ("c:\\data\\info.txt", "r");
      </programlisting>
				</informalexample>
			</para>
			<simpara>
     참조 <function>fclose</function>,
     <function>fsockopen</function>,
     <function>socket_set_timeout</function>, and
     <function>popen</function>.
    </simpara>
		</refsect1>
	</refentry>
	<refentry id="function.fpassthru">
		<refnamediv>
			<refname>fpassthru</refname>
			<refpurpose>
     파일 포인터에 남아있는 모든 데이타를 출력합니다
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>fpassthru</function>
					</funcdef>
					<paramdef>int <parameter>fp</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<simpara>
     주어진 파일포인터를 끝까지 읽고 일반 출력으로 결과를 씁니다.
    </simpara>
			<simpara>
     에러가 발생하면<function>fpassthru</function>는 false를 반환합니다.
    </simpara>
			<simpara>
     파일포인터는 유효한 것이어야 합니다. 그리고 <function>fopen</function>,
     <function>popen</function>, or <function>fsockopen</function>에 의해 성공적으로
      열려진 파일을 가리켜야 합니다.
     <function>fpassthru</function>가 파일읽기를 마치면 파일이 닫힙니다.
     (남겨진 <parameter>fp</parameter>는 쓸모가 없습니다).
    </simpara>
			<simpara>
     파일의 내용을 일반출력으로 보내기 위한 것이라면, <function>fopen</function>을 호출하는 것보다
    <function>readfile</function>을 사용하고 싶어할 것입니다
    </simpara>
			<simpara>
     참조<function>readfile</function>,
     <function>fopen</function>, <function>popen</function>, 그리고
     <function>fsockopen</function>
			</simpara>
		</refsect1>
	</refentry>
	<refentry id="function.fputs">
		<refnamediv>
			<refname>fputs</refname>
			<refpurpose>파일 포인터에 기록하기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>fputs</function>
					</funcdef>
					<paramdef>int <parameter>fp</parameter>
					</paramdef>
					<paramdef>string <parameter>str</parameter>
					</paramdef>
					<paramdef>int 
       <parameter>
							<optional>length</optional>
						</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
				<function>fputs</function>는 <function>fwrite</function>로 언제나 앨리어스 됩니다.  
		<parameter>length</parameter>매개변수는 선택이 가능하고 전체 문자열이 나열되지 않으면 쓰여진다는 것을 주의하세요.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.fread">
		<refnamediv>
			<refname>fread</refname>
			<refpurpose>Binary-safe 파일 읽기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>string <function>fread</function>
					</funcdef>
					<paramdef>int <parameter>fp</parameter>
					</paramdef>
					<paramdef>int <parameter>length</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<simpara>
				<function>fread</function>는  <parameter>fp</parameter>에 의해 참조가 되는 
     파일 포인터로부터 <parameter>length</parameter>를 바이트로 증가시키며 읽습니다.
    <parameter>length</parameter>바이트가 읽혔거나 파일의 끝에 도달되거나 
    둘중에 먼저 끝나는 것이 있으면 읽기가 종료됩니다..
    </simpara>
			<para>
				<informalexample>
					<programlisting role="php">
// 파일의 내용을 문자열로 가져오기
$filename = "/usr/local/something.txt";
$fd = fopen ($filename, "r");
$contents = fread ($fd, 파일의크기 ($filename));
fclose ($fd);
      </programlisting>
				</informalexample>
			</para>
			<simpara>
     참조 <function>fwrite</function>, <function>fopen</function>,
     <function>fsockopen</function>, <function>popen</function>,
     <function>fgets</function>, <function>fgetss</function>,
     <function>fscanf</function>, <function>file</function>, and
     <function>fpassthru</function>.
    </simpara>
		</refsect1>
	</refentry>
	<refentry id="function.fscanf">
		<refnamediv>
			<refname>fscanf</refname>
			<refpurpose>형식에 따라서 파일로 부터 분석하여 입력하기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>mixed <function>fscanf</function>
					</funcdef>
					<paramdef>int <parameter>handle</parameter>
					</paramdef>
					<paramdef>string <parameter>format</parameter>
					</paramdef>
					<paramdef>string 
       <parameter>
							<optional>var1</optional>
						</parameter>...
      </paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
				<function>fscanf</function>는 <function>sscanf</function>과 비슷하지만, 
     내용을 파일로부터 가져온다는 것이 다릅니다.
     <parameter>handle</parameter>과 함께 일련의 <parameter>format</parameter>으로 
     입력내용을 바꾸어 줍니다.
     이 함수에 두개의 매개변수만 사용된다면 배열 형식의 값으로 변환되어 반환됩니다.
     그렇지 않은 경우에는 선택적인 매개변수를 사용하지 않으면 이 함수는 할당된 값을 숫자로 반환합니다.
     선택적인 매개변수는 반드시 passed by reference여야 합니다.
     <example>
					<title>
						<function>fscanf</function>예</title>
					<programlisting role="php">
$fp = fopen ("users.txt","r");
while ($userinfo = fscanf ($fp, "%s\t%s\t%s\n")) {
    list ($name, $profession, $countrycode) = $userinfo;
    //... do something with the values
}
fclose($fp);
      </programlisting>
				</example>
				<example>
					<title>users.txt</title>
					<programlisting>
javier  argonaut        pe
hiroshi sculptor        jp
robert  slacker us
luigi   florist it
      </programlisting>
				</example>
			</para>
			<para>
     참조 <function>fread</function>, <function>fgets</function>,
     <function>fgetss</function>, <function>sscanf</function>,
     <function>printf</function>, and <function>sprintf</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.fseek">
		<refnamediv>
			<refname>fseek</refname>
			<refpurpose>파일 포인터에서 찾기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>fseek</function>
					</funcdef>
					<paramdef>int <parameter>fp</parameter>
					</paramdef>
					<paramdef>int <parameter>offset</parameter>
					</paramdef>
					<paramdef>int 
       <parameter>
							<optional>whence</optional>
						</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
				<parameter>fp</parameter>에 의해 참조되는 파일을 파일 위치 측정자로 설정합니다.
    파일의 시작위치에서부터 바이트단위로 측정되는 새로운위치는
     아래와 같이 정의된 <parameter>whence</parameter>로부터 나열이 된 위치에 <parameter>offset</parameter>을 추가하여 얻어집니다
     <simplelist>
					<member>SEEK_SET - 위치를 <parameter>offset</parameter>바이트와 같게 합니다.</member>
					<member>SEEK_CUR -
      현재 위치에 <parameter>offset</parameter>을 더하여 위치를 정합니다.</member>
					<member>SEEK_END - 파일의 끝에 
      <parameter>offset</parameter>을 더하여 위치를 정합니다.</member>
				</simplelist>
			</para>
			<para>만약에<parameter>whence 가 정해지지 않았다면 SEEK_SET으로 가정이 됩니다.</parameter>
			</para>
			<para>
     성공하면 0을 반환하고 그렇지 않으면 1을 반환합니다. 
     이전에 EOF를 찾은 것은 에러에 영향을 주지 않습니다
    </para>
			<para>
	 만약에 "http://" or "ftp://" 형식을 사용한다면 		
     <function>fopen</function>에 의해 반환되는 파일포인터 상에서 사용되지 않을 것입니다
    </para>
			<note>
				<para>
					<parameter>whence</parameter>인수는 PHP 4.0 RC1 이후에 추가되었습니다.
     </para>
			</note>
			<para>
     참조 <function>ftell</function> and
     <function>rewind</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.fstat">
		<refnamediv>
			<refname>fstat</refname>
			<refpurpose>
     오픈 파일 포인터를 사용하는 파일에 대한 정보 가져오기
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>array <function>fstat</function>
					</funcdef>
					<paramdef>int <parameter>fp</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     파일 포인터 fp에 의해서 열려진 파일의 정보를 모읍니다.Gathers the statistics of the file opened by the file
     이 함수는 filename대신에 오픈 파일 포인터위에서 동작한다는 것을 제외하고는 <function>stat</function>과 비슷합니다.
    </para>
			<para>
     다음의 요소들과 함께 파일의 통계자료를 배열로 반환합니다:
     <orderedlist>
					<listitem>
						<simpara>장치(device)</simpara>
					</listitem>
					<listitem>
						<simpara>아이노드</simpara>
					</listitem>
					<listitem>
						<simpara>링크의 갯수</simpara>
					</listitem>
					<listitem>
						<simpara>소유자의 user id</simpara>
					</listitem>
					<listitem>
						<simpara>소유자의 group id</simpara>
					</listitem>
					<listitem>
						<simpara>아이노드 장치(device)가 있으면 장치(device) 형태*</simpara>
					</listitem>
					<listitem>
						<simpara>바이트단위 크기</simpara>
					</listitem>
					<listitem>
						<simpara>마지막 접근시간</simpara>
					</listitem>
					<listitem>
						<simpara>마지막 수정된 시간</simpara>
					</listitem>
					<listitem>
						<simpara>마지막 바뀐 시간</simpara>
					</listitem>
					<listitem>
						<simpara>파일 시스템 입출력(I/O) blocksize*</simpara>
					</listitem>
					<listitem>
						<simpara>할당된 block의 수</simpara>
					</listitem>
				</orderedlist>
     * - st_blksize 형태를 지원하는 시스템에만 유효합니다--다른 시스템
      (다시 말해서 윈도우즈같은)은 -1을 반환합니다</para>
			<para>
     이 함수의 실행결과는 캐시가 됩니다. 좀 더 
      자세히 알고 싶으면 <function>clearstatcache</function>참조하세요
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.ftell">
		<refnamediv>
			<refname>ftell</refname>
			<refpurpose>파일포인터의 읽기/쓰기 위치 말하기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>ftell</function>
					</funcdef>
					<paramdef>int <parameter>fp</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     fp에 의해 참조되는 파일의 위치를 반환합니다. 다시 말해서 상쇄된 결과가 파일 스트림안으로 들어갑니다    </para>
			<para>
    에러가 발생하면 false를 반환합니다.
    </para>
			<para>
     파일 포인터는 반드시 유효한 것이어야 하고 <function>fopen</function>이나
     <function>popen</function>에 의해 성공적으로 열려진 파일을 가리켜야 합니다.
    </para>
			<para> 
    참조<function>fopen</function>, <function>popen</function>,
     <function>fseek</function> and <function>rewind</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.ftruncate">
		<refnamediv>
			<refname>ftruncate</refname>
			<refpurpose>
     주어진 길이로 잘라내기
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>ftruncate</function>
					</funcdef>
					<paramdef>int <parameter>fp</parameter>
					</paramdef>
					<paramdef>int <parameter>size</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     파일포인터와 fp를 가져옵니다. 그리고 파일을 길이, 크기로 잘라냅니다. 
     이 함수는 성공하면 true, 실패하면 false를 반환합니다
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.fwrite">
		<refnamediv>
			<refname>fwrite</refname>
			<refpurpose>Binary-safe 파일 쓰기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>fwrite</function>
					</funcdef>
					<paramdef>int <parameter>fp</parameter>
					</paramdef>
					<paramdef>string <parameter>string</parameter>
					</paramdef>
					<paramdef>int 
       <parameter>
							<optional>length</optional>
						</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<simpara>
				<function>fwrite</function>는  <parameter>fp</parameter>에 의해 지정이 되는 
				파일 스트림에 <parameter>string</parameter>의 내용을 기록합니다.
     <parameter>length</parameter>인수가 주어지면 
     <parameter>length</parameter>바이트가 기록이 되거나 
     <parameter>string</parameter>의 끝에 도달하거나 먼저 끝나는 것에 의해 기록하는 것을 멈춥니다.
    </simpara>
			<simpara>
     주의할 것은 <parameter>length</parameter>인수가 주어지면,
     <link linkend="ini.magic-quotes-runtime">magic_quotes_runtime</link>설정옵션은 무시가 되고
     슬래시는 <parameter>string</parameter>에서 제거되지 않게됩니다.
    </simpara>
			<simpara>
     참조<function>fread</function>, <function>fopen</function>,
     <function>fsockopen</function>, <function>popen</function>, and
     <function>fputs</function>.
    </simpara>
		</refsect1>
	</refentry>
	<refentry id="function.set-file-buffer">
		<refnamediv>
			<refname>set_file_buffer</refname>
			<refpurpose>
     주어진 파일 포인터에 파일 버퍼링 설정하기
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>set_file_buffer</function>
					</funcdef>
					<paramdef>int <parameter>fp</parameter>
					</paramdef>
					<paramdef>int <parameter>buffer</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<simpara>
     출력시에 사용되는<function>fwrite</function>는 보통 8K로 버퍼링 됩니다.
    이것은 하나의 파일에 같은 출력 스트림에 쓰려고 하는 두개의 프로세스가 존재한다면, 각각은 8K의 데이터를 버퍼에 저장한후 다른 하나가 쓸 수 있도록 잠시 멈춘다는 의미입니다. <function>set_file_buffer</function>는 <parameter>fp</parameter>가 주어진 파일 포인터 상에 <parameter>buffer</parameter>바이트 버퍼링 쓰기작업을 수행할 수 있도록 설정합니다
     만약에 <parameter>buffer</parameter>가 0 이면 쓰기작업은 버퍼에 저장되지 않습니다.  이것은<function>fwrite</function>로 수행하는 모든 쓰기가 다른 프로세스에서 출력 스트림에 기록하려는 것을 허용하기 전에 완료되도록 합니다.
    </simpara>
			<simpara>
     The function returns 0 on success, or EOF if the request cannot
     be honored.
    </simpara>
			<para>
     아래의 예는 어떻게 <function>set_file_buffer</function>를 사용해서 버퍼되지 않는 스트림을 만드는 지 보여줍니다.
     <example>
					<title>
						<function>set_file_buffer</function>예</title>
					<programlisting role="php">
$fp=fopen($file, "w");
if($fp){
  set_file_buffer($fp, 0);
  fputs($fp, $output);
  fclose($fp);
}
      </programlisting>
				</example>
			</para>
			<simpara>
     참조<function>fopen</function>, <function>fwrite</function>.
    </simpara>
		</refsect1>
	</refentry>
	<refentry id="function.is-dir">
		<refnamediv>
			<refname>is_dir</refname>
			<refpurpose>filename 이 디렉토리인지 아닌지 이야기하기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>bool <function>is_dir</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     filename이 존재하고 디렉토리이면 true를 반환합니다.
    </para>
			<para>
     이 함수의 실행결과는 캐시가 됩니다. 좀더 자세한 내용을 알고 싶으면
     <function>clearstatcache</function>를 보세요    </para>
			<para>
     참조<function>is_file</function>그리고
     <function>is_link</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.is-executable">
		<refnamediv>
			<refname>is_executable</refname>
			<refpurpose>filename이 실행가능한 것인지 아닌지 이야기하기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>bool <function>is_executable</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     filename이 존재하고, 실행가능한 것이면 true를 반환합니다
    </para>
			<para>
     이 함수의 실행결과는 캐시가 됩니다. 좀 더 자세한 내용을 알고 싶으면 
     <function>clearstatcache</function>를 보세요    </para>
			<para>
     참조 <function>is_file</function> 그리고
     <function>is_link</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.is-file">
		<refnamediv>
			<refname>is_file</refname>
			<refpurpose>
     filename이 보통 파일인지 아닌지 이야기하기
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>bool <function>is_file</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     filename이 존재하고, 정상적인 보통의 파일이라면(regular) true를 반환
    </para>
			<para>
     이 함수의 실행결과는 캐시가 됩니다. 좀 더 자세한 내용을 알고 싶으면
     <function>clearstatcache</function>를 보세요.
    </para>
			<para>
     참조<function>is_dir</function> 그리고
     <function>is_link</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.is-link">
		<refnamediv>
			<refname>is_link</refname>
			<refpurpose>
     filename이 심볼릭 링크인지 아닌지 이야기하기
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>bool <function>is_link</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     filename이 존재하고 심볼릭링크된 파일이라면 true
    </para>
			<para>
     이 함수의 실행결과는 캐시가 됩니다. 좀 더 자세한 내용을 알고 싶으면
     <function>clearstatcache</function>를 보세요.
    </para>
			<para>
     참조 <function>is_dir</function> 그리고
     <function>is_file</function>.
    </para>
			<note>
				<simpara>
     이 함수는 윈도우즈에서는 동작하지 않습니다.     </simpara>
			</note>
		</refsect1>
	</refentry>
	<refentry id="function.is-readable">
		<refnamediv>
			<refname>is_readable</refname>
			<refpurpose>
     filename이 읽기 가능한 것인지 아닌지 이야기하기
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>bool <function>is_readable</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     filename이 존재하고 읽기 가능한 것이면 true를 반환합니다
    </para>
			<para>
     웹 서버가 자주 'nobody' 등으로 실행될 때 PHP는 파일에 접근할 때 
    사용자 아이디로 접근할 수가 있다는 것을 명심하세요.. 
     안전모드의 한계는 계정으로 받아들여지지 않는다는 것입니다.
    </para>
			<para>
     이 함수의 실행결과는 캐시가 됩니다. 좀 더 자세한 내용을 알고 싶으면
     <function>clearstatcache</function> 를 보세요    </para>
			<para>
     참조<function>is_writable</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.is-writable">
		<refnamediv>
			<refname>is_writable</refname>
			<refpurpose>filename이 쓰기가능한 것인지 아닌지 이야기하기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>bool <function>is_writable</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     filename이 존재하고 쓰기가능한 것이면 true를 반환합니다. 
     filename의 인수는 디렉토리가 쓰기가능한 것일때 
     디렉토리이름인지 체크할 수 있도록 합니다.
    </para>
			<para>
     웹 서버가 'nobody' 등으로 실행이 될때 PHP는 사용자 아이디로 
     파일에 접근하려고 할 수 있다는 것을 명심하세요.
     안전모드의 한계는 계정이 받아들여지지 않는다는 것입니다.
    </para>
			<para>
     이 함수의 실행결과는 캐시가 됩니다. 좀 더 자세한 내용을 알고 싶으면 
     <function>clearstatcache</function>를 보세요    </para>
			<para>
     참조<function>is_readable</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.is-uploaded-file">
		<refnamediv>
			<refname>is_uploaded_file</refname>
			<refpurpose>file이 HTTP POST를 통해 업로드된 것인지 아닌지 이야기하기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>bool <function>is_uploaded_file</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     이 함수는 PHP  3 에서는 3.0.16 이후, PHP 4 에서는 4.0.2 이후 버전부터 사용이 가능합니다..
    </para>
			<para>
     HTTP POST를 통해 업로드되어 파일의 이름이 <varname>filename</varname>에 의해 붙여진 것이면
    true를 반환합니다. 악의적인 사용자가 동작하지 말아야할 파일에서 동작하는 스크립트를 사용하려는 
    트릭을 쓰지 못하도록 하는데 유용합니다.--예를 들자면,
     <filename>/etc/passwd</filename>같은 것입니다.
    </para>
			<para>
     업로드된 파일에 전혀 손대지 않고 사용자나 같은 시스템내의 다른 사람에게 조차도 
     업로드된 파일의 내용을 감출수가 있는 어떤 기회라도 있다면 이런식으로 체크하는것은 특히 중요합니다.
    </para>
			<para>
    참조<function>move_uploaded_file</function>, 그리고 단순한 사용예를 위해서 
     <link linkend="features.file-upload">Handling file uploads</link>부분
     
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.link">
		<refnamediv>
			<refname>link</refname>
			<refpurpose>hard link 만들기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>link</function>
					</funcdef>
					<paramdef>string <parameter>target</parameter>
					</paramdef>
					<paramdef>string <parameter>link</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
				<function>link</function> hard link를 만듭니다.</para>
			<para>
     참조 <function>symlink</function>soft links를 만듭니다.
     그리고<function>linkinfo</function>와 함께 수행되는<function>readlink</function>
			</para>
			<note>
				<simpara>
     이 함수는 윈도우즈에서 동작하지 않습니다.
     </simpara>
			</note>
		</refsect1>
	</refentry>
	<refentry id="function.linkinfo">
		<refnamediv>
			<refname>linkinfo</refname>
			<refpurpose>링크 정보 가져오기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>linkinfo</function>
					</funcdef>
					<paramdef>string <parameter>path</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
				<function>linkinfo</function>는 마지막 시스템 호출에 의해서 반환이 되는 유닉스 C stat 구조체입니다.
      이 함수는 링크(<parameter>path</parameter>에 의해 지정된)가 실제로 있는지 검증하는데 사용이 되곤 합니다.
      (stat.h에 매크로 정의된 S_ISLINK 와 같은 방법을 사용합니다.) This
      0을 반환하거나 실패시 FALSE를 반환합니다.
    </para>
			<para>
     참조<function>symlink</function>, <function>link</function>,
     그리고<function>readlink</function>.
    </para>
			<note>
				<simpara>
     이 함수는 윈도우즈에서 동작하지 않습니다.     </simpara>
			</note>
		</refsect1>
	</refentry>
	<refentry id="function.mkdir">
		<refnamediv>
			<refname>mkdir</refname>
			<refpurpose>디렉토리 만들기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>mkdir</function>
					</funcdef>
					<paramdef>string <parameter>pathname</parameter>
					</paramdef>
					<paramdef>int <parameter>mode</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     pathname에 명기된 이름으로 디렉토리 만들기
    </para>
			<para>
     모드를 명기하는데 8진수를 사용하려고 할 경우에 주의할 것은 앞에 0이 붙어야 한다는 것입니다.
     <informalexample>
					<programlisting role="php">
    mkdir ("/path/to/my/dir", 0700);
      </programlisting>
				</informalexample>
			</para>
			<para>
     성공하면 true, 실패하면 false를 반환합니다.
    </para>
			<para>
     참조<function>rmdir</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.move-uploaded-file">
		<refnamediv>
			<refname>move_uploaded_file</refname>
			<refpurpose>업로드된 파일을 다른곳으로 이동하기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>bool <function>move_uploaded_file</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
					<paramdef>string <parameter>destination</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     이 함수는 PHP 3 에서는 3.0.16 이후, PHP 4 에서는 4.0.2 이후 버전부터 사용할 수 있습니다.
    </para>
			<para>
     이 함수는 <parameter>filename</parameter>에 의해서 지정된 파일이 PHP의 HTTP POST 파일 업로드 메카니즘을 
   통해서 업로드된 파일인지 확인합니다. 파일이 유효한 것일때 <parameter>destination</parameter>에 주어진 filename으로 이동이 됩니다
    </para>
			<para>
				<parameter>filename</parameter>이 유효한 것이 아니면 아무 일도 발생하지 않습니다.
     그리고 <function>move_uploaded_file</function>는 <literal>false</literal>를 반환합니다. 
    </para>
			<para>
				<parameter>filename</parameter>은 유효하나 어떤 이유가 있어서 이동할 수가 없을 때
     아무런 일도 발생하지 않습니다. 그리고 <function>move_uploaded_file</function>은
     <literal>false</literal>를 반환합니다. 덧붙여서 경고문이 보여집니다.
    </para>
			<para>
     이런 체크방법은 파일의내용을 이용자, 같은 시스템내의 다른 사람에게 파일을 
     손대지 않고 파일의 내용을 감출 수 있는 어떤 기회가 있다면 특별히 더욱 중요합니다.
    </para>
			<para>
      참조 <function>is_uploaded_file</function>, 그리고 간단한 사용법 예를 위한
     <link linkend="features.file-upload">Handling file uploads</link>부분.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pclose">
		<refnamediv>
			<refname>pclose</refname>
			<refpurpose>진행되는 파일 포인터 닫기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>pclose</function>
					</funcdef>
					<paramdef>int <parameter>fp</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
				<function>popen</function>에 의해 열려진 파일 포인터를 파이프로 닫기.
    </para>
			<para> 
     파일 포인터는 유효한 것이어야 하고 <function>popen</function>으로 성공적으로 호출되어 반환된 것이어야 합니다.
    </para>
			<para>
    실행된 프로세스의 결과통계를 반환합니다.
    </para>
			<para>
    참조<function>popen</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.popen">
		<refnamediv>
			<refname>popen</refname>
			<refpurpose>진행되는 파일 포인터를 열기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>popen</function>
					</funcdef>
					<paramdef>string <parameter>command</parameter>
					</paramdef>
					<paramdef>string <parameter>mode</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>파이프를 주어진 명령으로 명령을 포크함으로 실행되는 프로세스로 열어줍니다.
    </para>
			<para>
				<function>fopen</function>에 의해 반환되는 파일 포인터와 같지만, 단방향(읽기나 쓰기 둘중에 하나만 사용할 수 있는)이고  
     <function>pclose</function>로 닫혀야만 한다는 점이 다릅니다. 이 포인터는 <function>fgets</function>, <function>fgetss</function>,
     <function>fputs</function>과 함께 사용할 수 있습니다.
    </para>
			<para>
     에러가 발생하면 false를 반환합니다.
    </para>
			<para>
				<informalexample>
					<programlisting role="php">
$fp = popen ("/bin/ls", "r");
      </programlisting>
				</informalexample>
			</para>
			<para>
     참조<function>pclose</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.readfile">
		<refnamediv>
			<refname>readfile</refname>
			<refpurpose>파일을 출력합니다</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>readfile</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
					<paramdef>int 
       <parameter>
							<optional>use_include_path</optional>
						</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     파일을 읽어서 일반출력으로 내보냅니다.
    </para>
			<para>
     파일에서 읽은 바이트수를 반환합니다. 에러가 발생하면
     false를 반환하고 함수가 @readfile로 반환되지 않는 한 에러 메시지가 프린트 됩니다
    </para>
			<para>
				<parameter>filename</parameter>이 "http://"로 시작이 되면 (자동반응이 아닌 경우에), HTTP 1.0 은 지정된 서버로 연결이 됩니다. 응답된 텍스트는 표준 출력으로 쓰여집니다.
    </para>
			<para>
     디렉토리에 슬래쉬를 포함시켜서 HTTP가 리다이렉트 되지 않도록 하세요.
    </para>
			<para>
				<parameter>filename</parameter>이 "ftp://"로 시작이 되면 (자동반응이 아닌 경우에), ftp는 지정된 서버로 연결이 되고 요청된 파일은 표준 출력으로 쓰여집니다. 서버가 Passive 모드를 지원하지 않으면 이것은 실행될 수 없습니다.
    </para>
			<para>
				<parameter>filename</parameter>이 이와 같은 문자열로 시작이 되지 않는다면 파일이 파일 시스템에서 열리고 내용은 표준 출력으로 쓰여집니다.
    </para>
			<para>
				<link linkend="ini.include-path">include_path</link>에서 파일을 찾고 싶으면 두번째 매개변수를 "1"로 설정할 수 도 있습니다.
    </para>
			<para>
     참조<function>fpassthru</function>,
     <function>file</function>, <function>fopen</function>,
     <function>include</function>, <function>require</function>, <function>virtual</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.readlink">
		<refnamediv>
			<refname>readlink</refname>
			<refpurpose>symbolic link의 target 반환</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>string <function>readlink</function>
					</funcdef>
					<paramdef>string <parameter>path</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
				<function>readlink</function>는 C에서의 readlink 함수와 같은 일을 수행합니다. symbolic link의 경로를 반환하거나 실패시 0 을 반환합니다.
    </para>
			<para>
     참조<function>symlink</function>,
     <function>readlink</function> 그리고<function>linkinfo</function>.
    </para>
			<note>
				<simpara>
     윈도우즈에서 동작하지 않습니다.</simpara>
			</note>
		</refsect1>
	</refentry>
	<refentry id="function.rename">
		<refnamediv>
			<refname>rename</refname>
			<refpurpose>파일을 새 이름으로 고치기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>rename</function>
					</funcdef>
					<paramdef>string <parameter>oldname</parameter>
					</paramdef>
					<paramdef>string <parameter>newname</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
				<parameter>oldname</parameter>을 <parameter>newname</parameter>으로 다시 이름 붙이고자 할 때.
    </para>
			<para> 
     성공하면 true, 실패하면 false를 반환합니다.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.rewind">
		<refnamediv>
			<refname>rewind</refname>
			<refpurpose>파일포인터의 위치를 되돌립니다(rewind).</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>rewind</function>
					</funcdef>
					<paramdef>int <parameter>fp</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>    
     fp의 파일 위치 측정자를 파일 스트림의 시작부분에 위치하도록 설정합니다.</para>
			<para>에러가 발생하면 0을 반환합니다.</para>
			<para>파일 포인터는 유효한 것이어야 하고 <function>fopen</function>에 의해 성공적으로 열려진 파일을 가리켜야 합니다.
    </para>
			<para>
     참조<function>fseek</function>그리고<function>ftell</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.rmdir">
		<refnamediv>
			<refname>rmdir</refname>
			<refpurpose>디렉토리 제거하기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>rmdir</function>
					</funcdef>
					<paramdef>string <parameter>dirname</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para> 
     pathname에 의해 이름이 붙은 디렉토리를 제거하려고 할때 디렉토리는 비어 있어야 하고 관련 퍼미션은 이것이 실행될 수 있도록 허가 되어 있어야 합니다 .
    </para>
			<para> 
     에러가 발생하면 0을 반환합니다.
    </para>
			<para>
     참조: <function>mkdir</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.stat">
		<refnamediv>
			<refname>stat</refname>
			<refpurpose>file에 대한 정보 제공</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>array <function>stat</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     filename에 의해 이름이 붙은 파일에 대한 통계자료 모으기.</para>
			<para>
     다음의 요소대로 파일에 대한 통계를 배열로 반환합니다.:
     <orderedlist>
					<listitem>
						<simpara>장치(device)</simpara>
					</listitem>
					<listitem>
						<simpara>아이노드(inode)</simpara>
					</listitem>
					<listitem>
						<simpara>아이노드 보호 모드(inode protection mode)</simpara>
					</listitem>
					<listitem>
						<simpara>링크의 갯수</simpara>
					</listitem>
					<listitem>
						<simpara>소유자의 사용자 아이디</simpara>
					</listitem>
					<listitem>
						<simpara>소유자의 그룹 아이디</simpara>
					</listitem>
					<listitem>
						<simpara>아이노드 장치(inode device)이면 장치 타입(device type) *</simpara>
					</listitem>
					<listitem>
						<simpara>바이트 단위 크기</simpara>
					</listitem>
					<listitem>
						<simpara>최종 접속 시간</simpara>
					</listitem>
					<listitem>
						<simpara>최종 수정 시간</simpara>
					</listitem>
					<listitem>
						<simpara>최종 변경 시간</simpara>
					</listitem>
					<listitem>
						<simpara>파일시스템 입출력(filesystem I/O)시의 블록크기 *</simpara>
					</listitem>
					<listitem>
						<simpara>할당된 블록의 수</simpara>
					</listitem>
				</orderedlist>
     * - st_blksize type을 지원하는 시스템에만 유효합니다--다른 시스템 (예를 들어 윈도우즈 같은)에서는 -1 을 반환합니다</para>
			<para>
     이 함수의 실행결과는 캐시가 됩니다. 좀 더 자세한 내용을 알고 싶다면 <function>clearstatcache</function>을 보십시오. 
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.lstat">
		<refnamediv>
			<refname>lstat</refname>
			<refpurpose>
     파일이나 심볼릭 링크에 관한 정보를 제공 </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>array <function>lstat</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     Gathers the statistics of the file or symbolic link named by
     filename에 의해 이름이 붙은 파일이나 심볼릭 링크에 관한 통계자료를 모읍니다. 이 함수는 <parameter>filename</parameter>매개변수가 심볼릭 링크면 심볼릭 링크가 가리키는 파일의 상태가 아니라 심볼릭 링크의 상태가 반환되는 것을 제외하면 <function>stat</function>함수와 같습니다.
    </para>
			<para>
     파일의 통계자료가 아래와 같은 요소들로 배열로 반환됩니다:
     <orderedlist>
					<listitem>
						<simpara>장치(device)</simpara>
					</listitem>
					<listitem>
						<simpara>아이노드(inode)</simpara>
					</listitem>
					<listitem>
						<simpara>아이노드 보호 모드(inode protection mode)</simpara>
					</listitem>
					<listitem>
						<simpara>링크의 갯수</simpara>
					</listitem>
					<listitem>
						<simpara>소유자의 사용자 아이디</simpara>
					</listitem>
					<listitem>
						<simpara>소유자의 그룹 아이디</simpara>
					</listitem>
					<listitem>
						<simpara>아이노드 장치(inode device)라면 장치의 타입(device type) *</simpara>
					</listitem>
					<listitem>
						<simpara>바이트단위의 크기</simpara>
					</listitem>
					<listitem>
						<simpara>최종 접속 시간</simpara>
					</listitem>
					<listitem>
						<simpara>최종 수정 시간</simpara>
					</listitem>
					<listitem>
						<simpara>최종 변경 시간</simpara>
					</listitem>
					<listitem>
						<simpara>파일시스템 입출력(filesystem I/O)시의 블록 크기 *</simpara>
					</listitem>
					<listitem>
						<simpara>할당된 블록의 수</simpara>
					</listitem>
				</orderedlist>
     * - st_blksize type을 지원하는 시스템에만 유효합니다 -- 다른 시스템들(예를 들어 윈도우즈 같은) 시스템에서는 -1 을 반환합니다.</para>
			<para>
     이 함수의 실행결과는 캐시가 됩니다. 좀 더 자세한 내용을 알고 싶다면 <function>clearstatcache</function>을 보십시오.    </para>
		</refsect1>
	</refentry>
	<refentry id="function.realpath">
		<refnamediv>
			<refname>realpath</refname>
			<refpurpose>표준화된 절대 경로명을 반환합니다</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>string <function>realpath</function>
					</funcdef>
					<paramdef>string <parameter>path</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
				<function>realpath</function>는 <parameter>path</parameter>로 입력된 경로에서 모든 심볼릭 링크와 '/./', '/../'로 참조된 경로 그리고 그 외의 '/' 을 확장해서 표준화된 절대 경로명을 반환합니다. 이렇게 해서 나온 경로명은 심볼릭 일크와  '/./' 또는 '/../' 등을 포함하고 있지 않습니다. </para>
			<para>
				<example>
					<title>
						<function>realpath</function>예문</title>
					<programlisting role="php">
$real_path = realpath ("../../index.php");
      </programlisting>
				</example>
			</para>
		</refsect1>
	</refentry>
	<refentry id="function.symlink">
		<refnamediv>
			<refname>symlink</refname>
			<refpurpose>심볼릭 링크 만들기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>symlink</function>
					</funcdef>
					<paramdef>string <parameter>target</parameter>
					</paramdef>
					<paramdef>string <parameter>link</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
				<function>symlink</function>는 특정한 이름의  <parameter>link</parameter>로 있는 <parameter>target</parameter>에서 심볼릭 링크를 만듭니다.
    </para>
			<para>
     참조 하드링크를 만드는<function>link</function>,
     그리고 <function>linkinfo</function>와 같이 있는<function>readlink</function>.
    </para>
			<note>
				<simpara>
      이 함수는 윈도우즈에서는 동작하지 않습니다.     </simpara>
			</note>
		</refsect1>
	</refentry>
	<refentry id="function.tempnam">
		<refnamediv>
			<refname>tempnam</refname>
			<refpurpose>유일한 파일 이름 만들기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>string <function>tempnam</function>
					</funcdef>
					<paramdef>string <parameter>dir</parameter>
					</paramdef>
					<paramdef>string <parameter>prefix</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     특정 디렉토리에서 유일한 임시 파일이름을 만듭니다.
     디렉토리가 존재하지 않으면 <function>tempnam</function>은 시스템의 임시 디렉토리안에 파일 이름을 만듭니다.
    </para>
			<para>
				<function>tempnam</function>함수의 하는 일은 시스템 의존적입니다. 윈도우즈에서 TMP 환경변수는 <parameter>dir</parameter>매개변수를 뛰어넘고, 리눅스에서 
     TMPDIR 환경변수가 존재하고 있는 것을 가리키고 있다면 SVR4가  항상 <parameter>dir</parameter> 매개변수를 사용하려고 하는 동안에 앞서서 TMPDIR 환경변수가 실행됩니다. 미심쩍은 부분이 있다면 tempnam(3) 함수부분의 시스템 문서를  참고 하십시오.
    </para>
			<para>
     새로운 임시 파일이름이나 널 문자열을 반환합니다.
     <example>
					<title>
						<function>tempnam</function>예문</title>
					<programlisting role="php">
$tmpfname = tempnam ("/tmp", "FOO");
      </programlisting>
				</example>
			</para>
			<note>
				<simpara>
      이 함수는 4.0.3에서 동작이 변경되었습닏. 임시 파일은 문자열이 만들어지고 그 문자열이 파일을 생성하려고 하는 중간에 파일이 파일 시스템에 보여져야 하는 위치에서 진행상태를 나타내지 않습니다.
     </simpara>
			</note>
			<para>
     참조 <function>tmpfile</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.tmpfile">
		<refnamediv>
			<refname>tmpfile</refname>
			<refpurpose>임시 파일 만들기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>tmpfile</function>
					</funcdef>
					<paramdef>void</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     Creates a temporary file with an unique name in write mode,
     returning a file handle similar to the one returned by
     <function>fopen</function>에 의해 반환된것과 비슷한 파일핸들을 반환하며 쓰기모드에서 유일한 임시파일을 생성합니다.
     이 파일은 스크립트가 종료되거나 닫혔을때 (<function>fclose</function>을 사용합니다) 자동으로 제거됩니다.
    </para>
			<para>
     자세히 알아보려면 <filename>stdio.h</filename> 헤더파일 같은 <literal>tmpfile(3)</literal>함수의 시스템 문서를 살펴 보십시오
    </para>
			<para>
     참조 <function>tempnam</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.touch">
		<refnamediv>
			<refname>touch</refname>
			<refpurpose>파일의 수정시간을 설정합니다</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>touch</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
					<paramdef>int 
        <parameter>
							<optional>time</optional>
						</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     filename 에 의해 이름붙여진 file의 수정시간을 주어진 시간으로 설정하려고 할때 사용합니다. 시간을 옵션으로 설정하지 않으면 현재 시간을 사용합니다.
    </para>
			<para>
     파일이 존재하지 않으면 파일을 만듭니다.
    </para>
			<para>
     성공하면 true 를 반환하고 그렇지 않으면 false를 반환합니다.
     <example>
					<title>
						<function>touch</function>예문</title>
					<programlisting role="php">
if (touch ($FileName)) {
    print "$FileName 은 오늘 날짜와 시간으로 변경되었습니다.";
} else {
    print "죄송합니다. $FileName의 수정시간을 바꾸지 못했습니다.";
}
      </programlisting>
				</example>
			</para>
		</refsect1>
	</refentry>
	<refentry id="function.umask">
		<refnamediv>
			<refname>umask</refname>
			<refpurpose>현재의 umask를 변경하기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>umask</function>
					</funcdef>
					<paramdef>int <parameter>mask</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
				<function>umask</function>는 PHP의 umask를 mask &amp; 0777로 바꾸고 이전의 umask를 반환합니다. PHP가 서버 모듈로 사용될 때 umask는 매 요청(request)가 끝날때 마다 저장이 됩니다.
    </para>
			<para>
				인수가 없는 <function>umask</function>는 단순히 현재의 umask를 반환합니다.
    </para>
			<note>
				<simpara>
      이 함수는 윈도우즈에서는 동작하지 않습니다.
     </simpara>
			</note>
		</refsect1>
	</refentry>
	<refentry id="function.unlink">
		<refnamediv>
			<refname>unlink</refname>
			<refpurpose>파일을 삭제하기</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>unlink</function>
					</funcdef>
					<paramdef>string <parameter>filename</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
				<parameter>filename</parameter>을 삭제합니다. Unix C의 unlink() 함수와 비슷합니다.
    </para>
			<para>
     0 이나 FALSE를 반환합니다.
    </para>
			<para>
     참조 디렉토리를 제거하는데 <function>rmdir</function>
			</para>
			<note>
				<simpara>
      이 함수는 윈도우즈에서는 동작하지 않습니다.
     </simpara>
			</note>
		</refsect1>
	</refentry>
</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
