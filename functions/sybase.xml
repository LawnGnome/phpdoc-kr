<reference id="ref.sybase">
	<title>Sybase functions</title>
	<titleabbrev>Sybase</titleabbrev>
	<refentry id="function.sybase-affected-rows">
		<refnamediv>
			<refname>sybase_affected_rows</refname>
			<refpurpose>가장 최근 쿼리에 의해 적용된 데이타 수를 구한다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>sybase_affected_rows</function>
					</funcdef>
					<paramdef>int <parameter>
							<optional>link_identifier</optional>
						</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
    가장 최근 쿼리에서 적용된 데이타(줄)수를 반환합니다.
    </para>
			<para>
				<function>sybase_affected_rows</function> 함수는  link_identifier에 정의된 특정 링크로 서버에 
   접속된 'INSERT, UPDATE or DELETE'  쿼리에 영향을 받은 데이타의 수를 반환합니다.
   만약 link identifier가 정의되지 않으면 가장 최근에 열린 링크로 가정한다.
    </para>
			<para>
     이 명령은 'SELECT' 구문에는 영향을 받지 않는다. 단지 데이타를 수정하는 구문에만 영향을 받는다.
    'SELECT' 구문에 적용된 데이타수를 알려면 <function>sybase_num_rows</function>함수를 사용한면 된다.
    <note>
					<para>
      이 함수는 DB 라이브러리 인터페이스가 아닌 CT라이브러리 인터페이스에서만 사용이 가능하다.
      </para>
				</note>
			</para>
		</refsect1>
	</refentry>
	<refentry id="function.sybase-close">
		<refnamediv>
			<refname>sybase_close</refname>
			<refpurpose> Sybase서버로의  연결을 종료한다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>bool <function>sybase_close</function>
					</funcdef>
					<paramdef>int <parameter>link_identifier</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
   연결에 성공하면 'true'를 실패하면 'error'를 반환한다.
    </para>
			<para> 
   sybase_close() 는 link identifier에 의해 생성된 Sybase database에의 접속을 종료한다.
   만약 link identifier가 정의되어 있지 않다면,  마지막으로 연결된 링크로 가정한다.
    </para>
			<para> Note that this isn't usually necessary, as non-persistent
    open links are automatically closed at the end of the script's
    execution.

   주의해야 할 점은 스크립트 종료시 링크가 Persistent link가 아닌 경우에는 링크가 자동으로 
  종료된다는  점이다.
    </para>
			<para> 
    sybase_close() 함수는 sybase_pconnect()함수에 의해 생성된 Persistent link는 종료시키지 않는다.
    </para>
			<para> See also: <function>sybase_connect</function>,
                     <function>sybase_pconnect</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.sybase-connect">
		<refnamediv>
			<refname>sybase_connect</refname>
			<refpurpose> Sybase server로 연결한다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>sybase_connect</function>
					</funcdef>
					<paramdef>string <parameter>servername</parameter>
					</paramdef>
					<paramdef>string <parameter>username</parameter>
					</paramdef>
					<paramdef>string <parameter>password</parameter>
					</paramdef>
					<paramdef>string <parameter>
							<optional>charset</optional>
						</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para> 
   수행이 성공적으로 이루어지면 양수의 Sybase link identifier(식별자)가 반환되며, 에러가 발생하면 false가 반환된다.
    </para>
			<para>
   sybase_connect() 함수는 Sybase 서버로 연결하는 함수이다.
   "servername" 인자는 'interface'파일에 의해 정의된 실제 servername이여야  한다.
    </para>
			<para> 
   만약 sybase_connect()함수가 같은 인자를 가지고 두번 호출된다면,  새로운 연결이 생성되는 대신에 먼저 열렸던 link identifier(식별자)가 반환된다.
    </para>
			<para>     
   스크립트의 실행이 끝나자 마자  서버로의 링크는 끝나게 된다. 
  그렇지 않다면 <function>sybase_close</function>함수에 의해 이전에 종료된 것이다.
    </para>
			<para>See also <function>sybase_pconnect</function>, 
                   <function>sybase_close</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.sybase-data-seek">
		<refnamediv>
			<refname>sybase_data_seek</refname>
			<refpurpose>move internal row pointer  내부 결과 데이타셋내의  위치 포인터를 이동한다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>bool <function>sybase_data_seek</function>
					</funcdef>
					<paramdef>int <parameter>result_identifier</parameter>
					</paramdef>
					<paramdef>int <parameter>row_number</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para> 			
			수행 성공시 'true', 실패시 'false'를 반환한다.
    </para>
			<para> 
   sybase_data_seek() 함수는 <parameter>result_identifire</parameter>에 의해 정의된 결과 데이타셋의 위치 포인터를
   <parameter>row_number</parameter> 의 위치로 이동한다.
    이후, <function>sybase_fetch_row</function>함수가 호출되면 이동한 위치의 데이타를 읽어올수 있다.
    </para>
			<para> See also: <function>sybase_data_seek</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.sybase-fetch-array">
		<refnamediv>
			<refname>sybase_fetch_array</refname>
			<refpurpose>데이타를 배열로서 가져온다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>array <function>sybase_fetch_array</function>
					</funcdef>
					<paramdef>int <parameter>result</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para> 
     결과값으로는 추출된 데이타가 배열로 반환되며, 추출된 데이타가 없을 경우에는
    'false'이 반환된다.
    </para>
			<para>
    sybase_fetch_array()함수는 <function>sybase_fetch_row</function>의 확장버젼이다.
    게다가 이 함수는 결과 배열의 숫자인덱스뿐만 아니라 필드 값을 배열의 인덱스로 가진 배열을 반환하다.
    </para>
			<para>
     비록 sybase_fetch_array() 함수가 특정 값(필드값을 인덱스로 가짐)을 추가되었다 하더라고 sybase_fetch_row()함수에 비해
     눈에 띌만큼 느리진 않다.
</para>
			<para>
     For further details, also see
     <function>sybase_fetch_row</function>
			</para>
		</refsect1>
	</refentry>
	<refentry id="function.sybase-fetch-field">
		<refnamediv>
			<refname>sybase_fetch_field</refname>
			<refpurpose>데이타 셋의 필드 정보를 얻는다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>object <function>sybase_fetch_field</function>
					</funcdef>
					<paramdef>int <parameter>result</parameter>
					</paramdef>
					<paramdef>int 
       <parameter>
							<optional>field_offset</optional>
						</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
    field 값에 대한 정보를 가진 객체를 반환한다.
    </para>
			<para>
     sybase_fetch_field() 함수는 특정 쿼리 결과값에서 필드에 정보를 얻는데 사용되어 진다.
	만약 field_offet값이 정해지지 않으면 이전 sybase_fetch_field()함수에 의해 얻어진 필드의 다음 필드가 반환된다.
    </para>
			<para>
     정보 객체의 내부 속성값들은 다음과 같다.
    </para>
			<itemizedlist>
				<listitem>
					<simpara>
	name - 이름 컬럼이다, 만약 컬럼이 함수의 결과값이면 이 속성은 계산된 #N값이고 이 #N은 serial number 이다.
       </simpara>
				</listitem>
				<listitem>
					<simpara>
	column_source  - 컬럼 값을 가져온 대상 table	
       </simpara>
				</listitem>
				<listitem>
					<simpara>
	max_length -  컬럼의 최대길이
       </simpara>
				</listitem>
				<listitem>
					<simpara>
	numeric - 만약 컬럼이 숫자값이면 1을 가진다.
       </simpara>
				</listitem>
				<listitem>
					<simpara>
      type  -  컬럼의 datatype
      </simpara>
				</listitem>
			</itemizedlist>
			<para>
     See also <function>sybase_field_seek</function>
			</para>
		</refsect1>
	</refentry>
	<refentry id="function.sybase-fetch-object">
		<refnamediv>
			<refname>sybase_fetch_object</refname>
			<refpurpose>객체타입으로 데이타를 추출한다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>sybase_fetch_object</function>
					</funcdef>
					<paramdef>int <parameter>result</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para> 
     성공적으로 수행되면 추출된 행에 관한 속성을 가진 객체를 반환하고, 추출된 행이 없으면 false를 반환한다.
    </para>
			<para> 
    sybase_fetch_object() 함수는 배열 대신에 객체를 반환한다는 점 한가지 차이점을 빼놓고는 <function>sybase_fetch_array</function>와 비슷하다.
    달리 말해, 데이타에 접근하려면 반드시 필드 이름을 사용해야 하면 offset을 사용할 수 없다는 것이다.(속성이름으로서 숫자값은 사용되어 질수 없다.)
</para>
			<para>
    얼핏 보면    <function>sybase_fetch_array</function> 와  비슷하게 빠른<function>sybase_fetch_row</function> (차이점이 경미하다.)
    </para>
			<para> See also: <function>sybase_fetch-array</function> and
                     <function>sybase_fetch-row</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.sybase-fetch-row">
		<refnamediv>
			<refname>sybase_fetch_row</refname>
			<refpurpose>배열로 데이타를 추출한다.(인덱스는 숫자 타입이다.)</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>array <function>sybase_fetch_row</function>
					</funcdef>
					<paramdef>int <parameter>result</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>   
    성공적으로 수행되면 추출된 데이타의 배열이 반환되고, 추출된 데이타가 없다면 'false'가 반환된다.
    </para>
			<para>
     sybase_fetch_row()는 특정 result identifier에 의한 결과에서 한 데이타 열를 추출한다. 
     그 데이타 열은 배열로 반환된다. 각 결과 컬럼은 0으로 시작하는 배열 인덱스값을 가진다.
    </para>
			<para>
     두번째 이상으로 호출되는 sybase_fetch_rows()의 결과값은 결과값 셋에서 다음 행의 결과값이 반환되고, 더이상의 결과행이 없으면 false를 반환한다.
    </para>
			<para>
     See also: <function>sybase_fetch_array</function>,
               <function>sybase_fetch_object</function>,
               <function>sybase_data_seek</function>,
               <function>sybase_fetch_lengths</function>, and
               <function>sybase_result</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.sybase-field-seek">
		<refnamediv>
			<refname>sybase_field_seek</refname>
			<refpurpose>필드 offset(위치값)을 정한다.(이동한다.)</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>sybase_field_seek</function>
					</funcdef>
					<paramdef>int <parameter>result</parameter>
					</paramdef>
					<paramdef>int <parameter>field_offset</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     Seeks to the specified field offset.  If the next call to
     <function>sybase_fetch_field</function> won't include a field
     offset, this field would be returned.
      특정 위치의 필드값을 찾는다. 만약, 이후에 <function>sybase_fetch_field</function>함수가 다시 불려졌을 때의 
    반환 필드 offset을 가지지 못한다면, 이전에 추출된 필드값이 반환될 것이다.
    </para>
			<para/>
			<para>
     See also: <function>sybase_fetch_field</function>.</para>
		</refsect1>
	</refentry>
	<refentry id="function.sybase-free-result">
		<refnamediv>
			<refname>sybase_free_result</refname>
			<refpurpose>추출된 데이타가 저장된 메모리를 해제한다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>bool <function>sybase_free_result</function>
					</funcdef>
					<paramdef>int <parameter>result</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     <function>sybase_free_result</function>함수는 스크립트가 작동하는 동안에 너무 많은 메모리가 사용될 것이 걱정될 경우에만 사용되어진다.
     스크립트가 끝날 경우에는 모든 결과값이 저잗되었던 메모리는 해제되기는 하지만,
     인수로서 result identifier를 가진 함수 <function>sybase_free_result</function>는 result identifier에 연관된 메모리를 해제 할 것이다.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.sybase-get-last-message">
		<refnamediv>
			<refname>sybase_get_last_message</refname>
			<refpurpose>서버로부터온 최종 메세지를 반환한다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>string <function>sybase_get_last_message</function>
					</funcdef>
					<paramdef>void <parameter/>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
    <function>sybase_get_last_message</function> 함수는 서버로부터 최종적으로 보고된 메세지를 반환한다.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.sybase-min-client-severity">
		<refnamediv>
			<refname>sybase_min_client_severity</refname>
			<refpurpose>클라이언트의 최소 가혹 레벨을 정한다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>void <function>sybase_min_client_severity</function>
					</funcdef>
					<paramdef>int <parameter>severity</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
      <function>sybase_min_client_severity</function>함수는 최저 클라이언트 가혹 레벨을 정한다.
     <note>
					<para>
      이 함수는 CT library interface 모드에서만 사용가능하고, DB library 모드에서는 사용할 수 없다.
      </para>
				</note>
			</para>
			<para> 
      See also: <function>sybase_min_server_severity</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.sybase-min-error-severity">
		<refnamediv>
			<refname>sybase_min_error_severity</refname>
			<refpurpose>최저 가혹 에러 레벨을 정한다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>void <function>sybase_min_error_severity</function>
					</funcdef>
					<paramdef>int <parameter>severity</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
    <function>sybase_min_error_severity</function>함수는 최저 에러 가혹 레벨을 정한다.
    </para>
			<para> 
      See also: <function>sybase_min_message_severity</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.sybase-min-message-severity">
		<refnamediv>
			<refname>sybase_min_message_severity</refname>
			<refpurpose>최저 메시지 가혹 레벨을 정한다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>void <function>sybase_min_message_severity</function>
					</funcdef>
					<paramdef>int <parameter>severity</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
				<function>sybase_min_message_severity</function>함수는 최저 메시지 가혹 레벨을 정한다.
    </para>
			<para> 
      See also: <function>sybase_min_error_severity</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.sybase-min-server-severity">
		<refnamediv>
			<refname>sybase_min_server_severity</refname>
			<refpurpose>최저 서버 가혹 레베을 정한다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>void <function>sybase_min_server_severity</function>
					</funcdef>
					<paramdef>int <parameter>severity</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
				<function>sybase_min_server_severity</function> 함수는 최저 서버 가혹 레벨을 정한다.
     <note>
					<para>
      이 함수는 단지 CT library interface 모드에서만 사용이 가능하고 DB library interface 모드에서는 사용할 수  없다.
      </para>
				</note>
			</para>
			<para> 
      See also: <function>sybase_min_client_severity</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.sybase-num-fields">
		<refnamediv>
			<refname>sybase_num_fields</refname>
			<refpurpose>결과 데이타셋에서 필드수를 구한다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>sybase_num_fields</function>
					</funcdef>
					<paramdef>int <parameter>result</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
	sybase_num_fields()함수는 결과 셋에서 필드 수를 구해 반환한다.
    </para>
			<para> 
     See also:  
     <function>sybase_db_query</function>, 
     <function>sybase_query</function>, 
     <function>sybase_fetch_field</function>, 
     <function>sybase_num_rows</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.sybase-num-rows">
		<refnamediv>
			<refname>sybase_num_rows</refname>
			<refpurpose>결과값의 데이타(열)수를 구한다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>sybase_num_rows</function>
					</funcdef>
					<paramdef>int <parameter>result</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
     sybase_num_rows()함수는 결과셋의 데이타(열)수를 반환한다.
    </para>
			<para>
     See also:  
     <function>sybase_db_query</function>, 
     <function>sybase_query</function> and, 
     <function>sybase_fetch_row</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.sybase-pconnect">
		<refnamediv>
			<refname>sybase_pconnect</refname>
			<refpurpose>Sybase 서버로의 영속적인(persistent) 연결을 만든다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>sybase_pconnect</function>
					</funcdef>
					<paramdef>string <parameter>servername</parameter>
					</paramdef>
					<paramdef>string <parameter>username</parameter>
					</paramdef>
					<paramdef>string <parameter>password</parameter>
					</paramdef>
					<paramdef>string <parameter>
							<optional>charset</optional>
						</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para> 
	성공적으로 수행시 양수의 Sybase persistent link identifier(사이베이스 영속 연결 식별자)를 반환하고, 에러가 났을경우 false를 반환한다.
			</para>
			<para>
	sybase_pconnect()함수는 두가지 다른점을 제외하고는 <function>sybase_connect</function>함수와 거의 같다.
		</para>
			<para> 
     첫째로 접속시 함수는  같은 host,username,password를 가진 열려있는 영속(persistent) 링크를 찾는다.
     만약 발견되면 새로 연결하지 않고 발견된 연결의 identifier(식별자)가 반환된다.
	</para>
			<para> 
    두번째는 SQL 서버로의 연결이 스크립트가 끝났음에도 종료가 되지 않는다는 점이다.
    대신에 그 연결은 나중에 사용된다.
   (<function>sybase_pconnect</function>함수에 의해 생성된 연결은 <function>sybase_close</function>함수에 의해 종료되지 않는다.)
    </para>
			<para> 
    그러므로 이러한 종류의 링크를 'persistent(영속적인)'이라고 표현한다.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.sybase-query">
		<refnamediv>
			<refname>sybase_query</refname>
			<refpurpose>Sybase서버에 query(쿼리)를 보낸다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>int <function>sybase_query</function>
					</funcdef>
					<paramdef>string <parameter>query</parameter>
					</paramdef>
					<paramdef>int <parameter>link_identifier</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
   성공적으로 수행되면 양수의 Sybase result identifier(사이베이스 결과 식별자)가 반환되고, 에러가 발생하면 false가 반환된다.
    </para>
			<para>     
    sybase_query()함수는 link_identifier 인수에 의해 정의된 연결로 현재 활동중인  서버의 database에 query(쿼리)를 보낸다. 
    만약 link identifier(연결 식별자)가 정의되어 있지 않다면 최근에 마지막으로 열린 링크로 가정한다. 
    만약 열려 있는 링크가 없다면 <function>sybase_connect</function>함수가 호출된 것처럼 링크를 만들어 사용한다.
    </para>
			<para>
     See also:  
     <function>sybase_db_query</function>, 
     <function>sybase_select_db</function>, and 
     <function>sybase_connect</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.sybase-result">
		<refnamediv>
			<refname>sybase_result</refname>
			<refpurpose>결과 데이타를 추출한다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>string <function>sybase_result</function>
					</funcdef>
					<paramdef>int <parameter>result</parameter>
					</paramdef>
					<paramdef>int <parameter>row</parameter>
					</paramdef>
					<paramdef>mixed <parameter>field</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>     
    result 인수에 의한 특정 결과 셋에서 row 와 field 인수의 의해 정해진 특정한 하나의 셀의 내용을 반환한다.
    </para>
			<para>
     sybase_result() 함수는 Sybase 결과 셋에서 한셀의 내용을 반환한다.
     field 인수는 필드의 offset(위치값) 또는 필드의 이름이거나, 필드의 테이블 점 필드의 이름의 형태(tablename.fieldname) 이다.
     만약 컬럼 이름이 alias된다면 ('select foo as bar from...')형식으로 컬럼 이름 대신에 alias된 이름을 사용한다.
    </para>
			<para>
     결과 셋의 크기가 클 경우, 한번 의 호출로 대용량의 데이타를 추출할수 있는 함수들을 사용하는 것을 고려해 보는
것이 좋을 것이다.  그 함수들은 sybase_result()합수보다 많이 빠르다.  또한  field 인수로 필드 이름이나 테이블이름.필드이름의 형태를 사용하는 것보다
숫자 offset(위치)값을 사용하는 것이 속도가 더 빠르다.
    </para>
			<para>
     한꺼번에 대용량의 데이타를 추출할경우 다음의 함수를 추천한다.:
     <function>sybase_fetch_row</function>, 
     <function>sybase_fetch_array</function>,
     <function>sybase_fetch_object</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.sybase-select-db">
		<refnamediv>
			<refname>sybase_select_db</refname>
			<refpurpose>사용할 database를 선택한다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
			<funcsynopsis>
				<funcprototype>
					<funcdef>bool <function>sybase_select_db</function>
					</funcdef>
					<paramdef>string <parameter>database_name</parameter>
					</paramdef>
					<paramdef>int <parameter>link_identifier</parameter>
					</paramdef>
				</funcprototype>
			</funcsynopsis>
			<para>
			성공적으로 수행시 true를 반환하고, 에러 발생시 false를 반환한다.
    </para>
			<para> 
   sybase_select_db함수는 link identifier함수에 의해 연결된 서버상의 (활성화된) 데이타베이스를 선택한다.
   만약 link identifier인수가 없다면, <function>sybase_connect</function>함수에 의해 호출된 것 과 같이 link를 생성하여 사용한다.
    </para>
			<para>
    계속 이어져 호출되는 <function>sybase_query</function>함수는 이전에 선택된 데이타베이스상에서 실행될 것이다.
    </para>
			<para> See also:
     <function>sybase_connect</function>, 
     <function>sybase_pconnect</function>, and
     <function>sybase_query</function>
			</para>
		</refsect1>
	</refentry>
</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
