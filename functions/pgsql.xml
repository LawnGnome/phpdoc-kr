<?xml version="1.0" encoding="utf-8"?>
<reference id="ref.pgsql">
	<title>PostgreSQL functions</title>
	<titleabbrev>PostgreSQL</titleabbrev>
	<partintro>
		<para>
	Postgres는 본래 버클리대학의 컴퓨터 사이언스 학부에서 학술적인 목적으로 
	개발되었던 데이터베이스로, 현재 몇몇 상용 데이터베이스들이 채용하고 있는 
	객체관계 개념을 실험적으로 적용시켜왔다. Postgres는 SQL92/SQL3언어, 
	트랜잭션간의 무결성 및 기타 확장가능한 형식을 지원한다. PostgreSQL은 
	이같은 버클리대학의 코드를 근간으로 개발되고 있는 오픈소스의 성과물이다. 
   </para>
		<para>
	PostgreSQL의 배포는 무료이며 최신버전은 
	<ulink url="&url.pgsql;">www.PostgreSQL.org</ulink> 에서 구할 수 있다. 
    </para>
		<para>
	PostgreSQL은 버전 6.3(1998년 3월 2일 발표)부터 유닉스 도메인 소켓
	(unix domain sockets)을 사용한다. 아래의 테이블은 유닉스 도메인 소켓을 
	사용한 새로운 데이타베이스 접속예를 나타내고 있다. 소켓의 경로는 
	<filename>/tmp/.s.PGSQL.5432</filename> 이다. 이 옵션은 
	<command>postmaster</command> 에 -i 플래그를 넣어줌으로써 가능하며 
	그 의미는 "유닉스 도메인 소켓의 요청과 함께 TCP/IP 소켓의 요청도 동시에 
	기다린다"는 뜻이다. 
    <table>
				<title>Postmaster and PHP</title>
				<tgroup cols="3">
					<thead>
						<row>
							<entry>Postmaster</entry>
							<entry>PHP</entry>
							<entry>Status</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>postmaster &amp;</entry>
							<entry>pg_connect("dbname=MyDbName");</entry>
							<entry>OK</entry>
						</row>
						<row>
							<entry>postmaster -i &amp;</entry>
							<entry>pg_connect("dbname=MyDbName");</entry>
							<entry>OK</entry>
						</row>
						<row>
							<entry>postmaster &amp;</entry>
							<entry>pg_connect("host=localhost dbname=MyDbName");</entry>
							<entry>
	 Unable to connect to PostgreSQL server: connectDB() failed:
	 Is the postmaster running and accepting TCP/IP (with -i)
	 connection at 'localhost' on port '5432'? in
	 /path/to/file.php3 on line 20.
	</entry>
						</row>
						<row>
							<entry>postmaster -i &amp;</entry>
							<entry>pg_connect("host=localhost dbname=MyDbName");</entry>
							<entry>OK</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</para>
		<para>
	PHP로 PostgreSQL에 접속하는 코드의 예제는 다음과 같다: 
	<command>$conn = pg_Connect("host=myHost port=myPort tty=myTTY options=myOptions user=myUser password=myPassword dbname=myDB");</command>
		</para>
		<para>
	예전에 사용하던 <command>$conn = pg_connect ("host", "port", "options", "tty", "dbname")</command> 은 추천하지 않는다. 
       </para>
		<para>
	PHP에서 PostgreSQL의 Large Object 기능을 사용하려면 그것을 트랜잭션 블럭안에 포함시켜야 한다. 
	트랜잭션 블럭은 <command>begin</command> 으로 시작해서 <command>commit</command> 
	혹은 <command>end</command>로 끝난다. 만약 트랜잭션이 실패하였다면 그 실패한 트랜잭션은 
	반드시 <command>rollback</command> 혹은 <command>abort</command> 로 끝나야 한다. 
        <example>
				<title>Using Large Objects</title>
				<programlisting role="php">
&lt;?php
    $database = pg_Connect ("dbname=jacarta");
    pg_exec ($database, "begin");
    $oid = pg_locreate ($database);
    echo ("$oid\n");
    $handle = pg_loopen ($database, $oid, "w");
    echo ("$handle\n");
    pg_lowrite ($handle, "gaga");
    pg_loclose ($handle);
    pg_exec ($database, "commit");
?>
     </programlisting>
			</example>
		</para>
	</partintro>
	<refentry id="function.pg-close">
		<refnamediv>
			<refname>pg_close</refname>
			<refpurpose>PostgreSQL과의 접속을 끊는다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>함수 설명</title>
				<methodsynopsis>
					<type>bool</type><methodname>pg_close</methodname>
					<methodparam><type>int</type><parameter>connection</parameter></methodparam>
				</methodsynopsis>
			<para>
	올바른 접속지시자(a valid connection index)가 아니라면 거짓(&false;)를
	돌려주고, 반대의 경우 참(&true;)을 돌려준다. 인수로 주어진 접속지시자에
	해당하는 PostgreSQL로의 접속을 끊는다.
     </para>
			<note>
				<para> 
     영구적이지 않은 접속은 PHP 스크립트의 종료시 자동으로 닫히므로
     대부분의 경우 이 함수를 이용하여 접속을 끊지 않아도 된다.
   </para>
			</note>
			<para>
				<function>pg_close</function> 함수는
     <function>pg_pconnect</function>를 이용한 접속을 끊지 못한다.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-cmdtuples">
		<refnamediv>
			<refname>pg_cmdtuples</refname>
			<refpurpose>데이터베이스 명령어에 영향을 받은 튜플의 갯수를 돌려준다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>함수 설명</title>
				<methodsynopsis>
					<type>int</type><methodname>pg_cmdtuples</methodname>
					<methodparam><type>int</type><parameter>result_id</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_cmdtuples</function> 는 INSERT, UPDATE, DELETE 쿼리에 의해 영향을 
				받은 튜플(tuples 혹은 instances)의 갯수를 돌려준다. 만약 영향을 받은 튜플이 없다면
				0을 돌려준다.
     <example>
					<title>
						<function>pg_cmdtuples</function>
					</title>
					<programlisting role="php">
&lt;?php
$result = pg_exec ($conn, "INSERT INTO publisher VALUES ('Author')");
$cmdtuples = pg_cmdtuples ($result);
echo $cmdtuples . " &lt;- 영향을 받은 튜플입니다.";
?>
      </programlisting>
				</example>
			</para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-connect">
		<refnamediv>
			<refname>pg_connect</refname>
			<refpurpose>PostgreSQL에 접속한다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>함수 설명</title>
				<methodsynopsis>
					<type>int</type><methodname>pg_connect</methodname>
					<methodparam><type>string</type><parameter>conn_string</parameter></methodparam>
				</methodsynopsis>
			<para>
			접속에 성공하면 접속지시자(a connection index)를 돌려주고,
			실패하면 거짓(&false;)을 돌려준다. 이 함수의 목적은 PostgreSQL에
			접속하는 것이다. 인수들은 인용부호안에 표기해야 한다.
      <example>
					<title>Using pg_connect arguments</title>
					<programlisting role="php">
&lt;?php
$dbconn = pg_Connect ("dbname=mary");
// "mary"라는 이름의 데이터베이스에 접속
$dbconn2 = pg_Connect ("host=localhost port=5432 dbname=mary");
// "localhost"의 "5432"포트를 통해 "mary"라는 이름의 데이터베이스에 접속
$dbconn3 = pg_Connect ("user=lamb password=baaaa dbname=mary ");
// 유저명과 패스워드가 지정된 "mary"라는 이름의 데이터베이스에 접속
?>
     </programlisting>
				</example>
     이 함수와 함께 사용 가능한 인수는 <parameter>dbname</parameter>
				<parameter>port</parameter>, <parameter>host</parameter>, 
     <parameter>tty</parameter>, <parameter>options</parameter>,
     <parameter>user</parameter>, 그리고 <parameter>password</parameter>이다.
			</para>
			<para>
	이 함수는 PHP의 다른 PostgreSQL 함수에서 필요로 하는 접속지시자를
	돌려준다. 필요하다면 한번에 여러개의 접속을 만들 수 있다.
        </para>
			<para>
     예전에 사용하던 접속구문
     <command>$conn = pg_connect ("host", "port", "options", "tty",
    "dbname")
     </command>
     은 추천하지 않는다.
    </para>
			<para>
				<function>pg_pconnect</function>도 참고하라.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-dbname">
		<refnamediv>
			<refname>pg_dbname</refname>
			<refpurpose>데이터베이스의 이름을 돌려준다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>함수 설명</title>
				<methodsynopsis>
					<type>string</type><methodname>pg_dbname</methodname>
					<methodparam><type>int</type><parameter>connection</parameter></methodparam>
				</methodsynopsis>
			<para>
			인수로 주어진 접속지시자 (connection index)에 해당하는 데이터베이스
			이름을 돌려준다. 올바른 접속지시자가 아니면 거짓(&false;)을 돌려준다.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-end-copy">
		<refnamediv>
			<refname>pg_end_copy</refname>
			<refpurpose>PostgreSQL 백엔드에 동기화한다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>함수 설명</title>
				<methodsynopsis>
					<type>bool</type><methodname>pg_end_copy</methodname>
					<methodparam choice="opt"><type>resource</type><parameter>
							connection
						</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_end_copy</function> syncs PostgreSQL frontend with
     the backend after doing a copy operation. It must be issued or
     the backend may get "out of sync" with the frontend. Returns
     &true; if successfull, &false; otherwise.
    </para>
			<para>
     For further details and an example, see also
     <function>pg_put_line</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-errormessage">
		<refnamediv>
			<refname>pg_errormessage</refname>
			<refpurpose>데이터베이스의 에러메시지를 가져온다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>함수 설명</title>
				<methodsynopsis>
					<type>string</type><methodname>pg_errormessage</methodname>
					<methodparam><type>int</type><parameter>connection</parameter></methodparam>
				</methodsynopsis>
			<para>
			실행에 성공한 경우 데이터베이스에서 생성된 에러메시지 문자열을
			돌려주며, 실패한 경우 거짓(&false;)을 돌려준다. <function>pg_errormessage</function> 함수는
			PHP가 직접 생성해낸 에러메시지처럼 (그 에러가 발생한 라인번호같은) 자세한 정보는 출력하지
			않지만, (인수로 주어진 접속지시자에 해당하는) 백엔드서버에서 생성된 가장 마지막 에러메시지
			문자열을 돌려준다.
       </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-exec">
		<refnamediv>
			<refname>pg_exec</refname>
			<refpurpose>쿼리를 실행한다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>함수 설명</title>
				<methodsynopsis>
					<type>int</type><methodname>pg_exec</methodname>
					<methodparam><type>int</type><parameter>connection</parameter></methodparam>
					<methodparam><type>string</type><parameter>query</parameter></methodparam>
				</methodsynopsis>
			<para>
	쿼리가 성공적으로 실행되었을 경우 결과지시자(a result index)를 돌려준다. 
	쿼리의 실행이 실패하였거나 올바르지 않은 접속지시자(not a valid connection index)가
	인수로 주어졌을 경우 거짓(&false;)을 돌려준다. 에러메시지는 <function>pg_errormessage</function> 함수에
	올바른 접속지시자를 인수로 넣어 가져올 수 있다. <function>pg_exec</function> 함수는 인수로 주어진 
	접속지시자에 해당하는 접속을 통해 PostgreSQL에 실행시킬 SQL구문을 전달한다. 이때 쓰이는 접속지시자는
	<function>pg_connect</function> 함수를 통해 돌려보내진 올바른 접속지시자여야 한다. 참고로 
	<function>pg_connect</function> 함수를 통해 생성된 지시자는 PHP에서 제공하는 다른 PostgreSQL 
	관련 함수들의 동작을 위해 사용된다.
          <note>
					<simpara>
		PHP/FI에서는 데이터베이스에 저장된 자료를 가져오지 않는 쿼리(예: insert나 update등)의 결과값으로
		1을, 만족하는 조건이 없는 select 쿼리의 경우 1보다 큰 수를 돌려주었다. 이것은 현재의 PHP에서는
		찾아볼 수 없는 기능이다.
             </simpara>
				</note>
			</para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-fetch-array">
		<refnamediv>
			<refname>pg_fetch_array</refname>
			<refpurpose>데이터베이스의 행을 배열로 가져온다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>함수 설명</title>
				<methodsynopsis>
					<type>array</type><methodname>pg_fetch_array</methodname>
					<methodparam><type>int</type><parameter>result</parameter></methodparam>
					<methodparam><type>int</type><parameter>row</parameter></methodparam>
					<methodparam choice="opt"><type>int</type><parameter>
							result_type
						</parameter></methodparam>
				</methodsynopsis>
			<para> 
			이 함수는 데이터베이스에서 가져온 행을 배열로 돌려주며,
			만약 더이상 가져올 행이 없는 경우 거짓(&false;)을 돌려준다.
       </para>
			<para>
				<function>pg_fetch_array</function> 함수는 <function>pg_fetch_row</function> 함수의
			      확장된 버전으로, 숫자를 인덱스로 하는 배열은 물론이고 각 필드이름을 인덱스로 하는 
			      배열 두가지 형태를 고를 수 있다.
			    </para>
			<para>
			세번째로 정의된 <parameter>result_type</parameter> 인수는 선택적으로 주어질 수 있는 
			상수의 형태로 다음과 같은 값을 취할 수 있다: PGSQL_ASSOC, PGSQL_NUM, 그리고 PGSQL_BOTH.
     <note>
					<para>
						<parameter>Result_type</parameter> 인수는 PHP 4.0 버전부터 추가되었다.
      </para>
				</note>
			</para>
			<para>
			한가지 중요한 사실은 <function>pg_fetch_array</function> 함수에 <function>pg_fetch_row</function> 
			함수보다 요긴하게 사용될 수 있는 기능(siginificant added value)이 추가되었지만 실행속도는 그다지 
			느리지 않다는 것이다.
         </para>
			<para>
				<function>pg_fetch_row</function>도 참고하라.
			</para>
			<example>
				<title>PostgreSQL fetch array</title>
				<programlisting role="php">
&lt;?php 
$conn = pg_pconnect ("dbname=publisher");
if (!$conn) {
    echo "An error occured.\n";
    exit;
}

$result = pg_Exec ($conn, "SELECT * FROM authors");
if (!$result) {
    echo "An error occured.\n";
    exit;
}

$arr = pg_fetch_array ($result, 0);
echo $arr[0] . " &lt;- array\n";

$arr = pg_fetch_array ($result, 1);
echo $arr["author"] . " &lt;- array\n";
?>
     </programlisting>
			</example>
		</refsect1>
	</refentry>
	<refentry id="function.pg-fetch-object">
		<refnamediv>
			<refname>pg_fetch_object</refname>
			<refpurpose>데이터베이스의 행을 오브젝트로 가져온다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>함수 설명</title>
				<methodsynopsis>
					<type>object</type><methodname>pg_fetch_object</methodname>
					<methodparam><type>int</type><parameter>result</parameter></methodparam>
					<methodparam><type>int</type><parameter>row</parameter></methodparam>
					<methodparam choice="opt"><type>int</type><parameter>
							result_type
						</parameter></methodparam>
				</methodsynopsis>
			<para> 
			데이터베이스의 행을 그 행이 가진 프로퍼티와 함께 오브젝트의 형태로 돌려주며,
			더이상 가져올 행이 없을 경우 거짓(&false;)을 돌려준다.
        </para>
			<para>
				<function>pg_fetch_object</function> 함수는 <function>pg_fetch_array</function> 함수와
			   거의 비슷하지만, 중요한 한가지가 다르다 -- 배열을 돌려주는 대신 오브젝트를 돌려준다.
			   간접적인 의미로, 여러분은 그 데이터를 오직 그 필드의 이름으로만 접근(access)할 수 
			   있으며 오프셋(offsets)으로는 접근이 불가능하다. (숫자는 올바른 프로퍼티 이름이 아니다)
			 </para>
			<para>
			세번째로 정의된 <parameter>result_type</parameter> 인수는 선택적으로 주어질 수 있는
			상수의 형태로 다음과 같은 값을 취할 수 있다: PGSQL_ASSOC, PGSQL_NUM, 그리고 PGSQL_BOTH.
     <note>
					<para>
						<parameter>Result_type</parameter> 은 PHP 4.0 버전부터 추가되었다.
      </para>
				</note>
			</para>
			<para>
			함수 실행 속도는 <function>pg_fetch_array</function> 함수와 마찬가지로,
			<function>pg_fetch_row</function> 함수만큼 충분히 빠르다. (그 차이는 미미하다)
     </para>
			<para>
				<function>pg_fetch_array</function> 와
     <function>pg_fetch_row</function> 도 참고하라.
     <example>
					<title>Postgres fetch object</title>
					<programlisting role="php">
&lt;?php 
$database = "verlag";
$db_conn = pg_connect ("host=localhost port=5432 dbname=$database");
if (!$db_conn): ?>
    &lt;H1>Failed connecting to postgres database &lt;?php echo $database ?>&lt;/H1> &lt;?php
    exit;
endif;

$qu = pg_exec ($db_conn, "SELECT * FROM verlag ORDER BY autor");
$row = 0; // postgres는 다른 데이터베이스들이 필요로 하지 않는 행카운터(row counter)를 필요로 한다

while ($data = pg_fetch_object ($qu, $row)):
    echo $data->autor." (";
    echo $data->jahr ."): ";
    echo $data->titel."&lt;BR>";
    $row++;
endwhile; ?>

&lt;PRE>&lt;?php
$fields[] = Array ("autor", "Author");
$fields[] = Array ("jahr",  "  Year");
$fields[] = Array ("titel", " Title");

$row= 0; // postgres는 다른 데이터베이스들이 필요로 하지 않는 행카운터를 필요로 한다
while ($data = pg_fetch_object ($qu, $row)):
    echo "----------\n";
    reset ($fields);
    while (list (,$item) = each ($fields)):
        echo $item[1].": ".$data->$item[0]."\n";
    endwhile;
    $row++;
endwhile;
echo "----------\n"; ?>
&lt;/PRE> &lt;?php
pg_freeResult ($qu);
pg_close ($db_conn);
?>
      </programlisting>
				</example>
			</para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-fetch-row">
		<refnamediv>
			<refname>pg_fetch_row</refname>
			<refpurpose>데이터베이스의 행을 숫자를 인덱스로 하는 배열로 가져온다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>함수 설명</title>
				<methodsynopsis>
					<type>array</type><methodname>pg_fetch_row</methodname>
					<methodparam><type>int</type><parameter>result</parameter></methodparam>
					<methodparam><type>int</type><parameter>row</parameter></methodparam>
				</methodsynopsis>
			<para> 
			데이터베이스로부터 가져온 행을 배열형태로 돌려주며, 더이상 가져올 행이 없을 경우 거짓(&false;)을 돌려준다.
      </para>
			<para>
				<function>pg_fetch_row</function> 함수는 인수로 주어진 결과지시자(result identifier)가
			가리키는 쿼리의 결과로부터 데이터베이스의 한 행을 배열 형태로 가져온다. 각 결과컬럼
			은 0으로 시작되는 배열오프셋(array offset)에 저장된다.
		    </para>
			<para>
				<function>pg_fetch_array</function>,
     <function>pg_fetch_object</function>,
     <function>pg_result</function> 도 참고하라.
     <example>
					<title>Postgres fetch row</title>
					<programlisting role="php">
&lt;?php 
$conn = pg_pconnect ("dbname=publisher");
if (!$conn) {
    echo "An error occured.\n";
    exit;
}

$result = pg_Exec ($conn, "SELECT * FROM authors");
if (!$result) {
    echo "An error occured.\n";
    exit;
}

$num = pg_numrows($result); 

for ($i=0; $i&lt;$num; $i++) {
  $r = pg_fetch_row($result, $i);

  for ($j=0; $j&lt;count($r); $j++) {
    echo "$r[$j]&amp;nbsp;";
  }

  echo "&lt;BR>";

}
 
?>
      </programlisting>
				</example>
			</para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-fieldisnull">
		<refnamediv>
			<refname>pg_fieldisnull</refname>
			<refpurpose>필드가 &null;인지 검사한다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>pg_fieldisnull</methodname>
					<methodparam><type>int</type><parameter>result_id</parameter></methodparam>
					<methodparam><type>int</type><parameter>row</parameter></methodparam>
					<methodparam><type>mixed</type><parameter>field</parameter></methodparam>
				</methodsynopsis>
			<para>
			필드가 &null;인지 아닌지 검사한다. 인수로 주어진 행에 해당하는 필드가 &null;이 아니면
			0을 돌려주고 &null;인 경우 1을 돌려준다. 필드는 숫자와 필드이름 두가지로 정의될 수 있다.
			행의 번호는 0부터 매겨진다.
      </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-fieldname">
		<refnamediv>
			<refname>pg_fieldname</refname>
			<refpurpose>필드의 이름을 돌려준다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>함수 설명</title>
				<methodsynopsis>
					<type>string</type><methodname>pg_fieldname</methodname>
					<methodparam><type>int</type><parameter>result_id</parameter></methodparam>
					<methodparam><type>int</type><parameter>field_number</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_fieldname</function> 함수는 인수로 주어진 결과지시자가 가리키는
				컬럼번호에 해당하는 이름을 돌려준다. 필드번호는 0부터 매겨진다.
		    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-fieldnum">
		<refnamediv>
			<refname>pg_fieldnum</refname>
			<refpurpose>Returns the field number of the named field</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>pg_fieldnum</methodname>
					<methodparam><type>int</type><parameter>result_id</parameter></methodparam>
					<methodparam><type>string</type><parameter>field_name</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_fieldnum</function> will return the number of the
     column slot that corresponds to the named field in the given
     PosgreSQL result identifier.  Field numbering starts at 0.  This
     function will return -1 on error.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-fieldprtlen">
		<refnamediv>
			<refname>pg_fieldprtlen</refname>
			<refpurpose>Returns the printed length</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>pg_fieldprtlen</methodname>
					<methodparam><type>int</type><parameter>result_id</parameter></methodparam>
					<methodparam><type>int</type><parameter>row_number</parameter></methodparam>
					<methodparam><type>string</type><parameter>field_name</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_fieldprtlen</function> will return the actual
     printed length (number of characters) of a specific value in a
     PostgreSQL result.  Row numbering starts at 0.  This function
     will return -1 on an error.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-fieldsize">
		<refnamediv>
			<refname>pg_fieldsize</refname>
			<refpurpose>
     주어진 필드의 내부저장 공간의 크기를 돌려준다.
</refpurpose>
		</refnamediv>
		<refsect1>
			<title>함수 설명</title>
				<methodsynopsis>
					<type>int</type><methodname>pg_fieldsize</methodname>
					<methodparam><type>int</type><parameter>result_id</parameter></methodparam>
					<methodparam><type>int</type><parameter>field_number</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_fieldsize</function> will return the internal
     storage size (in bytes) of the field number in the given
     PostgreSQL result. Field numbering starts at 0. A field size of
     -1 indicates a variable length field. This function will return
     &false; on error.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-fieldtype">
		<refnamediv>
			<refname>pg_fieldtype</refname>
			<refpurpose>
     주어진 필드번호에 해당하는 데이터형을 돌려준다.
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>함수 설명</title>
				<methodsynopsis>
					<type>string</type><methodname>pg_fieldtype</methodname>
					<methodparam><type>int</type><parameter>result_id</parameter></methodparam>
					<methodparam><type>int</type><parameter>field_number</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_fieldtype</function> 함수는 PostgreSQL 결과지시자가
				가리키는 필드의 데이터형을 돌려준다. 필드번호는 0부터 매겨진다.
	    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-freeresult">
		<refnamediv>
			<refname>pg_freeresult</refname>
			<refpurpose>결과값을 저장했던 메모리를 비운다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>함수 설명</title>
				<methodsynopsis>
					<type>int</type><methodname>pg_freeresult</methodname>
					<methodparam><type>int</type><parameter>result_id</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_freeresult</function> 함수는 여러분의 스크립트가 실행되고 있을때
				너무 많은 메모리 공간을 사용한다고 판단될 경우 쓰일 수 있다. 실행 결과값을 담아두고
				있는 모든 메모리는 스크립트의 실행이 끝났을때 자동적으로 비워지지만 만약 그 메모리에
				저장된 결과값이 더이상 필요없다고 확신할 경우 그것에 해당하는 결과지시자를 인수로 넣어
				수동으로 메모리를 비워줄 수 있다.
		    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-getlastoid">
		<refnamediv>
			<refname>pg_getlastoid</refname>
			<refpurpose>마지막 오브젝트 지시자를 돌려준다.</refpurpose>
		</refnamediv>
		<refsect1>
			<title>함수 설명</title>
				<methodsynopsis>
					<type>int</type><methodname>pg_getlastoid</methodname>
					<methodparam><type>int</type><parameter>result_id</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_getlastoid</function> can be used to retrieve the
     <varname>oid</varname> assigned to an inserted tuple if the
     result identifier is used from the last command sent via
     <function>pg_exec</function> and was an SQL INSERT.  This
     function will return a positive integer if there was a valid
     <varname>oid</varname>.  It will return -1 if an error occured or
     the last command sent via <function>pg_exec</function> was not an
     INSERT.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-host">
		<refnamediv>
			<refname>pg_host</refname>
			<refpurpose>
     접속된 PostgreSQL 호스트의 주소를 돌려준다.
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>함수 설명</title>
				<methodsynopsis>
					<type>string</type><methodname>pg_host</methodname>
					<methodparam><type>int</type><parameter>connection_id</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_host</function> 함수는 인수로 주어진 PostgreSQL 접속지시자에
				해당하는 호스트의 이름을 돌려준다.
		    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-loclose">
		<refnamediv>
			<refname>pg_loclose</refname>
			<refpurpose>Close a large object</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>void</type><methodname>pg_loclose</methodname>
					<methodparam><type>int</type><parameter>fd</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_loclose</function> closes an Inversion Large
     Object. <parameter>Fd</parameter> is a file descriptor for the
     large object from <function>pg_loopen</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-locreate">
		<refnamediv>
			<refname>pg_locreate</refname>
			<refpurpose>Create a large object</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>pg_locreate</methodname>
					<methodparam><type>int</type><parameter>conn</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_locreate</function> creates an Inversion Large
     Object and returns the <varname>oid</varname> of the large
     object.  <parameter>conn</parameter> specifies a valid database
     connection.  PostgreSQL access modes INV_READ, INV_WRITE, and
     INV_ARCHIVE are not supported, the object is created always with
     both read and write access. INV_ARCHIVE has been removed from
     PostgreSQL itself (version 6.3 and above).
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-loexport">
		<refnamediv>
			<refname>pg_loexport</refname>
			<refpurpose>Export a large object to file</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>bool</type><methodname>pg_loexport</methodname>
					<methodparam><type>int</type><parameter>oid</parameter></methodparam>
					<methodparam><type>int</type><parameter>file</parameter></methodparam>
					<methodparam choice="opt"><type>int</type><parameter>
							connection_id
						</parameter></methodparam>
				</methodsynopsis>
			<para>
     The <parameter>oid</parameter> argument specifies the object id
     of the large object to export and the
     <parameter>filename</parameter> argument specifies the pathname
     of the file. Returns &false; if an error occurred, &true;
     otherwise. Remember that handling large objects in PostgreSQL
     must happen inside a transaction.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-loimport">
		<refnamediv>
			<refname>pg_loimport</refname>
			<refpurpose>Import a large object from file</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>pg_loimport</methodname>
					<methodparam><type>int</type><parameter>file</parameter></methodparam>
					<methodparam choice="opt"><type>int</type><parameter>
							connection_id
						</parameter></methodparam>
				</methodsynopsis>
			<para>
     The <parameter>filename</parameter> argument specifies the
     pathname of the file to be imported as a large object. Returns
     &false; if an error occurred, object id of the just created large
     object otherwise. Remember that handling large objects in
     PostgreSQL must happen inside a transaction.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-loopen">
		<refnamediv>
			<refname>pg_loopen</refname>
			<refpurpose>Open a large object</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>pg_loopen</methodname>
					<methodparam><type>int</type><parameter>conn</parameter></methodparam>
					<methodparam><type>int</type><parameter>objoid</parameter></methodparam>
					<methodparam><type>string</type><parameter>mode</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_loopen</function> open an Inversion Large Object and
     returns file descriptor of the large object. The file descriptor
     encapsulates information about the connection. Do not close the
     connection before closing the large object file descriptor.
     <parameter>objoid</parameter> specifies a valid large object oid
     and <parameter>mode</parameter> can be either "r", "w", or "rw".
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-loread">
		<refnamediv>
			<refname>pg_loread</refname>
			<refpurpose>Read a large object</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>string</type><methodname>pg_loread</methodname>
					<methodparam><type>int</type><parameter>fd</parameter></methodparam>
					<methodparam><type>int</type><parameter>len</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_loread</function> reads at most
     <parameter>len</parameter> bytes from a large object and
     returns it as a string.
     <parameter>fd</parameter> specifies a valid large object file
     descriptor and<parameter>len</parameter> specifies the maximum
     allowable size of the large object segment.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-loreadall">
		<refnamediv>
			<refname>pg_loreadall</refname>
			<refpurpose>
     Read a entire large object and send straight to browser
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>void</type><methodname>pg_loreadall</methodname>
					<methodparam><type>int</type><parameter>fd</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_loreadall</function> reads a large object and
     passes it straight through to the browser after sending all pending
     headers. Mainly intended for sending binary data like images or sound.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-lounlink">
		<refnamediv>
			<refname>pg_lounlink</refname>
			<refpurpose>Delete a large object</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>void</type><methodname>pg_lounlink</methodname>
					<methodparam><type>int</type><parameter>conn</parameter></methodparam>
					<methodparam><type>int</type><parameter>lobjid</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_lounlink</function> deletes a large object with the
     <parameter>lobjid</parameter> identifier for that large object.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-lowrite">
		<refnamediv>
			<refname>pg_lowrite</refname>
			<refpurpose>Write a large object</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>pg_lowrite</methodname>
					<methodparam><type>int</type><parameter>fd</parameter></methodparam>
					<methodparam><type>string</type><parameter>buf</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_lowrite</function> writes at most to a large object
     from a variable <parameter>buf</parameter> and returns the number
     of bytes actually written, or &false; in the case of an error.
     <parameter>fd</parameter> is a file descriptor for the large
     object from <function>pg_loopen</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-numfields">
		<refnamediv>
			<refname>pg_numfields</refname>
			<refpurpose>Returns the number of fields</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>pg_numfields</methodname>
					<methodparam><type>int</type><parameter>result_id</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_numfields</function> will return the number of
     fields (columns) in a PostgreSQL result.  The argument is a valid
     result identifier returned by <function>pg_exec</function>. This
     function will return -1 on error.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-numrows">
		<refnamediv>
			<refname>pg_numrows</refname>
			<refpurpose>Returns the number of rows</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>pg_numrows</methodname>
					<methodparam><type>int</type><parameter>result_id</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_numrows</function> will return the number of rows in a
     PostgreSQL result.  The argument is a valid result identifier
     returned by <function>pg_exec</function>. This function will
     return -1 on error.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-options">
		<refnamediv>
			<refname>pg_options</refname>
			<refpurpose>Get the options associated with the connection</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>string</type><methodname>pg_options</methodname>
					<methodparam><type>int</type><parameter>connection_id</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_options</function> will return a string containing
     the options specified on the given PostgreSQL connection
     identifier.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-pconnect">
		<refnamediv>
			<refname>pg_pconnect</refname>
			<refpurpose>Open a persistant PostgreSQL connection</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>pg_pconnect</methodname>
					<methodparam><type>string</type><parameter>conn_string</parameter></methodparam>
				</methodsynopsis>
			<para>
     Returns a connection index on success, or &false; if the connection
     could not be made.  Opens a connection to a PostgreSQL database.
     The arguments should be within a quoted string.
     The arguments available include <parameter>dbname</parameter>
				<parameter>port</parameter>, <parameter>host</parameter>, 
     <parameter>tty</parameter>, <parameter>options</parameter>,
     <parameter>user</parameter>, and <parameter>password</parameter>
			</para>
			<para>
     This function returns a connection index that is needed by other
     PostgreSQL functions. You can have multiple connections open at
     once.
    </para>
			<para>
     The previous syntax of:
     <command>$conn = pg_pconnect ("host", "port", "options", "tty",
    "dbname")
     </command>
     has been deprecated.
    </para>
			<para>
     See also <function>pg_connect</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-port">
		<refnamediv>
			<refname>pg_port</refname>
			<refpurpose>
     Return the port number associated with the connection
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>pg_port</methodname>
					<methodparam><type>int</type><parameter>connection_id</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_port</function> will return the port number that the
     given PostgreSQL connection identifier is connected to.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-put-line">
		<refnamediv>
			<refname>pg_put_line</refname>
			<refpurpose>Send a NULL-terminated string to PostgreSQL backend</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>bool</type><methodname>pg_put_line</methodname>
					<methodparam choice="opt"><type>resource</type><parameter>
							connection_id
						</parameter></methodparam>
					<methodparam><type>string</type><parameter>data</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_put_line</function> sends a NULL-terminated string
     to the PostgreSQL backend server. This is useful for example for
     very high-speed inserting of data into a table, initiated by
     starting a PostgreSQL copy-operation. That final NULL-character
     is added automatically. Returns &true; if successfull, &false;
     otherwise.
    </para>
			<note>
				<para> 
      Note the application must explicitly send the two characters "\."
      on a final line to indicate to the backend that it has finished
      sending its data.
     </para>
			</note>
			<para>
     See also <function>pg_end_copy</function>.
     <example>
					<title>High-speed insertion of data into a table</title>
					<programlisting role="php">
&lt;?php 
    $conn = pg_pconnect ("dbname=foo");
    pg_exec($conn, "create table bar (a int4, b char(16), d float8)");
    pg_exec($conn, "copy bar from stdin");
    pg_put_line($conn, "3\thello world\t4.5\n");
    pg_put_line($conn, "4\tgoodbye world\t7.11\n");
    pg_put_line($conn, "\\.\n");
    pg_end_copy($conn);
?>
      </programlisting>
				</example>
			</para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-result">
		<refnamediv>
			<refname>pg_result</refname>
			<refpurpose>Returns values from a result identifier</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>mixed</type><methodname>pg_result</methodname>
					<methodparam><type>int</type><parameter>result_id</parameter></methodparam>
					<methodparam><type>int</type><parameter>row_number</parameter></methodparam>
					<methodparam><type>mixed</type><parameter>fieldname</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_result</function> will return values from a result
     identifier produced by <function>pg_Exec</function>.  The
     <parameter>row_number</parameter> and
     <parameter>fieldname</parameter> sepcify what cell in the table
     of results to return.  Row numbering starts from 0.  Instead of
     naming the field, you may use the field index as an unquoted
     number.  Field indices start from 0.
    </para>
			<para>
     PostgreSQL has many built in types and only the basic ones are
     directly supported here.  All forms of integer, boolean and oid
     types are returned as integer values.  All forms of float, and
     real types are returned as double values.  All other types,
     including arrays are returned as strings formatted in the same
     default PostgreSQL manner that you would see in the
     <command>psql</command> program.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-set-client-encoding">
		<refnamediv>
			<refname>pg_set_client_encoding</refname>
			<refpurpose>
     Set the client encoding
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>int</type><methodname>pg_set_client_encoding</methodname>
					<methodparam choice="opt"><type>int</type><parameter>
							connection
						</parameter></methodparam>
					<methodparam><type>string</type><parameter>encoding</parameter></methodparam>
				</methodsynopsis>
			<para>
     The function set the client encoding and return 0 if success or
     -1 if error.
    </para>
			<para>
				<parameter>encoding</parameter> is the client
     encoding and can be either :
     SQL_ASCII, EUC_JP, EUC_CN, EUC_KR, EUC_TW, UNICODE,
     MULE_INTERNAL, LATINX (X=1...9), KOI8, WIN, ALT,
     SJIS, BIG5, WIN1250.
    </para>
			<note>
				<para>
      This function requires PHP-4.0.2 or higher and PostgreSQL-7.0 or
      higher.
     </para>
				<para>
      The function used to be called
      <function>pg_setclientencoding</function>.
     </para>
			</note>
			<para>
     See also <function>pg_client_encoding</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-client-encoding">
		<refnamediv>
			<refname>pg_client_encoding</refname>
			<refpurpose>
     Get the client encoding
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>string</type><methodname>pg_client_encoding</methodname>
					<methodparam choice="opt"><type>int</type><parameter>
							connection
						</parameter></methodparam>
				</methodsynopsis>
			<para>
     The functions returns the client encoding as the string. The
     returned string should be either :
     SQL_ASCII, EUC_JP, EUC_CN, EUC_KR, EUC_TW, UNICODE,
     MULE_INTERNAL, LATINX (X=1...9), KOI8, WIN, ALT,
     SJIS, BIG5, WIN1250. 
    </para>
			<note>
				<para>
      This function requires PHP-4.0.2 or higher and PostgreSQL-7.0 or
      higher.
     </para>
				<para>
      The function used to be called
      <function>pg_clientencoding</function>.
     </para>
			</note>
			<para>
     See also <function>pg_set_client_encoding</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-trace">
		<refnamediv>
			<refname>pg_trace</refname>
			<refpurpose>Enable tracing a PostgreSQL connection</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>bool</type><methodname>pg_trace</methodname>
					<methodparam><type>string</type><parameter>filename</parameter></methodparam>
					<methodparam choice="opt"><type>string</type><parameter>
							mode
						</parameter></methodparam>
					<methodparam choice="opt"><type>int</type><parameter>
							connection
						</parameter></methodparam>
				</methodsynopsis>
			<para>
     Enables tracing of the PostgreSQL frontend/backend communication
     to a debugging file. To fully understand the results one needs to
     be familiar with the internals of PostgreSQL communication
     protocol.  For those who are not, it can still be useful for
     tracing errors in queries sent to the server, you could do for
     example <command>grep '^To backend' trace.log</command> and see
     what query actually were sent to the PostgreSQL server.
    </para>
			<para>
				<parameter>Filename</parameter> and <parameter>mode</parameter>
     are the same as in <function>fopen</function>
     (<parameter>mode</parameter> defaults to 'w'),
     <parameter>connection</parameter> specifies the connection to
     trace and defaults to the last one opened.
    </para>
			<para>
     Returns &true; if <parameter>filename</parameter> could be opened
     for logging, &false; otherwise.
    </para>
			<para>
     See also <function>fopen</function> and
     <function>pg_untrace</function>.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-tty">
		<refnamediv>
			<refname>pg_tty</refname>
			<refpurpose>
     Return the tty name associated with the connection
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>string</type><methodname>pg_tty</methodname>
					<methodparam><type>int</type><parameter>connection_id</parameter></methodparam>
				</methodsynopsis>
			<para>
				<function>pg_tty</function> will return the tty name that server
     side debugging output is sent to on the given PostgreSQL
     connection identifier.
    </para>
		</refsect1>
	</refentry>
	<refentry id="function.pg-untrace">
		<refnamediv>
			<refname>pg_untrace</refname>
			<refpurpose>Disable tracing of a PostgreSQL connection</refpurpose>
		</refnamediv>
		<refsect1>
			<title>Description</title>
				<methodsynopsis>
					<type>bool</type><methodname>pg_untrace</methodname>
					<methodparam choice="opt"><type>int</type><parameter>
							connection
						</parameter></methodparam>
				</methodsynopsis>
			<para>
     Stop tracing started by <function>pg_trace</function>.
     <parameter>connection</parameter> specifies the connection that was
     traced and defaults to the last one opened.
    </para>
			<para>
     Returns always &true;.
    </para>
			<para>
     See also <function>pg_trace</function>.
    </para>
		</refsect1>
	</refentry>
</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

