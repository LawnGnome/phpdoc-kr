<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1.15 Maintainer: fuzzy74 Status: ready -->
 <chapter xml:id="faq.languages" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>PHP와 다른 프로그래밍 언어</title>
  <titleabbrev>PHP와 다른 프로그래밍 언어</titleabbrev>

  <para>
   PHP는 웹프로그래밍을 위한 최고의 프로그래밍 언어입니다.
   다른 언어는 어떨까요?
  </para>

  <qandaset>
   <qandaentry xml:id="faq.languages.asp">
    <question>
     <para>PHP vs. ASP?</para>
    </question>
    <answer>
     <para>
      ASP 그 자체로는 실제로 언어라고 볼수 없습니다. ASP는 Active Server Pages의 약어입니다.
      ASP를 프로그래밍하기 위해 같이 다루어야 하는 언어가 Visual Basic Script와 JScript입니다.
      ASP의 최대 단점은 MS의 Internet Information Server (IIS)에서만 사용할수 있다는것입니다.
      이 점으로 인해 ASP를 Win32기반 서버로 제한하게 됩니다. 다른 환경이나 웹서버에서 ASP를
      작동하게 하는 몇개의 프로젝트가 진행중입니다:
      <link xlink:href="&url.halcyon;">Halcyon</link>의 <link xlink:href="&url.instantasp;">InstantASP</link> (상업용),
      <link xlink:href="&url.chilisoft;">Chili!Soft</link>의 Chili!Soft ASP (상업용)
      ASP는 PHP보다 느리고 성가신 언어이며, 약간은 불안정하기까지 합니다. ASP의 문법(pros)은
      그것이 VBScript를 사용하고 있기 때문에 만약에 비주얼 베이직(Visual Basic)을
      다룰줄만 안다면 상대적으로 접근하기 쉽습니다. 또한 ASP는 IIS가 ASP를 올리고 
      실행시킬수 있도록 해놨기 때문에 기본적으로 지원이 됩니다. ASP내에 내장되어있는
      컴포넌트는 제한되어있습니다. 그래서 FTP서버와 접속할수있도록하는 고급(advanced)기능을
      사용할 필요가 생긴다면 추가적인 컴포넌트를 사야합니다.
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.languages.aspconverter">
    <question>
     <para>ASP를 PHP로 변환시켜주는것이 있나요?</para>
    </question>
    <answer>
     <para>
      네, 서버측의 <link xlink:href="&url.asp2php;">asp2php</link>가 가장 많이 쓰이며,
      <link xlink:href="&url.asptranslator;">클라언트측</link>옵션도 있습니다.
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.languages.coldfusion">
    <question>
     <para>PHP vs. Cold Fusion?</para>
    </question>
    <answer>
     <para>
      PHP는 복잡한 프로그래밍 작업과 새로운 아이디어를 시도하는데 가장 빠르며
      가장 효율이 높습니다. 그 뿐만 아니라 PHP는 가장 안정적이며 적은
      자원만이 필요합니다. 콜드 퓨전(Cold Fusion)은 더 낳은 에러 핸들링, 
      데이터베이스 추상화는 PHP 4에도 언급된것이긴 하지만,
      더 낳은 데이터베이스 추상화(abstraction) 그리고 더 낳은 날짜 파싱이 가능합니다.
      콜드 퓨전(Cold Fusion)의 다른 강점 중 하나는 최고의 검색 엔진입니다. 그러나
      그 검색엔진은 웹 스크립트 언어에 포함되어 있어야 합니다.
      PHP는 거의 모든 플래폼에서 실행이됩니다; 
      콜드 퓨전(Cold Fusion)은 오직 Win32, Solaris, Linux and HP/UX 에서만 사용가능합니다.
      콜드 퓨전은 좋은 IDE를 가졌고 보통 시작하기가 쉽습니다, 반면에 PHP는 초기에
      더 많은 프로그래밍 지식이 요구됩니다. 콜드 퓨전은 프로그래머가 아닌사람들을 위해 
      설계되었지만, PHP는 프로그래머에게 초점을 맞췄습니다.
     </para>
     <para>
      이 주제에 관해 Michael J Sheldon이 정리한 글이 PHP 메일링리스트에 
      게제되었습니다. <link
       xlink:href="&url.coldfusion.summary;">&url.coldfusion.summary;</link>에서
      사본을 볼 수 있습니다.
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.languages.perl">
    <question>
     <para>PHP vs. Perl?</para>
    </question>
    <answer>
     <para>
      Perl에 비해 PHP의 가장 큰 장접은 웹을 위한 스크립트로 설계되었다는것입니다.
      반명에 Perl은 더 많은 일을 할수 있도록 설계되었고 이로 인해 매우 복잡하게 되었습니다.
      Perl의 유연성/복잡성은 코드를 쓰기 쉽게 했지만 다른 저작자/코더가
      읽기에는 어렵게 했습니다. PHP는 복잡성을 잃지않으면서 덜 헷까리고 덜 엄격한
      포맷을 갖고 있습니다. Perl의 '좋은' 기능을 모두 갖고 있습니다: 
      컨스트럭트(construct), 문법 등등. 이는 Perl처럼 복잡하게 함이 없이 가능합니다.
      Perl은 많은 노력이 필요한 언어이기 때문에 80년대 말부터 지금까지 발전한것입니다.
      그러나 PHP는 엄청난 속도로 성장하고 있습니다.
     </para>
    </answer>
   </qandaentry>

  </qandaset>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
