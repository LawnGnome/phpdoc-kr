<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.10 $ -->
<!-- EN-Revision: 1.25 Maintainer: fuzzy74 Status: ready -->
 <appendix id="debugger">
  <title>PHP 디버깅하기</title>

  <sect1 id="debugger-about">
   <title>디버거에 관하여</title>
   <simpara>
    PHP 3는 네트워크-기반의 디버거가 지원된다.
   </simpara>
   <simpara>
    PHP 4는 내장된 디버깅 기능을 갖지 않는다. 대신 외부 디버거 중 하나를 이용할수 있다. 
    <ulink url="&url.zend.ide;">Zend IDE</ulink>는 디버거를 내장하고 있고, 
    <ulink url="&url.dbg;">&url.dbg;</ulink>에서 DBG같은 몇가지 무료 디버거 확장을 볼수 있다.
    <ulink url="&url.apd;">Advanced PHP Debugger</ulink> (APD) 나
    <ulink url="&url.xdebug;">Xdebug</ulink>는 이 섹션에서 설명하는
    PHP 3의 디버깅 기능과 같은 디버거 인터페이스 호환성을 갖는다.
   </simpara>
  </sect1>

  <sect1 id="debugger-using">
   <title>디버거 사용하기</title>

   <para>
    PHP 3의 내장 디버거는 파악하기 어려운 버그를 추적하는데 사용할수있다.
    디버거는 PHP 3가 시작하는 모든 시간 동안 <acronym>TCP</acronym> 포트를 
    통한 접속에 의해 작동한다. 각 요구로부터 발생하는 모든 에러 메시지는
    이 TCP 접속으로 수신될것이다. <acronym>IDE</acronym>나 
    프로그램용 에디터 (Emacs같은)안에서 실행되는 "디버깅 서버"에 대한 정보가
    여기서 설명된다.
   </para>
   <para>
    디버거를 설정하는 방법:
    <orderedlist>
     <listitem>
      <simpara> 
       <link linkend="configuration.file">configuration file</link>에서 
       디버거를 위한 TCP 포트를 설정하고 (<link linkend="ini.debugger.port">debugger.port</link>),
       활성화시킨다 (<link linkend="ini.debugger.enabled">debugger.enabled</link>).
      </simpara>
     </listitem>
     <listitem>
      <simpara> 
       그 포트에 TCP 리스너를 설정한다 (예를 들면 유닉스에서는
       <command>socket -l -s 1400</command>).
      </simpara>
     </listitem>
     <listitem>
      <simpara> 
       코드에서, "debugger_on(<replaceable>host</replaceable>)"를 실행한다.
       여기서 <replaceable>host</replaceable>는 IP 숫자나 
       <acronym>TCP</acronym> 리스너가 실행되고 있는 호스트의 이름이다.
      </simpara>
     </listitem>
    </orderedlist>
    이제부터는 모든 경고, 주의 등의 메시지가 그 리스너 소켓에서 보이게된다.
    <emphasis>심지어 <function>error_reporting</function>으로 활성화시키지
    않아도 그렇게 된다</emphasis>.
   </para>
  </sect1>

  <sect1 id="debugger-protocol">
   <title>디버거 프로토콜</title>
   <para>
    PHP 3 디버거 프로토콜은 줄-단위다. 각 줄은 각각 <emphasis>type</emphasis>을
    갖고, 몇개의 줄이 <emphasis>message</emphasis>를 구성한다. 각 메시지는 
    <literal>start</literal> 타입의 줄로 시작되고 <literal>end</literal> 타입의 줄로 종료된다.
    PHP 3는 동시에 서로 다른 메시지 줄을 보낼수 있다.
   </para>
   <para>
    각 줄은 다음과 같은 포맷을 갖을수 있다:
    <informalexample>
     <literallayout>
<![CDATA[
date time host(pid) type: message-data
]]>
     </literallayout>
    </informalexample>
   </para>
   <para>
    <variablelist>
     <varlistentry>
      <term><replaceable>date</replaceable></term>
      <listitem>
       <simpara>
        ISO 8601 포맷의 날짜
        (<replaceable>yyyy</replaceable>-<replaceable>mm</replaceable>-<replaceable>dd</replaceable>)
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable>time</replaceable></term>
      <listitem>
       <simpara>마이크로초를 포함하는 시간:
        <replaceable>hh</replaceable>:<replaceable>mm</replaceable>:<replaceable>uuuuuu</replaceable>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable>host</replaceable></term>
      <listitem>
       <simpara>
        스크립트 에러가 발생하는 호스트의 DNS 이름이나 IP 주소
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable>pid</replaceable></term>
      <listitem>
       <simpara>
        이 에러를 발생하는 PHP 3 스크립트의 프로세스의 
        <replaceable>host</replaceable>상의 PID (프로세스 ID)
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable>type</replaceable></term>
      <listitem>
       <para>
        줄 타입. 수신 프로그램에게 다음 데이터를 취급해야 한다는것을
        알려줌:
        <table>
         <title>디버거 줄 타입</title>
         <tgroup cols="2">
          <thead>
           <row>
            <entry>Name</entry>
            <entry>Meaning</entry>
           </row>
          </thead>
          <tbody>
           <row>
            <entry><literal>start</literal></entry> 
            <entry>
             수신 프로그램에게 디버거 메시지가 여기서 시작됨을 알림.
             <replaceable>data</replaceable>의 내용이 아래 목록처럼
             에러 메시지의 타입이 될것이다.
            </entry>
           </row>
           <row>
            <entry><literal>message</literal></entry>
            <entry>PHP 3 에러 메시지.</entry>
           </row>
           <row>
            <entry><literal>location</literal></entry>
            <entry>
             에러가 발생한 파일명과 줄번호. 
             첫번째 <literal>location</literal> 줄은 항상 상단의 위치를 내포할것이다.
             <replaceable>data</replaceable>는
             <literal><replaceable>file</replaceable>:<replaceable>line</replaceable></literal>을 포함한다.
             <literal>message</literal>와 모든 <literal>function</literal> 이후에 
             항상 <literal>location</literal> 줄이 될것이다.
            </entry>
           </row>
           <row>
            <entry>
             <literal>frames</literal></entry> 
            <entry>
             다음 스택 덤프 안의 프레임 번호. 4개의 프레임이 존재한다면,
             호출되는 함수의 네단계의 정보를 기대할수 있다.
             "frames"줄이 보이지 않으면, 스택의 깊이는 0이라고 볼수 있다
             (상단에서 에러가 발생함).
            </entry>
           </row>
           <row>
            <entry>
             <literal>function</literal></entry> 
            <entry>
             에러가 발생하는 함수명. 함수 호출 스택안의 모든 레벨에서
             한번씩 반복될것이다.
            </entry>
           </row>
           <row>
            <entry><literal>end</literal></entry> 
            <entry>
             수신 프로그램에게 디버거 메시지가 여기서 끝난다고 알림.
            </entry>
           </row>
          </tbody>
         </tgroup>
        </table>
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable>data</replaceable></term>
      <listitem>
       <simpara>Line data.</simpara>
      </listitem>
     </varlistentry>
    </variablelist>

    <table>
     <title>디버거 에러 타입</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Debugger</entry>
        <entry>PHP 3 Internal</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><errortype>warning</errortype></entry>
        <entry><errortype>E_WARNING</errortype></entry>
       </row>
       <row>
        <entry><errortype>error</errortype></entry>
        <entry><errortype>E_ERROR</errortype></entry>
       </row>
       <row>
        <entry><errortype>parse</errortype></entry>
        <entry><errortype>E_PARSE</errortype></entry>
       </row>
       <row>
        <entry><errortype>notice</errortype></entry>
        <entry><errortype>E_NOTICE</errortype></entry>
       </row>
       <row>
        <entry><errortype>core-error</errortype></entry>
        <entry><errortype>E_CORE_ERROR</errortype></entry>
       </row>
       <row>
        <entry><errortype>core-warning</errortype></entry>
        <entry><errortype>E_CORE_WARNING</errortype></entry>
       </row>
       <row>
        <entry><errortype>unknown</errortype></entry>
        <entry>(any other)</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
    
    <example>
     <title>예제 디버거 메시지</title>
     <literallayout>
<![CDATA[
1998-04-05 23:27:400966 lucifer.guardian.no(20481) start: notice
1998-04-05 23:27:400966 lucifer.guardian.no(20481) message: Uninitialized variable
1998-04-05 23:27:400966 lucifer.guardian.no(20481) location: (null):7
1998-04-05 23:27:400966 lucifer.guardian.no(20481) frames: 1
1998-04-05 23:27:400966 lucifer.guardian.no(20481) function: display
1998-04-05 23:27:400966 lucifer.guardian.no(20481) location: /home/ssb/public_html/test.php3:10
1998-04-05 23:27:400966 lucifer.guardian.no(20481) end: notice
]]>
     </literallayout>
    </example>
   </para>
  </sect1>

 </appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
