<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.9 $ -->
<!-- EN-Revision: 1.36 Maintainer: fuzzy74 Status: ready -->

 <appendix id="reserved">
  <title>예약어 목록</title>
  <para>
   다음은 PHP에서 기선언된 식별자 목록이다. 이 식별자 목록 중 어느것도
   스크립트에서 식별자로 사용될수 없다. 이 목록은 키워드와 기선언 변수,
   상수, 클래스 명도 포함한다. 이 목록은 철저하지도 완벽하지도 않다.
  </para>

  <sect1 id="reserved.keywords">
  <title>키워드 목록</title>
   <simpara>
    이 단어들은 PHP에서 특별한 의미를 갖는다. 이중 일부는 함수처럼 보여지기도하고
    상수나 기타 등등 으로 보여질것이다-그러나 그렇지 않다. 실제로: 그들은 언어 구조이다.
    다음 단어를 상수, 클래스명, 함수명으로 사용할수 없다. 이들을 변수명으로
    사용하는 것은 괜찮을수도 있지만, 혼란스럽게 될것이다.
   </simpara>

   <table>
    <title>PHP 키워드</title>
    <tgroup cols="5">
     <tbody>
      <row>
       <entry>
        <link linkend="language.operators.logical">and</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">or</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">xor</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__FILE__</link>
       </entry>
       <entry>
        <link linkend="reserved.classes.php5">exception</link>
       </entry>
       <entry>
        <link linkend="reserved.classes.php5">php_user_filter</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.constants.predefined">__LINE__</link>
       </entry>
       <entry>
        <function>array</function>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">as</link>
       </entry>
       <entry>
        <link linkend="control-structures.break">break</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">case</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="migration.old-function">cfunction</link>
       </entry>
       <entry>
        <link linkend="keyword.class">class</link>
       </entry>
       <entry>
        const
       </entry>
       <entry>
        <link linkend="control-structures.continue">continue</link>
       </entry>
       <entry>
        <link linkend="control-structures.declare">declare</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.switch">default</link>
       </entry>
       <entry>
        <function>die</function>
       </entry>
       <entry>
        <link linkend="control-structures.do.while">do</link>
       </entry>
       <entry>
        <function>echo</function>
       </entry>
       <entry>
        <link linkend="control-structures.else">else</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.elseif">elseif</link>
       </entry>
       <entry>
        <function>empty</function>
       </entry>
       <entry>
        <link linkend="control-structures.declare">enddeclare</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endfor</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endforeach</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.alternative-syntax">endif</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endswitch</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endwhile</link>
       </entry>
       <entry>
        <link linkend="function.eval">eval</link>
       </entry>
       <entry>
        <function>exit</function>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">extends</link>
       </entry>
       <entry>
        <link linkend="control-structures.for">for</link>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">foreach</link>
       </entry>
       <entry>
        <link linkend="functions.user-defined">function</link>
       </entry>
       <entry>
        <link linkend="language.variables.scope">global</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.if">if</link>
       </entry>
       <entry>
        <function>include</function>
       </entry>
       <entry>
        <function>include_once</function>
       </entry>
       <entry>
        <function>isset</function>
       </entry>
       <entry>
        <function>list</function>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">new</link>
       </entry>
       <entry>
        <link linkend="migration.old-function">old_function</link>
       </entry>
       <entry>
        <function>print</function>
       </entry>
       <entry>
        <function>require</function>
       </entry>
       <entry>
        <function>require_once</function>
       </entry>
      </row>
      <row>
       <entry>
        <function>return</function>
       </entry>
       <entry>
        <link linkend="language.variables.scope">static</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">switch</link>
       </entry>
       <entry>
        <function>unset</function>
       </entry>
       <entry>
        use
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">var</link>
       </entry>
       <entry>
        <link linkend="control-structures.while">while</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__FUNCTION__</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__CLASS__</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__METHOD__</link>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect1>

  <sect1 id="reserved.variables">
   <title>기선언 변수</title>
   
   <para>
    PHP 4.1.0이후부터 <link linkend="language.variables.external">외부 변수</link>를
    가져오는 가장 선호되는 방법은 아래에서 설명하는 슈퍼전역을 사용하는것이다.
    그 이전버전에서는 <link linkend="ini.register-globals">register_globals</link>이나
    긴형태의 기선언 PHP 배열(<varname>$HTTP_*_VARS</varname>)을 사용한다.
    
    &avail.register-long-arrays;
   </para>

   <sect2 id="reserved.variables.server">
    <title>서버 변수: <varname>$_SERVER</varname></title>
    <note>
     <simpara>
      4.1.0부터 지원됨. 이전 버전은 <varname>$HTTP_SERVER_VARS</varname>을 사용함
     </simpara>
    </note>
    
    <simpara>
     <varname>$_SERVER</varname>는 헤더, 경로, 스크립트 위치와 같은
     정보를 포함하는 배열이다. 이 배열 안의 엔트리는 웹서버에 의해
     생성된다. 모든 웹서버가 이런 것들을 제공한다는 보장은 없다.
     서버는 어떤것은 빠뜨리거나 여기에서 목록화된 것 외의 것을 제공할수
     도 있다. 이런 많은 수의 변수들은
     <ulink url="&url.cgispec;">CGI 1.1 specification</ulink>에 기반하므로,
     그런 변수들은 기대할수 있을것이다.
    </simpara>

    <simpara>
     이 변수는 '슈퍼전역', 또는 자동 전역, 변수이다. 즉 스크립트내의
     모든 유효영역안에서 사용가능하다는 의미를 갖는다. 
     <varname>$HTTP_SERVER_VARS</varname>를 사용할때와 같이 함수나 
     메소드 안에서 사용하기 위해 <command>global $_SERVER;</command>를
     할 필요는 없다.
    </simpara>

    <simpara>
     <varname>$HTTP_SERVER_VARS</varname>는 동일한 초기 정보를 포함하지만,
     자동전역은 아니다. 
     (<varname>$HTTP_SERVER_VARS</varname> 와 <varname>$_SERVER</varname>는
     다른 변수이고 PHP는 그변수들을 따로 다루게 된다는 것에 주의한다)
    </simpara>

    <simpara>
     <link linkend="ini.register-globals">register_globals</link> 디렉티브가
     설정되어있으면, 이 변수들은 스크립트의 전역 유효영역에서 사용이 가능해
     진다. 즉 <varname>$_SERVER</varname> 와 <varname>$HTTP_SERVER_VARS</varname> 
     배열과 분리된다. 관련정보는
     <link linkend="security.registerglobals">전역 등록 사용하기</link>라는
     이름의 보안 챕터를 참고한다. 이들 각각의 전역은 자동전역이 아니다.
    </simpara>

    <simpara>
     $_SERVER에서는 다음 구성요소를 확인할수도 있고 그렇지 않은수있다.
     이 변수중 일부(심지어 모두)는 PHP가 커맨드 라인에서 수행되고 있을때에는
     보여지지 않을것이다.
    </simpara>

    <para>
     <variablelist>
      <varlistentry>
       <term>'<varname>PHP_SELF</varname>'</term>
       <listitem>
        <simpara>
         현재 실행중인 스크립트의 파일명이고, 도규먼트 루트에 상대적인
         경로를 갖는다. 예를 들면,
         주소 <filename>http://example.com/test.php/foo.bar</filename>의
         스크립트에서 <varname>$_SERVER['PHP_SELF']</varname>은
         <filename>/test.php/foo.bar</filename>이 될것이다.
        </simpara>
        <simpara>
         PHP가 커맨드 라인 프로세서로 실행중이면, 이 변수는 나타나지
         않는다.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>argv</varname>'</term>
       <listitem>
        <simpara>
         스크립트로 전달되는 인자의 배열. 스크립트가 커맨드 라인에서
         실행중이면, 이 변수는 C-스타일의 커맨드 라인 인자로 제공된다.
         GET 메소드에 의해 호출될때에는 이 변수는 질의 문자열(query string)을
         포함할것이다.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>argc</varname>'</term>
       <listitem>
        <simpara>
         스크립트로 전달되는 커맨드 라인 인자의 갯수
         (커맨드 라인에서 실행중일때)
        </simpara>
       </listitem>
      </varlistentry>
	  
      <varlistentry>
       <term>'<varname>GATEWAY_INTERFACE</varname>'</term>
       <listitem>
        <simpara>
         서버가 사용하는 CGI 사양(specification)의 버전:
         예를 들면, '<literal>CGI/1.1</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_NAME</varname>'</term>
       <listitem>
        <simpara>
         현재 스크립트가 수행되고 있는 서버 호스트의 이름.
         스크립트가 가상 호스트에서 수행중이면, 이 변수는 
         그 가상 호스트를 위해 정의된 값이 될것이다.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_SOFTWARE</varname>'</term>
       <listitem>
        <simpara>
         서버 식별 문자열. 요구(ruquest)에 응답할때 헤더안에서 보여준다.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_PROTOCOL</varname>'</term>
       <listitem>
        <simpara>
         페이지가 요청되어진 정보 프로토콜의 이름과 버전:
         예를 들면, '<literal>HTTP/1.0</literal>';
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>REQUEST_METHOD</varname>'</term>
       <listitem>
        <simpara>
         페이지에 접근할때 사용된 요청 메소드 종류.
         예를 들면,'<literal>GET</literal>',
         '<literal>HEAD</literal>', '<literal>POST</literal>', '<literal>PUT</literal>'.
        </simpara>
       </listitem>
      </varlistentry>
	  
      <varlistentry>
       <term>'<varname>QUERY_STRING</varname>'</term>
       <listitem>
        <simpara>
         페이지가 접근될때의 질의 문자열
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>DOCUMENT_ROOT</varname>'</term>
       <listitem>
        <simpara>
         현재 스크립트가 수행중인 다큐먼트 루트 디렉토리.
         서버 설정 파일에서 정의된다.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT</varname>'</term>
       <listitem>
        <simpara>
         현재 요청에 대한 <literal>Accept:</literal> 헤더의 내용.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_CHARSET</varname>'</term>
       <listitem>
        <simpara>
         현재 요청에 대한 <literal>Accept-Charset:</literal> 헤더의 내용.
         예를 들면'<literal>iso-8859-1,*,utf-8</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_ENCODING</varname>'</term>
       <listitem>
        <simpara>
         현재 요청에 대한 <literal>Accept-Encoding:</literal> 헤더의 내용.
         예를 들면: '<literal>gzip</literal>'.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_LANGUAGE</varname>'</term>
       <listitem>
        <simpara>
         현재 요청에 대한 <literal>Accept-Language:</literal> 헤더의 내용.
         예를 들면: '<literal>en</literal>'.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>HTTP_CONNECTION</varname>'</term>
       <listitem>
        <simpara>
         현재 요청에 대한 <literal>Connection:</literal> 헤더의 내용.
         예를 들면: '<literal>Keep-Alive</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_HOST</varname>'</term>
       <listitem>
        <simpara>
         현재 요청에 대한 <literal>Host:</literal> 헤더의 내용.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_REFERER</varname>'</term>
       <listitem>
        <simpara>
         현재 페이지에 대한 유저 에이전트를 참조하는 페이지의 주소.
         모든 에이전트가 이 값을 갖지 않는다. 일부 에이전트는
         <varname>HTTP_REFERER</varname>를 각 특성에 맞게 변경하는
         기능을 제공한다. 간단히 말해서, 이 값은 신뢰할수 없다.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_USER_AGENT</varname>'</term>
       <listitem>
        <simpara>
         현재 요청에 대한 <literal>User_Agent:</literal> 헤더 내용.
         이 값은 페이지에 접근 중인 유저 에이전트를 표시하는 문자열이다.
         표준적인 예로는: <computeroutput>Mozilla/4.5 [en] (X11; U;
         Linux 2.2.9 i586)</computeroutput>. 
         <function>get_browser</function>로 이 값을 사용하여 유저 에이전트의
         능력에 맞게 페이지의 출력을 조절할수 있다.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_ADDR</varname>'</term>
       <listitem>
        <simpara>
         현재 페이지를 보고있는 유저의 IP 주소.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_HOST</varname>'</term>
       <listitem>
        <simpara>
         현재 페이지를 보고있는 유저의 호스트명. 역방향 dns 검색이
         유저의 <varname>REMOTE_ADDR</varname>를 위해 사용된다.
        </simpara>
        <note>
         <simpara>
          웹서버는 이 변수를 생성할수 있도록 설정되어야 한다. 예를 들면
          아파치에서는 &httpd.conf;안에서 <literal>HostnameLookups On</literal>
          이 필요할것이다.  <function>gethostbyaddr</function>도 참고.
         </simpara>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_PORT</varname>'</term>
       <listitem>
        <simpara>
         웹서버와 통신중인 유저 머신이 사용중인 포트.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SCRIPT_FILENAME</varname>'</term>
       <listitem>
        <simpara>
         현재 수행되는 스크립트의 절대 경로명.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_ADMIN</varname>'</term>
       <listitem>
        <simpara>
         웹서버 설정 파일안의 SERVER_ADMIN (아파치용) 디렉티브에 주어지는
         값. 스크립트가 가상 호스트에서 수행중이면, 이 값은 그 가상호스트를
         위해 정의되는 값이 될것이다.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>SERVER_PORT</varname>'</term>
       <listitem>
        <simpara>
         웹서버가 통신을 위해 사용중인 서버 머신의 포트.
         초기 설정값으로 '<literal>80</literal>';이 될것이다.
         예를 들어, SSL을 사용중이면, 안전한 HTTP 포트로 정의된
         어떤 값으로도 변경할수 있다.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_SIGNATURE</varname>'</term>
       <listitem>
        <simpara>
         활설화되어있다면, 서버가 생성하는 페이지에 추가되는 
         서버 버전과 가상 호스트명을 갖는 문자열.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PATH_TRANSLATED</varname>'</term>
       <listitem>
        <simpara>
         현재 스크립트에 대한 파일시스템(다큐먼트 루트가 아님) 기반의 경로
         서버가 virtual-to-real 매핑으로 설정되면 보인다.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SCRIPT_NAME</varname>'</term>
       <listitem>
        <simpara>
         현재 스크립트의 경로를 갖는다. 이 값은 가리킬 필요가 있는
         페이지에 유용하다.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REQUEST_URI</varname>'</term>
       <listitem>
        <simpara>
         이 페이지에 접근하기 위해 주어지는 URI;
         예를 들면,'<literal>/index.html</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PHP_AUTH_USER</varname>'</term>
       <listitem>
        <simpara>
         HTTP 인증을 사용하는 모듈로서 아파치에서 수행될때,
         이 변수는 유저에 의해 제공되는 username으로 설정된다.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PHP_AUTH_PW</varname>'</term>
       <listitem>
        <simpara>
         HTTP 인증을 사용하는 모듈로서 아파치에서 수행될때,
         이 변수는 유저가 제공하는 password로 설정된다.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>AUTH_TYPE</varname>'</term>
       <listitem>
        <simpara>
         HTTP 인증을 사용하는 모듈로서 아파치에서 수행될때,
         이 변수는 인증 타입으로 설정된다.
        </simpara>
       </listitem>
      </varlistentry>

     </variablelist>
    </para>

   </sect2>

   <sect2 id="reserved.variables.environment">
    <title>환경 변수: <varname>$_ENV</varname></title>

    <note>
     <simpara>
      4.1.0부터 지원됨. 그 이전 버전에서는,
      <varname>$HTTP_ENV_VARS</varname>이 사용되었다.
     </simpara>
    </note>
    
    <simpara>
     이 변수들은 PHP 해석기가 실행중인 환경에서 PHP의 전역 네임스페이스로
     포함된다. PHP가 실행중인 셀과 다른 종류의 셀을 수행하는 시스템에
     의해서 많은 변수가 제공된다. 확정적인 변수 목록을 제공하는것은 불가능
     하다. 선언된 환경변수 목록에 대한 셀의 문서를 참고하라.
    </simpara>

    <simpara>
     다른 환경 변수는 CGI 변수를 포함한다. PHP가 서버 모듈로 실행중인지
     또는 CGI 프로세서로 실행중인지에 따라 달라진다.
    </simpara>
	
    <simpara>
     이변수는 '슈퍼전역', 도는 자동 전역, 변수이다. 이 말의 의미는
     스크립트 내의 모든 영역에서 사용가능하다는 것이다. 
     <varname>$HTTP_ENV_VARS</varname>를 사용할때와 마찬가지로,
     함수나 메소드에서 이 변수에 접근하기 위해
     <command>global $_ENV;</command>를 사용할 필요는 없다.
    </simpara>

    <simpara>
     <varname>$HTTP_ENV_VARS</varname>는 동일한 초기치 정보를 갖는다.
     그러나 자동전역이 아니다.
     (<varname>HTTP_ENV_VARS</varname> 와 <varname>$_ENV</varname>는
     다른 변수이며 PHP가 따로 다루게 된다는 것에 주의한다)
    </simpara>

    <simpara>
     <link linkend="ini.register-globals">register_globals</link> 디렉티브가
     설정되어있으면, 이변수는 스크립트의 전역 유효영역에서 사용가능해진다.
     즉,<varname>$_ENV</varname>과 <varname>$HTTP_ENV_VARS</varname> 배열에서
     독립적으로 사용된다. 관련 정보는,
     <link linkend="security.registerglobals">전역 등록 사용하기</link>라는
     보안 챕터를 참고한다. 이들 각각의 전역변수는 자동전역이 아니다.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.cookies">
    <title>HTTP 쿠키: <varname>$_COOKIE</varname></title>

    <note>
     <simpara>
      4.1.0부터 지원됨. 이전 버전에서는
      <varname>$HTTP_COOKIE_VARS</varname>를 사용했슴.
     </simpara>
    </note>
    
    <simpara>
     HTTP 쿠키를 통해 현재 스크립트로 전달되는 변수의 연관 배열.
     어떤 영역에서는 자동으로 전역화된다.
    </simpara>

    <simpara>
     이변수는 '슈퍼전역', 도는 자동 전역, 변수이다. 이 말의 의미는
     스크립트 내의 모든 영역에서 사용가능하다는 것이다. 
     <varname>$HTTP_COOKIE_VARS</varname>를 사용할때와 마찬가지로,
     함수나 메소드에서 이 변수에 접근하기 위해
     <command>global $_COOKIE;</command>를 사용할 필요는 없다.
    </simpara>

    <simpara>
     <varname>$HTTP_COOKIE_VARS</varname>는 동일한 초기치 정보를 갖는다.
     그러나 자동전역이 아니다.
     (<varname>HTTP_COOKIE_VARS</varname> 와 <varname>$_COOKIE</varname>는
     다른 변수이며 PHP가 따로 다루게 된다는 것에 주의한다)
    </simpara>

    <simpara>
     <link linkend="ini.register-globals">register_globals</link> 디렉티브가
     설정되어있으면, 이변수는 스크립트의 전역 유효영역에서 사용가능해진다.
     즉,<varname>$_COOKIE</varname>와 <varname>$HTTP_COOKIE_VARS</varname> 배열에서
     독립적으로 사용된다. 관련 정보는,
     <link linkend="security.registerglobals">전역 등록 사용하기</link>라는
     보안 챕터를 참고한다. 이들 각각의 전역변수는 자동전역이 아니다.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.get">
    <title>HTTP GET 변수: <varname>$_GET</varname></title>

    <note>
     <simpara>
      4.1.0부터 지원됨. 이전 버전에서는
      <varname>$HTTP_GET_VARS</varname>를 사용했슴.
     </simpara>
    </note>
    
    <simpara>
     HTTP GET 메소드를 통해 현재 스크립트에 전달되는 변수의 연관 배열.
     어떤 영역에서는 자동으로 전역화된다.
    </simpara>

    <simpara>
     이변수는 '슈퍼전역', 도는 자동 전역, 변수이다. 이 말의 의미는
     스크립트 내의 모든 영역에서 사용가능하다는 것이다. 
     <varname>$HTTP_GET_VARS</varname>를 사용할때와 마찬가지로,
     함수나 메소드에서 이 변수에 접근하기 위해
     <command>global $_GET;</command>를 사용할 필요는 없다.
    </simpara>

    <simpara>
     <varname>$HTTP_GET_VARS</varname>는 동일한 초기치 정보를 갖는다.
     그러나 자동전역이 아니다.
     (<varname>HTTP_GET_VARS</varname> 와 <varname>$_GET</varname>는
     다른 변수이며 PHP가 따로 다루게 된다는 것에 주의한다)
    </simpara>

    <simpara>
     <link linkend="ini.register-globals">register_globals</link> 디렉티브가
     설정되어있으면, 이변수는 스크립트의 전역 유효영역에서 사용가능해진다.
     즉,<varname>$_GET</varname>와 <varname>$HTTP_GET_VARS</varname> 배열에서
     독립적으로 사용된다. 관련 정보는,
     <link linkend="security.registerglobals">전역 등록 사용하기</link>라는
     보안 챕터를 참고한다. 이들 각각의 전역변수는 자동전역이 아니다.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.post">
    <title>HTTP POST 변수: <varname>$_POST</varname></title>

    <note>
     <simpara>
      4.1.0부터 지원됨. 이전 버전에서는
      <varname>$HTTP_POST_VARS</varname>를 사용했슴.
     </simpara>
    </note>
    
    <simpara>
     HTTP POST 메소드를 통해 현재 스크립트에 전달되는 변수의 연관 배열.
     어떤 영역에서는 자동으로 전역화된다.
    </simpara>

    <simpara>
     이변수는 '슈퍼전역', 도는 자동 전역, 변수이다. 이 말의 의미는
     스크립트 내의 모든 영역에서 사용가능하다는 것이다. 
     <varname>$HTTP_POST_VARS</varname>를 사용할때와 마찬가지로,
     함수나 메소드에서 이 변수에 접근하기 위해
     <command>global $_POST;</command>를 사용할 필요는 없다.
    </simpara>

    <simpara>
     <varname>$HTTP_POST_VARS</varname>는 동일한 초기치 정보를 갖는다.
     그러나 자동전역이 아니다.
     (<varname>HTTP_POST_VARS</varname> 와 <varname>$_POST</varname>는
     다른 변수이며 PHP가 따로 다루게 된다는 것에 주의한다)
    </simpara>

    <simpara>
     <link linkend="ini.register-globals">register_globals</link> 디렉티브가
     설정되어있으면, 이변수는 스크립트의 전역 유효영역에서 사용가능해진다.
     즉,<varname>$_POST</varname>와 <varname>$HTTP_POST_VARS</varname> 배열에서
     독립적으로 사용된다. 관련 정보는,
     <link linkend="security.registerglobals">전역 등록 사용하기</link>라는
     보안 챕터를 참고한다. 이들 각각의 전역변수는 자동전역이 아니다.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.files">
    <title>HTTP File 업로드 변수: <varname>$_FILES</varname></title>
    
    <note>
     <simpara>
      4.1.0부터 지원됨. 이전 버전에서는
      <varname>$HTTP_POST_FILES</varname>를 사용했슴.
     </simpara>
    </note>
    
    <simpara>
     HTTP POST 메소드를 통해 현재 스크립트에 업로드되는 아이템의 연관 배열.
     어떤 영역에서는 자동으로 전역화된다.
    </simpara>

    <simpara>
     이변수는 '슈퍼전역', 도는 자동 전역, 변수이다. 이 말의 의미는
     스크립트 내의 모든 영역에서 사용가능하다는 것이다. 
     <varname>$HTTP_POST_FILES</varname>를 사용할때와 마찬가지로,
     함수나 메소드에서 이 변수에 접근하기 위해
     <command>global $_FILES;</command>를 사용할 필요는 없다.
    </simpara>

    <simpara>
     <varname>$HTTP_POST_FILES</varname>는 같은 정보를 갖고 있지만,
     자동 전역 변수가 아니다.
    </simpara>

    <simpara>
     <link linkend="ini.register-globals">register_globals</link> 디렉티브가
     설정되어있으면, 이변수는 스크립트의 전역 유효영역에서 사용가능해진다.
     즉,<varname>$_FILES</varname>와 <varname>$HTTP_POST_FILES</varname> 배열에서
     독립적으로 사용된다. 관련 정보는,
     <link linkend="security.registerglobals">전역 등록 사용하기</link>라는
     보안 챕터를 참고한다. 이들 각각의 전역변수는 자동전역이 아니다.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.request">
    <title>Request 변수: <varname>$_REQUEST</varname></title>

    <note>
     <simpara>
      4.1.0부터 지원됨. 이전 버전에서는 관련된 배열이 없다.
     </simpara>
    </note>
    <note>
     <simpara>
      PHP 4.3.0  이전에는 <varname>$_REQUEST</varname> 안에도
      <varname>$_FILES</varname> 정보가 포함되어 있었다.
     </simpara>
    </note>

    <simpara>
     <varname>$_GET</varname>, <varname>$_POST</varname>,
     <varname>$_COOKIE</varname>의 내용물로 구성된 연관 배열.
    </simpara>

    <simpara>
     이변수는 '슈퍼전역', 도는 자동 전역, 변수이다. 이 말의 의미는
     스크립트 내의 모든 영역에서 사용가능하다는 것이다. 
     함수나 메소드에서 이 변수에 접근하기 위해
     <command>global $_REQUEST;</command>를 사용할 필요는 없다.
    </simpara>

    <simpara>
     <link linkend="ini.register-globals">register_globals</link> 디렉티브가
     설정되어있으면, 이변수는 스크립트의 전역 유효영역에서 사용가능해진다.
     즉,<varname>$_REQUEST</varname> 배열에서 독립적으로 사용된다. 관련 정보는,
     <link linkend="security.registerglobals">전역 등록 사용하기</link>라는
     보안 챕터를 참고한다. 이들 각각의 전역변수는 자동전역이 아니다.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.session">
    <title>세션 변수: <varname>$_SESSION</varname></title>

    <note>
     <simpara>
      4.1.0부터 지원됨. 이전 버전에서는
      <varname>$HTTP_SESSION_VARS</varname>를 사용했슴.
     </simpara>
    </note>
    
    <simpara>
     현재 스크립트에서 사용가능한 세션 변수를 포함하는 연관배열.
     이 변수를 사용하는 방법에 대한 자세한 정보는 
     <link linkend="ref.session">Session functions</link> 문서를 참고.
    </simpara>

    <simpara>
     이변수는 '슈퍼전역', 도는 자동 전역, 변수이다. 이 말의 의미는
     스크립트 내의 모든 영역에서 사용가능하다는 것이다. 
     <varname>$HTTP_SESSION_VARS</varname>를 사용할때와 마찬가지로,
     함수나 메소드에서 이 변수에 접근하기 위해
     <command>global $_SESSION;</command>를 사용할 필요는 없다.
    </simpara>

    <simpara>
     <varname>$HTTP_SESSION_VARS</varname>는 같은 정보를 갖고 있지만,
     자동 전역 변수가 아니다.
    </simpara>

    <simpara>
     <link linkend="ini.register-globals">register_globals</link> 디렉티브가
     설정되어있으면, 이변수는 스크립트의 전역 유효영역에서 사용가능해진다.
     즉,<varname>$_SESSION</varname>와 <varname>$HTTP_SESSION_FILES</varname> 배열에서
     독립적으로 사용된다. 관련 정보는,
     <link linkend="security.registerglobals">전역 등록 사용하기</link>라는
     보안 챕터를 참고한다. 이들 각각의 전역변수는 자동전역이 아니다.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.globals">
    <title>Global 변수: <varname>$GLOBALS</varname></title>

    <note>
     <simpara>
      <varname>$GLOBALS</varname> PHP 3.0.0부터 지원되었다.
     </simpara>
    </note>
    
    <simpara>
     현재 스크립트의 전역 유효영역내에서 선언되어있는 모든변수에 대한
     참조를 포함하는 연관배열이다. 변수명은 배열의 키로 사용된다.
    </simpara>

    <simpara>
     이변수는 '슈퍼전역', 도는 자동 전역, 변수이다. 이 말의 의미는
     스크립트 내의 모든 영역에서 사용가능하다는 것이다. 
     함수나 메소드에서 이 변수에 접근하기 위해
     <command>global $GLOBALS;</command>를 사용할 필요는 없다.
    </simpara>

   </sect2>

   <sect2 id="reserved.variables.phperrormsg">
    <title>이전 에러 메시지: <varname>$php_errormsg</varname></title>
    <simpara>
     <varname>$php_errormsg</varname>는 PHP에 의해 생성되는 가장
     최근의 에러 메시지 텍스트를 포함하는 변수이다. 이변수는
     에러가 발생한 영역내에서만 유효하다.
     그리고, <link linkend="ini.track-errors">track_errors</link> 설정
     옵션이 on되어있어야 한다(초기값은 off이다)
    </simpara>
   </sect2>
  </sect1>


  <sect1 id="reserved.classes">
   <title>기선언 클래스</title>

   <sect2 id="reserved.classes.standard">
    <title>기본적인 선언 클래스</title>

    <simpara>
     이 클래스는 PHP 빌드에 포함되어있는 표준 함수 모음에 선언된다.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>Directory</classname></term>
      <listitem>
       <simpara>
        The class from which <link linkend="class.dir">dir</link> is instantiated.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>stdClass</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>__PHP_Incomplete_Class</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>
   
   <sect2 id="reserved.classes.php5">
    <title>PHP 5의 기선언 클래스</title>
    
    <simpara>
     여기 추가된 기선언 클래스는 PHP 5.0.0에서 소개되었다.
    </simpara>
    
    <variablelist>
     <varlistentry>
      <term><classname>exception</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>php_user_filter</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.ming">
    <title><link linkend="ref.ming">Ming</link> 선언 클래스</title>

    <simpara>
     이 클래스는 <link linkend="ref.ming">Ming</link> 확장에서 정의되었다.
     그래서 이 확장이 PHP와 같이 컴파일되었거나 런타임에서 동적으로 로드되야만
     사용가능하다.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>swfshape</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swffill</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfgradient</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfbitmap</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swftext</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swftextfield</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swffont</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfdisplayitem</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfmovie</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfbutton</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfaction</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfmorph</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfsprite</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.oci8">
    <title><link linkend="ref.oci8">Oracle 8</link> 선언 클래스</title>

    <simpara>
     이 클래스는 <link linkend="ref.oci8">Oracle 8</link> 확장에서 정의되었다.
     그래서 이 확장이 PHP와 같이 컴파일되었거나 런타임에서 동적으로 로드되야만
     사용가능하다.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>OCI-Lob</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>OCI-Collection</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.qtdom">
    <title><link linkend="ref.qtdom">qtdom</link> 선언 클래스</title>

    <simpara>
     이 클래스는 <link linkend="ref.qtdom">qtdom</link> 확장에서 정의되었다.
     그래서 이 확장이 PHP와 같이 컴파일되었거나 런타임에서 동적으로 로드되야만
     사용가능하다.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>QDomDocument</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>QDomNode</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

  </sect1>

  &appendices.reserved.constants;

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
