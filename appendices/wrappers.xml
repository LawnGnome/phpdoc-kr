<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.22 -->
<appendix id="wrappers">
 <title>지원 프로토콜/래퍼 목록</title>
 <para>
  다음은 <function>fopen</function> 과 <function>copy</function>같은 파일시스템
  함수용으로 내장된 PHP의 다양한 URL 스타일 프로토콜의 목록이다.
  이런 래퍼들은 물론, <literal>PHP 4.3.0</literal>에서는,
  PHP 스크립트와 <function>stream_register_wrapper</function>를 사용하는 자신의
  래퍼를 작성할수 있다.
 </para>

 <section id="wrappers.http">
  <title>HTTP 와 HTTPS</title>
   <simpara>
    PHP 3, PHP 4.  <literal>PHP 4.3.0</literal> 이후의 <filename>https://</filename>
   </simpara>

  <itemizedlist>
   <listitem><simpara><filename>http://example.com</filename></simpara></listitem>
   <listitem><simpara><filename>http://user:password@example.com</filename></simpara></listitem>
   <listitem><simpara><filename>https://example.com</filename></simpara></listitem>
   <listitem><simpara><filename>https://user:password@example.com</filename></simpara></listitem>
  </itemizedlist>

  <simpara>
   HTTP GET 메소드를 사용하여, HTTP 1.0으로 파일/자원의 읽기-전용
   권한이 허용된다. <literal>Host:</literal> 헤더는 name-based 가상 호스트를
   제어하기 위한 요청으로 보내진다. ini 파일이나 스트림 환경을 사용하여
   <link linkend="ini.user-agent">user_agent</link> 문자열을 설정할수 있다면,
   그 요청에 같이 포함되어질것이다.
  </simpara>
  <simpara>
   리다이렉트(Redirect)는 PHP 4.0.5이후부터 지원되었다; 이전 버전을
   사용중이라면 URL의 뒤에 슬래쉬를 포함할 필요가 있을것이다.
  </simpara>
  <simpara>
   스트림은 리소스의 <emphasis>body</emphasis>에 접속할 권한이 있다;
   헤더는 <varname>$http_response_header</varname> 변수에 저장된다.
   <literal>PHP 4.3.0</literal> 이후부터, 헤더는 
   <function>stream_get_meta_data</function>를 사용하여 이용가능하다.
  </simpara>
  <simpara>
   HTTP 접속은 읽기-전용이다; HTTP 리소스에 데이터를 쓰거나 파일을
   복사할수 없다.
  </simpara>
  <note>
   <simpara>
    HTTPS는 <literal>PHP 4.3.0</literal>부터 지원되었다. 
    OpenSSL에 대한 지원 옵션으로 컴파일해야 한다.
   </simpara>
  </note>
  <para>
   <table>
    <title>Wrapper Summary</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Attribute</entry>
       <entry>Supported</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>Restricted by <literal>allow_url_fopen</literal>.</entry>
       <entry>Yes</entry>
      </row>
      <row>
       <entry>Allows Reading</entry>
       <entry>Yes</entry>
      </row>
      <row>
       <entry>Allows Writing</entry>
       <entry>No</entry>
      </row>
      <row>
       <entry>Allows Appending</entry>
       <entry>No</entry>
      </row>
      <row>
       <entry>Allows Simultaneous Reading and Writing</entry>
       <entry>N/A</entry>
      </row>
      <row>
       <entry>Supports <function>stat</function></entry>
       <entry>No</entry>
      </row>
      <row>
       <entry>Supports <function>unlink</function></entry>
       <entry>No</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
  <para>
   <table>
    <title>Context options (as of <literal>PHP 5.0.0</literal>)</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Name</entry>
       <entry>Usage</entry>
       <entry>Default</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><literal>method</literal></entry>
       <entry>
        <constant>GET</constant>, <constant>POST</constant>, or
        any other HTTP method supported by the remote server.
       </entry>
       <entry><constant>GET</constant></entry>
      </row>
      <row>
       <entry><literal>header</literal></entry>
       <entry>Additional headers to be sent during request.  Values
        in this option will override other values (such as
        <literal>User-agent:</literal>, <literal>Host:</literal>,
        and <literal>Authentication:</literal>.
       </entry>
       <entry></entry>
      </row>
      <row>
       <entry><literal>user_agent</literal></entry>
       <entry>Value to send with User-Agent: header.  This value will
        only be used if user-agent is <emphasis>not</emphasis> specified
        in the <literal>header</literal> context option above.  
       </entry>
       <entry>
        &php.ini; setting: <literal>user_agent</literal>
       </entry>
      </row>
      <row>
       <entry><literal>content</literal></entry>
       <entry>
        Additional data to be sent after the headers.  Typically used
        with POST or PUT requests.
       </entry>
       <entry></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>

  <note>
   <title>Underlying socket stream context options</title>
   <simpara>
    Additional context options may be supported by the 
    <link linkend="transports.inet">underlying transport</link>
    For <literal>http://</literal> streams, refer to context
    options for the <literal>tcp://</literal> transport.  For
    <literal>https://</literal> streams, refer to context options
    for the <literal>ssl://</literal> transport.
   </simpara>
  </note>
 </section>

 <section id="wrappers.ftp">
  <title>FTP and FTPS</title>
  <simpara>PHP 3, PHP 4.  <filename>ftps://</filename> since <literal>PHP 4.3.0</literal></simpara>

  <itemizedlist>
   <listitem><simpara><filename>ftp://example.com/pub/file.txt</filename></simpara></listitem>
   <listitem><simpara><filename>ftp://user:password@example.com/pub/file.txt</filename></simpara></listitem>
   <listitem><simpara><filename>ftps://example.com/pub/file.txt</filename></simpara></listitem>
   <listitem><simpara><filename>ftps://user:password@example.com/pub/file.txt</filename></simpara></listitem>
  </itemizedlist>

  <simpara>
   Allows read access to existing files and creation of new files
   via FTP.  If the server does not support passive mode ftp, the
   connection will fail.
  </simpara>
  <simpara>
   You can open files for either reading or writing, but not both
   simultaneously.  If the remote file already exists on the ftp
   server and you attempt to open it for writing but have not specified
   the context option <literal>overwrite</literal>, the connection
   will fail.  If you need to overwrite existing files over ftp,
   specify the <literal>overwrite</literal> option in the context 
   and open the file for writing.  Alternatively, you can
   use the <link linkend="ref.ftp">FTP extension</link>.
  </simpara>
  <note>
   <title>Appending</title>
   <simpara>
    As of <literal>PHP 5.0.0</literal> files may be appended via the
    <literal>ftp://</literal> url wrapper.  In prior versions, attempting
    to append to a file via <literal>ftp://</literal> will result in failure.
   </simpara>
  </note>
  <simpara>
   <filename>ftps://</filename> was introduced in <literal>PHP 4.3.0</literal>.  
   It is the same as <filename>ftp://</filename>,
   but attempts to negotiate a secure connection with the ftp server.
   If the server does not support SSL, then the connection falls back
   to regular unencrypted ftp.
  </simpara>
  <note>
   <simpara>FTPS is supported starting from <literal>PHP 4.3.0</literal>, if you
    have compiled in support for OpenSSL.
   </simpara>
  </note>
  <para>
   <table>
    <title>Wrapper Summary</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Attribute</entry>
       <entry>Supported</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>Restricted by <literal>allow_url_fopen</literal>.</entry>
       <entry>Yes</entry>
      </row>
      <row>
       <entry>Allows Reading</entry>
       <entry>Yes</entry>
      </row>
      <row>
       <entry>Allows Writing</entry>
       <entry>
        Yes (Prior to <literal>PHP 5.0.0</literal>: new files only.
        <literal>PHP 5.0.0</literal> and later: overwrite allowed
        with context option)
       </entry>
      </row>
      <row>
       <entry>Allows Appending</entry>
       <entry>Yes (<literal>PHP 5.0.0</literal> or later)</entry>
      </row>
      <row>
       <entry>Allows Simultaneous Reading and Writing</entry>
       <entry>No</entry>
      </row>
      <row>
       <entry>Supports <function>stat</function></entry>
       <entry>No</entry>
      </row>
      <row>
       <entry>Supports <function>unlink</function></entry>
       <entry>Yes (<literal>PHP 5.0.0</literal> or later)</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
  <para>
   <table>
    <title>Context options (as of <literal>PHP 5.0.0</literal>)</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Name</entry>
       <entry>Usage</entry>
       <entry>Default</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><literal>overwrite</literal></entry>
       <entry>
        Allow overwriting of already existing files on remote server.
       </entry>
       <entry>&false; (Disabled)</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
  <note>
   <title>Underlying socket stream context options</title>
   <simpara>
    Additional context options may be supported by the 
    <link linkend="transports.inet">underlying transport</link>
    For <literal>ftp://</literal> streams, refer to context
    options for the <literal>tcp://</literal> transport.  For
    <literal>ftps://</literal> streams, refer to context options
    for the <literal>ssl://</literal> transport.
   </simpara>
  </note>
 </section>

 <section id="wrappers.php">
  <title>PHP input/output streams</title>
  <simpara>
   <literal>PHP 3.0.13</literal> and up, <filename>php://output</filename> 
   and <filename>php://input</filename> since <literal>PHP 4.3.0</literal>,
   <filename>php://filter</filename> since <literal>PHP 5.0.0</literal>
  </simpara>

  <itemizedlist>
   <listitem><simpara><filename>php://stdin</filename></simpara></listitem>
   <listitem><simpara><filename>php://stdout</filename></simpara></listitem>
   <listitem><simpara><filename>php://stderr</filename></simpara></listitem>
   <listitem><simpara><filename>php://output</filename></simpara></listitem>
   <listitem><simpara><filename>php://input</filename></simpara></listitem>
   <listitem><simpara><filename>php://filter</filename></simpara></listitem>
  </itemizedlist>

  <simpara>
   <filename>php://stdin</filename>, <filename>php://stdout</filename> 
   and <filename>php://stderr</filename> allow access to
   the corresponding input or output stream of the PHP process.
  </simpara>
  <simpara>
   <filename>php://output</filename> allows you to write to the
   output buffer mechanism in the same way as
   <function>print</function> and <function>echo</function>.
  </simpara>
  <simpara>
   <filename>php://input</filename> allows you to read raw POST data.
   It is a less memory intensive alternative to
   <varname>$HTTP_RAW_POST_DATA</varname> and does not need any
   special &php.ini; directives.
  </simpara>
  <simpara>
   <filename>php://stdin</filename> and
   <filename>php://input</filename> are read-only, whereas
   <filename>php://stdout</filename>,
   <filename>php://stderr</filename> and
   <filename>php://output</filename> are write-only.
  </simpara>

  <simpara>
   <filename>php://filter</filename> is a kind of meta-wrapper designed
   to permit the application of filters to a stream at the time of 
   opening.  This is useful with all-in-one file functions such as
   <function>readfile</function>, <function>file</function>, and
   <function>file_get_contents</function> where there is otherwise
   no opporotunity to apply a filter to the stream prior the contents
   being read.
  </simpara>
  <simpara>
   The <filename>php://filter</filename> target takes the following 
   &apos;parameters&apos; as parts of its &apos;path&apos;.
  </simpara>
  <itemizedlist>
   <listitem>
    <para>
     <literal>/resource=&lt;stream to be filtered&gt;</literal>
     (<emphasis>required</emphasis>)  This parameter must be located at
     the end of your <filename>php://filter</filename> specification and
     should point to the stream which you want filtered.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
/* This is equivalent to simply:
   readfile("http://www.example.com");
   since no filters are actually specified */

readfile("php://filter/resource=http://www.example.com");
?>
]]>
      </programlisting>
     </informalexample>
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>/read=&lt;filter list to apply to read chain&gt;</literal>
     (<emphasis>optional</emphasis>)  This parameter takes one or more
     filternames separated by the pipe character <literal>|</literal>.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
/* This will output the contents of 
   www.example.com entirely in uppercase */
readfile("php://filter/read=string.toupper/resource=http://www.example.com");

/* This will do the same as above
   but will also ROT13 encode it */
readfile("php://filter/read=string.toupper|string.rot13/resource=http://www.example.com");
?>
]]>
      </programlisting>
     </informalexample>
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>/write=&lt;filter list to apply to write chain&gt;</literal>
     (<emphasis>optional</emphasis>)  This parameter takes one or more
     filternames separated by the pipe character <literal>|</literal>.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
/* This will filter the string "Hello World"
   through the rot13 filter, then write to
   example.txt in the current directory */
file_set_contents("php://filter/write=string.rot13/resource=example.txt","Hello World");
?>
]]>
      </programlisting>
     </informalexample>
    </para>
   </listitem>
   <listitem>
    <simpara>
     <literal>/&lt;filter list to apply to both chains&gt;</literal>
     (<emphasis>optional</emphasis>)  Any filter lists which are not
     prefixed specifically by <literal>read=</literal> or 
     <literal>write=</literal> will be applied to both the read and
     write chains (as appropriate).
    </simpara>
   </listitem>
  </itemizedlist>
  <para>
   <table>
    <title>
     Wrapper Summary (For <literal>php://filter</literal>, 
     refer to summary of wrapper being filtered.)
    </title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Attribute</entry>
       <entry>Supported</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>Restricted by <literal>allow_url_fopen</literal>.</entry>
       <entry>No</entry>
      </row>
      <row>
       <entry>Allows Reading</entry>
       <entry>
        <literal>php://stdin</literal> and 
        <literal>php://input</literal> only.
       </entry>
      </row>
      <row>
       <entry>Allows Writing</entry>
       <entry>
        <literal>php://stdout</literal>,
        <literal>php://stderr</literal>, and 
        <literal>php://output</literal> only.
       </entry>
      </row>
      <row>
       <entry>Allows Appending</entry>
       <entry>
        <literal>php://stdout</literal>,
        <literal>php://stderr</literal>, and 
        <literal>php://output</literal> only. (Equivalent to writing)
       </entry>
      </row>
      <row>
       <entry>Allows Simultaneous Reading and Writing</entry>
       <entry>No.  These wrappers are unidirectional.</entry>
      </row>
      <row>
       <entry>Supports <function>stat</function></entry>
       <entry>No</entry>
      </row>
      <row>
       <entry>Supports <function>unlink</function></entry>
       <entry>No</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
 </section>

 <section id="wrappers.compression">
  <title>Compression Streams</title>
  <simpara><filename>zlib:</filename> PHP 4.0.4 - PHP 4.2.3 (systems with fopencookie only)</simpara>
  <simpara><filename>compress.zlib://</filename> and <filename>compress.bzip2://</filename> PHP 4.3.0 and up</simpara>

  <itemizedlist>
   <listitem><simpara><filename>zlib:</filename></simpara></listitem>
   <listitem><simpara><filename>compress.zlib://</filename></simpara></listitem>
   <listitem><simpara><filename>compress.bzip2://</filename></simpara></listitem>
  </itemizedlist>

  <simpara> 
   <filename>zlib:</filename> works like <function>gzopen</function>, except that the
   stream can be used with <function>fread</function> and the other
   filesystem functions.  This is deprecated as of <literal>PHP 4.3.0</literal> due
   to ambiguities with filenames containing ':' characters; use
   <filename>compress.zlib://</filename> instead.
  </simpara>

  <simpara>
   <filename>compress.zlib://</filename> and
   <filename>compress.bzip2://</filename> are equivalent to
   <function>gzopen</function> and <function>bzopen</function>
   respectively, and operate even on systems that do not support
   fopencookie.
  </simpara>
  <para>
   <table>
    <title>Wrapper Summary</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Attribute</entry>
       <entry>Supported</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>Restricted by <literal>allow_url_fopen</literal>.</entry>
       <entry>No</entry>
      </row>
      <row>
       <entry>Allows Reading</entry>
       <entry>Yes</entry>
      </row>
      <row>
       <entry>Allows Writing</entry>
       <entry>Yes</entry>
      </row>
      <row>
       <entry>Allows Appending</entry>
       <entry>Yes</entry>
      </row>
      <row>
       <entry>Allows Simultaneous Reading and Writing</entry>
       <entry>No</entry>
      </row>
      <row>
       <entry>Supports <function>stat</function></entry>
       <entry>
        No, use the normal <literal>file://</literal> wrapper 
        to stat compressed files.
       </entry>
      </row>
      <row>
       <entry>Supports <function>unlink</function></entry>
       <entry>
        No, use the normal <literal>file://</literal> wrapper 
        to unlink compressed files.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
 </section>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
