<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.8 $ -->
 <chapter id="introduction">
  <title>소개</title>

  <sect1 id="intro-whatis">
   <title>PHP란 무엇인가?</title>
   <para>
    <acronym>PHP</acronym>(정식 명칭 "PHP: Hypertext
    Preprocessor")는 범용성을 지닌 널리 사용되는 오픈 소스
    스크립트 언어입니다. 특히, 웹 개발 및 HTML에 포함하기에 적합합니다.
   </para>
   <para>
    간단한 답이지만, 무엇을 의미할까? 다음 예를 보자:
   </para>
   <para>
    <example>
     <title>소개용 예문</title>
     <programlisting role="php">
<![CDATA[
<html>
    <head>
        <title>예제</title>
    </head>
    <body>

        <?php 
        echo "안녕, 나는 PHP 스크립트야!"; 
        ?>

    </body>
</html>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Perl이나 C와 같은 다른 언어로 쓰여진 스크립트와 다른점을 알아보자
    -- HTML을 출력하기 위해서 많은 프로그램 명령어를 쓰는 대신,
    무언가를 하기 위해 몇가지 추가 코드가 포함된 HTML 스크립트를 작성하면 된다.
    (여기서는, 약간의 텍스트를 출력한다) PHP코드는 "PHP 모드"로 들어가고 나올 수 있는
    특별한 <link linkend="language.basic-syntax.phpmode">시작과 끝 태그</link>에 포함되어 있다.
   </para>

   <para>
    PHP가 클라이언트측 자바스크립트 등과 구별되는 점은 이 코드는 서버에서
    실행된다는 점이다. 위와 같은 스크립트를 서버에서 실행되면, 클라이언트는
    스크립트의 결과만을 받을 뿐이며, 그 코드가 어떤 모습인지는 알 수가 없다.
    심지어 모든 HTML 파일을 PHP로 실행되도록 웹 서버를 설정할 수 있으며,
    그러면 유저들은 당신이 무슨 일을 하는지 전혀 알 수가 없다.
   </para>
   <para>
    PHP를 사용하는 가장 큰 이득은 초보에게는 매우 쉽고, 전문가에게는
    많은 고급 기능을 제공한다는 점이다. PHP 기능의 긴 리스트를 읽는
    것을 두려워하지 말라. 그냥 뛰어들면 짧은 시간 안에 간단한 스크립트를
    작성할 수 있게 될것이다.
   </para>
   <para>
    PHP의 개발은 서버측 스크립팅에 초점이 맞추어져 있지만, 그보다
    더 많은 것들을 할 수 있다. <link linkend="intro-whatcando">PHP는
    무엇을 할 수 있는가?</link> 섹션을 읽으면 더 많은 정보를 얻을 수 있다.
   </para>
  </sect1>

  <sect1 id="intro-whatcando">
   <title>PHP는 무엇을 할 수 있는가?</title>
   <para>
    무엇이든지. PHP는 서버측 스크립팅에 중점을 두고 있어서,
    다른 CGI 프로그램이 하는 모든 것을 할 수 있다.
    예를 들면, 폼 데이터를 수집하거나, 동적인 페이지 콘텐츠를 만들거나
    쿠키를 보내고 받을 수도 있다. 그리고 PHP는 더 많은 것들을 할 수 있다.
   </para>
   <para>
    PHP 스크립트가 사용되는 세가지 중점 영역이 있다.
    <itemizedlist>
     <listitem>
      <simpara>
       서버측 스크립팅. 이것은 PHP에서 가장 오래되고, 중점적인 영역이다.
       이 일을 위해서는 세가지가 필요하다. PHP 파서 (CGI나 서버 모듈),
       웹서버, 그리고 웹 브라우저. PHP가 설치 되어있는 웹서버를 실행시킬
       필요가 있다. 웹 브라우저로 서버에 있는 PHP 페이지를 보는 것으로
       PHP 프로그램 출력에 접근하게 된다. 더 많은 정보를 위해서는 <link
       linkend="installation">설치 안내</link> 섹션을 참고하라.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       커맨드 라인 스크립팅. 어떤 서버나 브라우저 없이 PHP 스크립트를
       실행하게 할 수 있다. 이 때에는 PHP 파서만 있으면 된다.
       이런 사용법은 스크립트를 cron(*nix나 Linux에서)이나 작업
       관리자(Windows에서)를 사용해 실행하는 것과 동일하다. 이런 스크립트들은
       간단한 텍스트 처리 작업에 사용될 수도 있다. 더 많은 정보를 위해서는
       <link linkend="features.commandline">PHP의 커맨드 라인 사용법</link>
       섹션을 참고하라.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       클라이언트측 GUI 어플리케이션의 작성. PHP는 그래픽 어플리케이션
       작성을 위한 최고의 언어는 아닐것이지만, PHP를 매우 잘 이해하고
       있고, 클리이언트측 어플리케이션에 PHP의 고급 기능을 이용하고 싶다면
       PHP-GTK를 이용해서 그런 프로그램을 작성할 수 있다. 이 방법으로
       플래폼에 관계 없이 작동하는 어플리케이션을 작성할 수도 있다.
       PHP-GTK는 PHP의 확장으로써 배포판에는 포함되어 있지 않다.
       PHP-GTK에 흥미가 있다면, <ulink url="&url.php.gtk;">PHP-GTK
       웹사이트</ulink>를 방문해 보라.
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    PHP can be used on all major operating systems, including
    Linux, many Unix variants (including HP-UX, Solaris and OpenBSD),
    Microsoft Windows, Mac OS X, RISC OS, and probably others.
    PHP has also support for most of the web servers today. This
    includes Apache, Microsoft Internet Information Server,
    Personal Web Server, Netscape and iPlanet servers, Oreilly
    Website Pro server, Caudium, Xitami, OmniHTTPd, and many
    others. For the majority of the servers PHP has a module,
    for the others supporting the CGI standard, PHP can work
    as a CGI processor.
   </para>
   <para>
    So with PHP, you have the freedom of choosing an operating
    system and a web server. Furthermore, you also have the choice
    of using procedural programming or object oriented
    programming, or a mixture of them. Although not every
    standard OOP feature is realized in the current version
    of PHP, many code libraries and large applications (including the
    PEAR library) are written only using OOP code.
   </para>
   <para>
    With PHP you are not limited to output HTML. PHP's abilities
    includes outputting images, PDF files and even Flash movies
    (using libswf and Ming) generated on the fly. You can also
    output easily any text, such as XHTML and any other XML file.
    PHP can autogenerate these files, and save them in the file
    system, instead of printing it out, forming a server-side
    cache for your dynamic content.
   </para>
   <para>
    One of the strongest and most significant feature in PHP is its
    support for a wide range of databases. Writing a database-enabled
    web page is incredibly simple. The following databases are currently
    supported:
    <blockquote>
     <simplelist columns="3">
      <member>Adabas D</member>
      <member>dBase</member>
      <member>Empress</member>
      <member>FilePro (read-only)</member>
      <member>Hyperwave</member>
      <member>IBM DB2</member>
      <member>Informix</member>
      <member>Ingres</member>
      <member>InterBase</member>
      <member>FrontBase</member>
      <member>mSQL</member>
      <member>Direct MS-SQL</member>
      <member>MySQL</member>
      <member>ODBC</member>
      <member>Oracle (OCI7 and OCI8)</member>
      <member>Ovrimos</member>
      <member>PostgreSQL</member>
      <member>Solid</member>
      <member>Sybase</member>
      <member>Velocis</member>
      <member>Unix dbm</member>
     </simplelist>
    </blockquote>
    We also have a DBX database abstraction extension allowing you
    to transparently use any database supported by that extension.
    Additionally PHP supports ODBC, the Open Database Connection
    standard, so you can connect to any other database supporting
    this world standard.
   </para>
   <para>
    PHP also has support for talking to other services using protocols
    such as LDAP, IMAP, SNMP, NNTP, POP3, HTTP, COM (on Windows) and
    countless others. You can also open raw network sockets and
    interact using any other protocol. PHP has support for the WDDX
    complex data exchange between virtually all Web programming
    languages. Talking about interconnection, PHP has support for
    instantiation of Java objects and using them transparently
    as PHP objects. You can also use our CORBA extension to
    access remote objects.
   </para>
   <para>
    PHP has extremely useful text processing features, from the
    POSIX Extended or Perl regular expressions to parsing XML
    documents. For parsing and accessing XML documents, we
    support the SAX and DOM standards. You can use our XSLT
    extension to transform XML documents.
   </para>
   <para>
    While using PHP in the ecommerce field, you'll find
    the Cybercash payment, CyberMUT, VeriSign Payflow
    Pro and CCVS functions useful for your online payment
    programs.
   </para>
   <para>
    At last but not least, we have many other interesting
    extensions, the mnoGoSearch search engine functions,
    the IRC Gateway functions, many compression utilities
    (gzip, bz2), calendar conversion, translation...
   </para>
   <para>
    As you can see this page is not enough to list all
    the features and benefits PHP can offer. Read on in
    the sections about <link linkend="installation">installing
    PHP</link>, and see the <link linkend="funcref">function
    reference</link> part for explanation of the extensions
    mentioned here.
   </para>
  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
