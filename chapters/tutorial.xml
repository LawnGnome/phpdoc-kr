<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: n/a Maintainer: progcom Status: ready -->
 <chapter xml:id="tutorial" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <info><title>간단한 튜토리얼</title></info>

  <para>
   짧고 간단한 튜토리얼로 PHP의 가장 기초가 되는 부분을 보여드립니다. PHP는
   웹페이지를 만들 때만 사용하는 것은 아니지만, 여기서는 PHP로 동적 웹페이지를
   만드는 내용에 대해서만 다룹니다. <link linkend="intro-whatcando">PHP로 할
    수 있는 것들</link> 섹션에서 더 많은 정보를 얻을 수 있습니다.
  </para>
  <para>
   PHP를 포함한 웹 페이지는 보통의 HTML 페이지와 같이 취급합니다. 그러므로,
   보통의 HTML 페이지를 만드는 것과 같은 방법으로 작성할 수 있습니다.
  </para>

  <section xml:id="tutorial.requirements">
   <info><title>무엇이 필요한가?</title></info>
   <para>
    이 튜토리얼은 서버가 PHP를 지원하고, <filename>.php</filename> 확장자를
    가지는 모든 파일을 PHP로 다루고 있다고 가정합니다. 대부분의 서버에서 이는
    PHP의 기본 확장자입니다만, 확인하기 위해서 서버 관리자에게 문의해보십시오.
    서버가 PHP를 지원하고 있다면, 더 이상 준비할 것은 없습니다. 단순히
    <filename>.php</filename> 파일을 만들어서 웹 디렉토리에 넣으면, 서버가
    자동적으로 처리합니다. 컴파일할 필요도 없고, 별도의 툴을 설치할 필요도
    없습니다. PHP를 포함한 파일을, 모든 일을 할 수 있는 마법의 태그를 가진
    단순한 HTML 파일이라고 생각하십시오. 대부분의 웹 호스트는 PHP를
    지원하지만, 지원하지 않을 경우에는 <link xlink:href="&url.php.links;">PHP
     링크</link> 섹션에서 PHP를 지원하는 웹 호스트에 대한 정보를 얻을 수
    있습니다.
   </para>
   <para>
    대역폭을 보존하기 위해 로컬 영역에서 개발하고 싶을 수도 있습니다. 이
    경우에는, <link xlink:href="&url.apache;">아파치</link> 등의 웹 서버와 함께
    <link xlink:href="&url.php.downloads;">PHP</link>를 설치할 수 있습니다.
    원한다면 <link xlink:href="&url.mysql.docs;">MySQL</link> 등의
    데이터베이스를 설치할 수도 있습니다.
   </para>
   <para>
    이들은 개별적으로 설치하거나, 보다 간단한 방법을 이용할 수 있습니다.
    매뉴얼에는 <link linkend="install">PHP 설치 안내</link>(이미 설치한 몇몇
    웹 서버를 따라서)가 있습니다. 이 경우, PHP 설치시에 문제가 있다면,
    <link xlink:href="&url.php.mailing-lists;">설치 메일링 리스트</link>를 통하여 질문을 할 수 있습니다. 보다 간단한 길을 간다면, 사용하는 OS를 위한 <link
     xlink:href="&url.installkits;">미리 설정된 패키지</link>를 사용하여, 이
    모든 것을 간단한 마우스 클릭만으로 설치할 수 있습니다. MacOSX, 리눅스,
    윈도우를 포함하여, 어떠한 운영 체제 아래에서도 간단히 PHP를 지원하는 웹
    서버를 설정합니다. 리눅스에서는, <link
     xlink:href="&url.rpmfind;">rpmfind</link>와 <link
     xlink:href="&url.rpmfind.pbone;">PBone</link>이 RPM을 찾을 때 유용합니다.
    <link xlink:href="&url.apt-get;">apt-get</link>에서 데비안 패키지를
    찾을 수 있습니다.
   </para>
  </section>

  <section xml:id="tutorial.firstpage">
   <info><title>첫번째 PHP 실행 페이지</title></info>
   <para>
    다음에 쓰여진 내용으로 <filename>hello.php</filename>를 만들고,
    웹서버의 루트 디렉토리(<varname>DOCUMENT_ROOT</varname>)에 놓습니다.
   </para>
   <para>
    <example>
     <info><title>첫번째 PHP 스크립트:
       <filename>hello.php</filename></title></info>
     <programlisting role="php">
<![CDATA[
<html>
 <head>
  <title>PHP 테스트</title>
 </head>
 <body>
 <?php echo '<p>Hello World</p>'; ?> 
 </body>
</html>
]]>
     </programlisting>
     <simpara>
      웹 브라우저를 이용해서 "/hello.php"에 접근합니다. 로컬에서 개발한다면
      URL은 보통 <literal>http://localhost/hello.php</literal>이나
      <literal>http://127.0.0.1/hello.php</literal>일 것이지만, 이는 웹 서버
      설정에 따라 달리집니다. 모두 제대로 되었다면, 이 파일은 PHP에 의해
      처리되어 다음 출력을 브라우저로 전송합니다:
     </simpara>
     <screen role="html">
<![CDATA[
<html>
 <head>
  <title>PHP 테스트</title>
 </head>
 <body>
 <p>Hello World</p> 
 </body>
</html>
]]>
     </screen>
    </example>
   </para>
   <para>
    이 프로그램은 매우 간단해서, 실제로 이런 페이지를 만들기 위해서 PHP를
    사용할 필요는 없습니다. 이 프로그램은 <literal>Hello World</literal>를
    PHP <function>echo</function> 표현으로 보여주기만 할 뿐입니다. 파일에
    <emphasis>실행 권한을 줄 필요도 없고</emphasis>, 어떠한 특별한 처리를 할
    필요도 없습니다. 서버는 ".php" 확장을 사용하였기 때문에, 이 파일을 PHP를
    통해 처리해야 한다고 인식합니다. 이를 많은 일들을 가능하게 하는 특별한
    태그를 가진 일반적인 HTML 파일로 생각하십시오.
   </para>
   <para>
    이 예제를 실행했을 때, 아무것도 출력하지 않거나, 다운로드 할 것인지 묻거나,
    모든 내용이 텍스트 문서처럼 보였다면, 그 서버에서 PHP가 작동하지 않거나
    제대로 설정되지 않은 것입니다. 서버 관리자에게 매뉴얼의 <link
     linkend="install">설치</link> 장을 참고하여 PHP를 사용할 수
    있게 해달라고 요청하십시오. http를 통하여, 서버가 출력을 제공하도록
    접근하고 있는지 확인하십시오. 단순히 파일 시스템에서 읽어들인다면, PHP를
    통하여 처리되지 않습니다. 문제가 계속된다면, 망설이지 말고 <link
     xlink:href="&url.php.support;">PHP 지원</link>을 이용하십시오.
   </para>
   <para>
    예제의 초점은 특별한 PHP 태그를 보여주는 것입니다. 이 예제에서
    <literal>&lt;?php</literal>가 PHP 태그의 시작을 알립니다. 그러면 PHP
    상태로 돌입하게 되고, 종료 태그인 <literal>?&gt;</literal>에 의해 PHP
    모드를 떠나게 됩니다. HTML 파일 어디에서라도 이런 방법으로 PHP 모드로
    들어가고, 나올 수 있습니다. 더 자세한 내용은 매뉴얼에서
    <link linkend="language.basic-syntax">기본 PHP 문법</link> 섹션을
    읽어보십시오.
   </para>

   <note>
    <info><title>줄바꿈에 대한 주의</title></info>
    <para>
     HTML에서 줄바꿈은 약간의 의미를 가지지만, 줄바꿈을 넣어서 HTML을 깔끔하게
     보이게 하는 건 좋은 생각입니다. <literal>?&gt;</literal> 바로 뒤에
     따라오는 줄바꿈은 PHP가 제거합니다. 이는 많은 PHP 블록을 쓰거나, 아무것도
     출력하지 않는 PHP 파일을 포함할 때 매우 유용합니다. 반면, 약간 혼동할
     수도 있습니다. <literal>?&gt;</literal>로 닫은 뒤에 공백을 하나 둠으로써,
     공백과 줄바꿈을 출력하게 하거나, PHP 블록 안에서 마지막 echo/print에
     명시적으로 줄바꿈을 넣을 수 있습니다.
    </para>
   </note>

   <note>
    <info><title>텍스트 편집기에 대한 참고</title></info>
    <para>
     PHP를 만들고, 수정하고, 관리할 수 있는 많은 텍스트 편집기와 IDE가
     있습니다. 이러한 도구에 대한 부분적인 목록은
     <link xlink:href="&url.phpeditorlist;">PHP 편집기 목록</link>에서 관리하고
     있습니다. 편집기를 추천하려면, 위 페이지를 방문해서 페이지 관리자에게 그
     편집기를 목록에 추가해달라고 하십시오. 구문 하이라이팅이 있는 편집기는
     도움이 될 것입니다.
    </para>
   </note>
   
   <note>
    <info><title>워드 프로세서에 대한 주의</title></info>
    <para>
     StarOffice Writer, Microsoft Word, Abiword 등의 워드 프로세서는 PHP
     파일을 수정하는데에는 최적화되어 있지 않습니다. 이들을 텍스트 스크립트에
     이용하기 위해서는, 꼭 <emphasis>plain text</emphasis>로 저장해야만 하며,
     그렇지 않으면 PHP는 그 스크립트를 읽을 수가 없고 실행할 수 없습니다.
    </para>
   </note>
   
   <note>
    <title>윈도우 메모장에 대한 주의</title>
    <para>
     PHP 스크립트를 윈도우 메모장을 이용해서 작성할때는, 파일이 .php 확장자를
     가지도록 주의해야합니다. (메모장은 다음과 같은 절차를 거치지 않으면
     자동적으로 .txt 확장자를 붙입니다) 파일을 저장할 때, 파일 이름을 묻는
     부분에서 파일 이름을 따옴표로 감싸줘야 합니다. (예:
     "<filename>hello.php</filename>") 또는, '저장' 창에서 '텍스트 문서'
     드롭다운 메뉴를 클릭해서 "모든 파일"로 설정을 바꿀 수 있습니다. 이
     경우에는 따옴표를 쓰지 않아도 됩니다.
    </para>
   </note>
  
   <para>
    작동하는 PHP 스크립트를 성공적으로 만들었다면, 가장 유명한 PHP 스크립트를
    작성할 차례입니다! <function>phpinfo</function> 함수를 호출하여, 사용
    가능한 <link linkend="language.variables.predefined">예약 정의 변수</link>,
    불러진 PHP 모듈들, <link linkend="configuration">설정</link> 등 시스템과
    설정에 관련한 수많은 유용한 정보를 볼 수 있습니다. 잠깐의 시간을 들여서
    중요한 정보들을 확인해보십시오.
   </para>
   <para>
    <example>
     <info><title>PHP에서 시스템 정보 얻기</title></info>
     <programlisting role="php">
<![CDATA[
<?php phpinfo(); ?>
]]>
     </programlisting>
    </example>
   </para>
  </section>

  <section xml:id="tutorial.useful">
   <info><title>유용한 기능들</title></info>
   <para>
    이제 더 유용한 무언가를 해봅시다. 방문자가 사용하는 브라우저의 종류를
    확인할 것입니다. 이를 위해서, 브라우저가 HTTP 요청의 부분으로 보내는 user
    agent 문자열을 확인합니다. 이 정보는
    <link linkend="language.variables">변수</link>에 기록되어 있습니다.
    PHP에서 변수는 항상 달러표시($)로 시작합니다. 여기서 다룰 변수는
    <varname>$_SERVER['HTTP_USER_AGENT']</varname>입니다.
   </para>
   <note>
    <para>
     <varname>$_SERVER</varname>는 모든 웹 서버
     정보를 포함하기 위해 특별히 예약된 PHP 변수입니다. 이것은 자동전역이라고
     부릅니다. 더 많은 정보는
     <link linkend="language.variables.superglobals">자동전역</link>과 관련한
     매뉴얼 페이지를 참고하십시오. 이 특별한 변수들은 PHP
     <link xlink:href="&url.php.release4.1.0;">4.1.0</link>에서 소개되었습니다.
     이전에는 <varname>$HTTP_SERVER_VARS</varname> 등의
     <varname>$HTTP_*_VARS</varname> 배열을 이용하였습니다. 배제되었지만, 이
     구형의 변수들은 아직 존재합니다.
     (<link linkend="tutorial.oldcode">예전의 코드</link>에 관한 노트를
     참고하십시오)
    </para>
   </note>
   <para>
    이 변수를 표시하기 위해서는, 간단히 다음과 같이 하면 됩니다:
   </para>
   <para>
    <example>
     <info><title>변수 출력하기 (배열 원소)</title></info>
     <programlisting role="php">
<![CDATA[
<?php
echo $_SERVER['HTTP_USER_AGENT'];
?>
]]>
     </programlisting>
     <para>
      이 스크립트의 출력 예제는 다음과 같습니다:
     </para>
     <screen role="html">
Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)
     </screen>
    </example>
   </para>
   <para>
    PHP에는 많은 변수의 <link linkend="language.types">형</link>이 존재합니다.
    위 예제에서는 <link linkend="language.types.array">배열</link> 원소를
    출력했습니다. 배열은 매우 유용합니다.
   </para>
   <para>
    <varname>$_SERVER</varname>는 PHP가 자동적으로 생성하는 변수 중의 하나에
    불과합니다. 매뉴얼의 <link linkend="reserved.variables">예약 정의
     변수</link>를 보거나, 이전 섹션의 예제에서 사용한
    <function>phpinfo</function> 함수의 출력에서 전체 목록을 얻을 수 있습니다.
   </para>
   <para>
    PHP 태그 안쪽으로 하나의 echo뿐이 아닌 여러개의 PHP문을 넣어서 작은 코드
    블럭을 만들 수 있습니다. 예를 들면, Internet Explorer를 체크하고 싶다면
    다음과 같이 할 수 있습니다:
   </para>
   <para>
    <example>
     <info><title><link linkend="language.control-structures">제어문</link>과
       <link linkend="language.functions">함수</link>를 사용하는
       예제</title></info>
     <programlisting role="php">
<![CDATA[
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== FALSE) {
   	echo 'Internet Explorer를 사용하고 있습니다.<br />';
}
?>
]]>
     </programlisting>
     <para>
      이 스크립트의 출력 예제:
     </para>
     <screen role="html">
<![CDATA[
Internet Explorer를 사용하고 있습니다.<br />
]]>
     </screen>
    </example>
   </para>
   <para>
    여기서 두가지 새로운 컨셉을 소개합니다. PHP에는
    <link linkend="control-structures.if">if</link>문이 있습니다. C 언어에서
    사용하는 기본 문법에 친숙하다면, 이것은 매우 논리적으로 보일 것입니다.
    그렇지 않으면, PHP 소개서를 구해서 첫부분을 읽어보거나, 매뉴얼의
    <link linkend="langref">언어 레퍼런스</link> 부분을 읽어보십시오.
   </para>
   <para>
    두번째 컨셉은 <function>strpos</function> 함수 호출입니다.
    <function>strpos</function>는 하나의 문자열을 다른 문자열에서 찾아내는 PHP
    내장 함수입니다. 여기서는
    <varname>$_SERVER['HTTP_USER_AGENT']</varname>(haystack이라고 합니다)
    안에서 <literal>'MSIE'</literal>(needle이라고 합니다)를 찾아봅시다.
    haystack 안에서 needle을 발견하면, 이 함수는 haystack의 첫번째 문자로부터
    needle의 위치를 반환합니다. 발견하지 못했다면 &false;를 반환합니다.
    &false;를 반환하지 않았다면,
    <link linkend="control-structures.if">if</link>문은 &true;로 판단하고
    {중괄호} 안에 있는 코드를 실행합니다. 그렇지 않으면, 코드를 실행하지
    않습니다. <link linkend="control-structures.if">if</link>,
    <link linkend="control-structures.else">else</link>, 그리고
    <function>strtoupper</function>나 <function>strlen</function> 등의 함수를
    사용하는 비슷한 예제도 쉽게 작성할 수 있습니다. 관련된 매뉴얼 페이지들은
    예제를 포함하고 있습니다. 어떻게 함수를 사용하는지를 모르겠다면, 매뉴얼의
    <link linkend="about.prototypes">함수 정의를 읽는 방법</link>과
    <link linkend="language.functions">PHP 함수</link> 섹션을 읽어보십시오.
   </para>
   <para>
    한걸음 더 나아가서, PHP 블록 안에서 어떻게 PHP 모드를 드나드는지
    알아봅시다:
   </para>
   <para>
    <example>
     <info><title>HTML과 PHP 모드 섞기</title></info>
     <programlisting role="php">
<![CDATA[
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== FALSE) {
?>
<h3>strpos()는 false가 아닌 것을 반환했습니다.</h3>
<p>Internet Explorer를 사용하고 있습니다.</p>
<?php
} else {
?>
<h3>strpos()는 false를 반환했습니다.</h3>
<p>Internet Explorer를 사용하고 있지 않습니다.</p>
<?php
}
?>
]]>
     </programlisting>
     <para>
      이 스크립트의 출력 예제:
     </para>
     <screen role="html">
<![CDATA[
<h3>strpos()는 false가 아닌 것을 반환했습니다.</h3>
<p>Internet Explorer를 사용하고 있습니다.</p>
]]>
     </screen>
    </example>
   </para>
   <para>
    PHP echo문을 이용한 출력 방법 대신, PHP 모드를 빠져나가서 직접 HTML을
    전송할 수 있습니다. 여기서 주의해야할 중요하고 강력한 점은 스크립트의
    논리적 흐름이 유지되고 있는 점입니다. <function>strpos</function>의
    결과값에 따라서 오직 하나의 HTML 블록만이 보여지게 됩니다. 즉,
    <literal>MSIE</literal>의 발견 여부에 따르게 됩니다.
   </para>
  </section>
   
  <section xml:id="tutorial.forms">
   <info><title>폼 다루기</title></info>
   <para>
    PHP의 매우 강력한 기능의 하나는 HTML 폼을 다루는 방법입니다. 이를
    이해하는데에 중요한 기본적인 컨셉은 어떤 폼 요소라도 자동적으로 PHP
    스크립트에서 사용 가능하다는 점입니다. PHP로 폼을 이용하는 많은 정보와
    예제를 위해서 매뉴얼의 <link linkend="language.variables.external">외부
     변수</link> 섹션을 읽어보십시오. 다음은 HTML 폼의 예제입니다:
   </para>
   <para>
    <example>
     <info><title>간단한 HTML 폼</title></info>
     <programlisting role="html">
<![CDATA[
<form action="action.php" method="post">
 <p>이름: <input type="text" name="name" /></p>
 <p>연령: <input type="text" name="age" /></p>
 <p><input type="submit" /></p>
</form>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    이 폼에는 특별한 것은 아무것도 없습니다. 어떠한 특별한 태그도 가지지 않는
    단순한 HTML 폼입니다. 유저가 이 폼을 채우고 submit 버튼을 누르면,
    <filename>action.php</filename> 페이지가 호출됩니다. 이 파일은 다음처럼
    작성할 수 있습니다:
   </para>
   <para>
    <example>
     <info><title>폼에서 온 데이터 출력하기</title></info>
     <programlisting role="php">
<![CDATA[
<?php echo htmlspecialchars($_POST['name']); ?>씨 안녕하세요.
당신은 <?php echo (int)$_POST['age']; ?>세입니다.
]]>
     </programlisting>
     <para>
      이 스크립트의 출력 예제:
     </para>
     <screen role="html">
<![CDATA[
홍길동씨 안녕하세요. 당신은 22세입니다.
]]>
     </screen>
    </example>
   </para>
   <para>
    <function>htmlspecialchars</function>와 <literal>(int)</literal> 부분을
    제외하면, 이 소스가 어떤 일을 하는지는 명백합니다.
    <function>htmlspecialchars</function>는 HTML에서 특별한 의미를 가지는
    문자들을 정확히 인코딩하게 하여, HTML 태그나 자바스크립트를 페이지에
    삽입할 수 없도록 합니다. age 필드에 대해서는, 숫자이여야 함을 알고
    있으므로 간단히 <type>integer</type>로 <link
     linkend="language.types.typecasting">변환</link>하여 다른 문자들을
    제거합니다. 이러한 작업은 <link linkend="ref.filter">필터</link> 확장을
    이용하여 PHP가 자동으로 하도록 할 수 있습니다.
    <varname>$_POST['name']</varname>와 <varname>$_POST['age']</varname>
    변수는 PHP가 자동적으로 사용할수 있도록 설정합니다. 위에서 자동전역
    <varname>$_SERVER</varname>를 사용했듯이, 이번에는 모든 POST 데이터를
    포함하는 <varname>$_POST</varname> 자동전역을
    소개합니다. 폼에서 <emphasis>method</emphasis>를 POST로 설정한 점에
    주의하십시오. 폼에서 <emphasis>GET</emphasis> method로 지정하면, 폼 정보는
    <varname>$_GET</varname> 자동전역이 가집니다.
    요청한 데이터가 어떤 소스인지를 신경쓰지 않을 때는
    <varname>$_REQUEST</varname> 자동전역을
    사용할 수 있습니다. 이는 GET, POST, COOKIE 데이터를 포함합니다.
    <function>import_request_variables</function> 함수를 참고하십시오.
   </para>
   <para>
    한동안은 잘 지원되는 HTML 폼에 만족할 수도 있지만, PHP에서는 XForms 입력을
    다룰 수도 있습니다. XForms로 작업하는 것은 초보자를 위한 것은 아니지만,
    흥미를 가질 것입니다. 기능 섹션에서 <link
     linkend="features.xforms">XForms로 받은 데이터를 다루는 짧은
     안내</link>를 참고하십시오.
   </para>
  </section>
  
  <section xml:id="tutorial.oldcode">
   <info><title>새 버전의 PHP에서 예전의 코드를 사용하기</title></info>
   <para>
    PHP는 유명한 스크립트 언어로 성장했고, 재사용 할 수 있는 많은 양의
    저장소와 라이브러리 코드 자원이 존재합니다. PHP 개발자는 하위 호환을
    유지하기 위해 많이 노력했기 때문에, 이전 버전에서 작성한 스크립트라도
    아무런 변경 없이 새버전의 PHP에서 (완벽하게) 작동합니다. 그렇지만, 실제
    상황에선 몇가지 변경이 필요할 수도 있습니다.
   </para>
   <para>
    예전의 코드에 영향을 주는 최근의 중요한 두가지 변경점:
    <itemizedlist>
     <listitem>
      <simpara>
       (함수나 메쏘드 안에서 사용할 때 global 선언을 필요로 하는) 이전의
       <varname>$HTTP_*_VARS</varname> 배열의 배제. PHP
       <link xlink:href="&url.php.release4.1.0;">4.1.0</link>에서 소개한
       <link linkend="language.variables.superglobals">자동전역 배열</link>을
       사용하십시오. 그 종류는 <varname>$_GET</varname>,
       <varname>$_POST</varname>, <varname>$_COOKIE</varname>,
       <varname>$_SERVER</varname>, <varname>$_FILES</varname>,
       <varname>$_ENV</varname>, <varname>$_REQUEST</varname>,
       <varname>$_SESSION</varname>입니다. $HTTP_POST_VARS 등, 이전 형태의
       <varname>$HTTP_*_VARS</varname> 배열도 존재합니다.
       &avail.register-long-arrays;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       기본값으로, 외부 변수를 더 이상 전역 변수로 등록하지 않습니다. 즉, PHP
       <link xlink:href="&url.php.release4.2.0;">4.2.0</link>부터 &php.ini;에서의
       PHP 설정 <link linkend="ini.register-globals">register_globals</link>의
       기본값이 <emphasis>off</emphasis>가 되었습니다. 이 값들에의 접근은
       위에서 언급한 자동전역 배열을 이용하는 것을 권장합니다. 예전의
       스크립트, 책, 그리고 튜토리얼은 이 설정을 on이라고 생각합니다. 예를
       들어, 이 설정이 on이라면 누군가가 <varname>$id</varname>를 URL
       <literal>http://www.example.com/foo.php?id=42</literal>처럼 사용할 수
       있습니다. on/off에 관계 없이, <varname>$_GET['id']</varname>는 사용할
       수 있습니다.
      </simpara>
     </listitem>
    </itemizedlist>
    이 변화에 대한 자세한 내용은
    <link linkend="language.variables.predefined">예약 정의 변수</link> 섹션과
    그 안의 링크들을 참고하십시오.
   </para>
  </section>
  
  <section xml:id="tutorial.whatsnext">
   <info><title>다음은?</title></info>
   <para>
    새로운 지식으로 매뉴얼과 예제 아카이브의 수많은 예제 스크립트의 대부분을
    이해할 수 있을 것입니다. php.net 사이트의 또다른 예제들을 다음 링크
    섹션에서 찾아볼 수 있습니다:
    <link xlink:href="&url.php.links;">&url.php.links;</link>.
   </para>
   <para>
    PHP로 할 수 있는 많은 일들에 대한 다양한 슬라이드 프리젠테이션을 PHP
    컨퍼런스 자료 사이트를 참고하십시오:
    <link xlink:href="&url.php.talks;">&url.php.talks;</link>
   </para>
  </section>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
