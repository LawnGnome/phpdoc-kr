<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 1.4 Maintainer: progcom Status: ready -->
  <chapter xml:id="security.general" xmlns="http://docbook.org/ns/docbook">
   <title>일반적인 고려 사항</title>
   <simpara>
    완벽한 보안 시스템은 불가능에 가깝기에, 보안 대책의 지향점은 보통
    위험성과 사용성의 조화점입니다. 유저가 송신하는 모든 변수가 두가지
    형태의 생물학적 인증(망막 스캔이나 지문 등)이 필요하다면, 매우 높은
    수준의 보안을 얻을 수 있습니다. 그러나 이 방법은 매우 복잡한 폼을
    채우기 위해 30여분의 시간을 필요로 할 것이며, 유저가 보안을 그냥
    넘어갈 수 있는 방법을 찾도록 노력하게 할 것입니다.
   </simpara>
   <simpara>
    필요 이상의 엄중한 보안은 종종 사용자가 작업을 하는 것을 방해하거나,
    지나친 복잡함으로 코드 작성자에게 부담을 줍니다. 사실, 몇몇 보안 공격은
    지나친 보안으로 인한 약점을 노리며, 시간을 들여 손상시키는 경향이
    있습니다.
   </simpara>
   <simpara>
    기억할만한 문구입니다: 시스템은 체인의 가장 약한 부분 정도에 불과하다.
    모든 작업을 시간, 장소, 작업 종류 등으로 자세하게 기록을 한다고 하여도,
    사용자 인증을 하나의 쿠키로만 처리한다면, 사용자에 대한 작업 기록은 매우
    약해질 것입니다.
   </simpara>
   <simpara>
    테스트를 할 때, 가장 간단한 페이지라 할지라도 모든 가능성을 테스트할
    수는 없다는 것을 명심하십시오. 화가 난 고용인이나, 엄청난 시간을 가진
    크랙커, 혹은 키보드 위를 걸어가는 고양이 등에 의해 기대했던 입력값과는
    완전히 무관하게 될 수도 있습니다. 이것이 기대하지 않는 데이터를 분별하고,
    그 뒤에 어떻게 변경하고, 줄이고, 늘릴지에 대해 논리적 관점에서 코드를
    바라보아야 할 이유입니다.
   </simpara>
   <simpara>
    인터넷은 당신의 코드를 부수고, 사이트를 파괴하고, 부적절한 내용을
    게시하는 등 당신을 바쁘게 하는 사람들로 가득 차 있습니다. 사이트의 크기에
    관계 없이, 온라인인 서버를 가지고 있다면 간단히 목표가 됩니다. 많은 크래킹
    프로그램은 크기를 고려하지 않으며, 단지 IP 블럭에서 희생자를 찾을
    뿐입니다. 희생자가 되지 마십시오.
   </simpara>
  </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
