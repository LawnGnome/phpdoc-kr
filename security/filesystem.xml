<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 336910 Maintainer: acidd15 Status: done -->
<!-- splitted from ./index.xml, last change in rev 1.66 -->
  <chapter xml:id="security.filesystem" xmlns="http://docbook.org/ns/docbook">
   <title>파일시스템 보안</title>
   <simpara>
    <acronym>PHP</acronym> 는 대부분의 서버시스템에서 파일과 디렉터리 기반의 권한에 대한 보안을 담당합니다. 
    이는 읽기 가능한 파일시스템에 존재하는 파일을 제어 할수 있도록 합니다.
    파일시스템에 접근하는 모든 사용자에 의해 읽혀지는 파일이 안전한지 보장하기 위해 읽기 가능한 모든 파일을 신경써야 됩니다.
   </simpara>
   <simpara>
    <acronym>PHP</acronym> 가 사용자 레벨의 파일시스템 접근을 허용하도록 만들어진 뒤로, 
    /etc/passwd 파일과 같은 시스템 파일을 읽고, 이더넷을 조작하거나, 프린트 잡을 보내거나 등등의 
    <acronym>PHP</acronym> 스크립트 파일을 작성하는게 가능해 졌습니다.
    이것은 다소 직접적인 영향을 미치는데, 읽으려거나 쓰려는 파일이 적절한 파일인지 확실히 할 필요가 있습니다.
   </simpara>
   <simpara>
    다음 스크립트를 보면, 사용자의 홈디렉터리에서 파일을 지웁니다.
    이때 파일관리를 위해 <acronym>PHP</acronym> 웹 인터페이스가 사용됨을 가정합니다.
    이로 인해 Apache 사용자가 사용자 홈디렉터리 안에 있는 파일의 삭제가 가능하게 됩니다.
   </simpara>
   <para>
    <example>
     <title>공격을 유발하는 나쁜 변수 체크 방법</title>
     <programlisting role="php">
<![CDATA[
<?php
// 사용자의 홈디렉터리로부터 파일을 제거 합니다.
$username = $_POST['user_submitted_name'];
$userfile = $_POST['user_submitted_filename'];
$homedir  = "/home/$username";

unlink("$homedir/$userfile");

echo "The file has been deleted!";
?>
]]>
     </programlisting>
    </example>
    사용자 이름과 파일명을 사용자 입력폼으로부터 전송받을 수 있으므로,
    사용자 이름과 파일명을 다른 누군가로 바꿔 전송할 수 있고, 삭제할 수 있습니다.
    이런 경우에는, 다른 형태의 인증을 필요합니다.
    만약에 전송된 값들이 "../etc/" 과 "passwd" 일 경우를 생각해 보십시오.
    코드는 다음과 같이 읽혀질 것입니다.
    <example>
     <title>파일시스템 공격</title>
     <programlisting role="php">
<![CDATA[
<?php
// PHP 유저가 하드드라이브 내에 접근권한을 가진 파일을 삭제 합니다.
// 만약에 root 권한을 가진다면:
$username = $_POST['user_submitted_name']; // "../etc"
$userfile = $_POST['user_submitted_filename']; // "passwd"
$homedir  = "/home/$username"; // "/home/../etc"

unlink("$homedir/$userfile"); // "/home/../etc/passwd"

echo "The file has been deleted!";
?>
]]>
     </programlisting>
    </example>
    이 문제를 막기 위해서는 두가지 주요점을 알아야 합니다.
    <itemizedlist>
     <listitem>
      <simpara>
       <acronym>PHP</acronym> 웹 사용자에게 제한된 권한만을 허용한다.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       전송된 모든 값들을 검사한다.
      </simpara>
     </listitem>
    </itemizedlist>
    개선된 스크립트 :
    <example>
     <title>좀더 안전한 파일명 체크</title>
     <programlisting role="php">
<![CDATA[
<?php
// PHP 유저가 하드드라이브 내에 접근권한을 가진 파일을 삭제 합니다.
$username = $_SERVER['REMOTE_USER']; // 인증 메카니즘을 사용합니다.
$userfile = basename($_POST['user_submitted_filename']);
$homedir  = "/home/$username";

$filepath = "$homedir/$userfile";

if (file_exists($filepath) && unlink($filepath)) {
    $logstring = "Deleted $filepath\n";
} else {
    $logstring = "Failed to delete $filepath\n";
}
$fp = fopen("/home/logging/filedelete.log", "a");
fwrite($fp, $logstring);
fclose($fp);

echo htmlentities($logstring, ENT_QUOTES);

?>
]]>
     </programlisting>
    </example>
    하지만, 이 또한 문제가 없는것은 아닙니다. 만약에 인증 시스템이 자체적으로 만들어진 사용자 로그인을 허용하고,
    사용자가 "../etc/" 를 선택하면, 시스템은 다시한번 문제에 노출됩니다. 이러한 이유로,
    좀더 상황에 맞는 체크로직을 짜야 됩니다.
    <example>
     <title>좀더 안전한 파일명 체크</title>
     <programlisting role="php">
<![CDATA[
<?php
$username     = $_SERVER['REMOTE_USER']; // 인증 메카니즘을 사용합니다.
$userfile     = $_POST['user_submitted_filename'];
$homedir      = "/home/$username";

$filepath     = "$homedir/$userfile";

if (!ctype_alnum($username) || !preg_match('/^(?:[a-z0-9_-]|\.(?!\.))+$/iD', $userfile)) {
    die("Bad username/filename");
}

//etc...
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    운영체제에 따라, 장치엔트리(/dev/ or COM1) 및 설정 파일들(/etc/ files and the .ini files), 잘알려질 저장 장소들(/home/, My Documents) 등등.
    신경써야할 파일은 많아 집니다.
    이런 이유로, 명시적으로 허용하는것 이외에 모든것을 금지하는 정책을 만드는게 더 쉽습니다. 
   </para>
   <sect1 xml:id="security.filesystem.nullbytes">
    <title>Null 바이트 관련 이슈들</title>
    <simpara>
     <acronym>PHP</acronym> 파일시스템 관련 작업을 위해 C 함수를 사용하므로, null 바이트를 아주 이상하게 처리할 수도 있습니다.
     C에서 null 바이트는 문자열의 끝을 나타내므로, 문자열이 null 바이트를 포함하면 null 바이트가 출현하기 전까지만 인식할 것입니다.
     다음 예제는 이런 문제점을 설명하는 취약한 코드를 보여줍니다.:
    </simpara>
    <example>
     <title>null 바이트에 취약한 스크립트</title>
     <programlisting role="php">
<![CDATA[
<?php
$file = $_GET['file']; // "../../etc/passwd\0"
if (file_exists('/home/wwwrun/'.$file.'.php')) {
    // file_exists 함수는 /home/wwwrun/../../etc/passwd 이 존재하는것으로 보고 true 를 리턴할 것입니다.
    include '/home/wwwrun/'.$file.'.php';
    // /etc/passwd 파일이 include 될것입니다.
}
?>
]]>
     </programlisting>
    </example>
    <para>
     따라서, 파일시스템 작업에 사용되는 더렵혀진 문자열은 항상 올바른지 확인되어야만 합니다.
     다음은, 이전 예제보다 향상된 버전입니다.:
    </para>
    <example>
     <title>올바른 입력 확인</title>
     <programlisting role="php">
<![CDATA[
<?php
$file = $_GET['file']; 

// Whitelisting possible values
switch ($file) {
    case 'main':
    case 'foo':
    case 'bar':
        include '/home/wwwrun/include/'.$file.'.php';
        break;
    default:
        include '/home/wwwrun/include/main.php';
}
?>
]]>
     </programlisting>
    </example>
   </sect1>

  </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
