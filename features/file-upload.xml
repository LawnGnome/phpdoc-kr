<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1.69 Maintainer: progcom Status: ready -->
 <chapter id="features.file-upload">
  <title>파일 업로드 다루기</title>

  <sect1 id="features.file-upload.post-method">
   <title>POST 방식 업로드</title>

   <simpara>
    PHP는 RFC-1867 호환 브라우저(넷스케이프 네비게이터 3 이상,
    마이크로소프트 인터넷 익스플로러 3 이상을 포함)로부터 파일 업로드를
    받을 수 있습니다. 이 기능은 사람들이 텍스트와 바이너리 파일을 동시에
    업로드 할 수 있게 합니다. PHP의 인증 및 파일 관리 함수를 이용해서,
    업로드를 할 수 있는 사람 및 업로드한 파일의 처리를 완전히 제어할 수
    있습니다.
   </simpara>
   <note>
    <title>관련 환경설정</title>
    <para>
     &php.ini;의 <link linkend="ini.file-uploads">file_uploads</link>, 
     <link linkend="ini.upload-max-filesize">upload_max_filesize</link>,
     <link linkend="ini.upload-tmp-dir">upload_tmp_dir</link>,
     <link linkend="ini.post-max-size">post_max_size</link> 지시어를
     참고하십시오.
    </para>
   </note>
   <para>
    PHP는 넷스케이프 컴포저와 W3C의 Amaya 클라이언트가 사용하는
    PUT 방식 파일 업로드도 지원합니다. 자세한 내용은 <link
     linkend="features.file-upload.put-method">PUT 방식 지원</link>을
    참고하십시오.
   </para>
   <para>
    파일 업로드 화면은 다음과 같은 특별한 폼으로 만들어집니다:
   </para>
   <para>
    <example>
     <title>파일 업로드 폼</title>
     <programlisting role="html">
<![CDATA[
<form enctype="multipart/form-data" action="_URL_" method="post">
 <input type="hidden" name="MAX_FILE_SIZE" value="30000" />
 이 파일을 전송합니다: <input name="userfile" type="file" />
 <input type="submit" value="파일 전송" />
</form>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    위 예제의 "_URL_"을 변경하여, PHP 파일을 지시하도록 해야합니다.
    MAX_FILE_SIZE 히든 필드는 파일 입력 필드 앞에 위치해야 하며, 최대
    파일크기(바이트로 지시)를 값으로 가집니다. 또한, 파일 업로드 폼은
    <literal>enctype="multipart/form-data"</literal>을 가지고 있어야 하며,
    그렇지 않으면 파일 업로드는 작동하지 않습니다.
    <warning>
     <para>
      MAX_FILE_SIZE는 브라우저에 대한 권고입니다. 이 최대값은 간단히 피할 수
      있습니다. 브라우저는 항상 원하는 대로 작동하지 않습니다! 그러나, PHP
      설정의 최대 크기는 속일 수 없습니다. 그럼에도 불구하고, MAX_FILE_SIZE를
      추가하면 사용자가 너무 큰 파일로 인해 오류가 발생하는 것을
      발견하기까지의 전송 시간을 절약할 수 있습니다.
     </para>
    </warning>
   </para>

   <para>
    업로드한 파일을 정의하는 변수는 PHP 버전과 환경 설정에 따라 달라집니다.
    자동 전역 <link linkend="reserved.variables.files">$_FILES</link>가
    PHP 4.1.0부터 존재합니다. <varname>$HTTP_POST_FILES</varname> 배열은
    PHP 4.1.0 이전에도 존재합니다. 이 배열들은 업로드 된 파일의 모든 정보를
    가지고 있습니다. <varname>$_FILES</varname>를 사용하는 편을 권장합니다.
    PHP 지시어 <link linkend="ini.register-globals">register_globals</link>가
    <emphasis>on</emphasis>일때는, 관련된 변수명도 존재합니다. <link
     linkend="ini.register-globals">register_globals</link>의 기본값은 PHP
    <ulink url="&url.php.release4.2.0;">4.2.0</ulink>부터
    <emphasis>off</emphasis>입니다.
   </para>
   <para>
    예제 스크립트에서 <link linkend="reserved.variables.files">$_FILES</link>의
    내용은 다음과 같습니다. 위 예제 스크립트에서 사용한 파일 업로드 이름
    <emphasis>userfile</emphasis>로 표현함에 주의하십시오. 어떠한 이름이라도
    가질 수 있습니다.
    <variablelist>
     <varlistentry>
      <term><varname>$_FILES['userfile']['name']</varname></term>
      <listitem>
       <para>
        클라이언트 머신에 존재하는 파일의 원래 이름.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><varname>$_FILES['userfile']['type']</varname></term>
      <listitem>
       <para>
        브라우저가 이 정보를 제공할 경우에, 파일의 mime 형식.
        예를 들면 <literal>"image/gif"</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><varname>$_FILES['userfile']['size']</varname></term>
      <listitem>
       <para>
        업로드된 파일의 바이트로 표현한 크기.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><varname>$_FILES['userfile']['tmp_name']</varname></term>
      <listitem>
       <para>
        서버에 저장된 업로드된 파일의 임시 파일 이름.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><varname>$_FILES['userfile']['error']</varname></term>
      <listitem>
       <para>
        파일 업로드에 관련한 <link linkend="features.file-upload.errors">에러
        코드</link>. <emphasis>['error']</emphasis>는 PHP 4.2.0에서 추가되었습니다.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
   <note>
    <para>
     PHP 4.1.0 이전 버전에서는 <varname>$HTTP_POST_FILES</varname>이고,
     <varname>$_FILES</varname>와 같은
     <link linkend="language.variables.superglobals">자동 전역</link> 변수는
     존재하지 않습니다. PHP 3는 <varname>$HTTP_POST_FILES</varname>를
     지원하지 않습니다.
    </para>
   </note>
   <para>
    &php.ini;에서 <link linkend="ini.register-globals">register_globals</link>가
    <emphasis>on</emphasis>일때, 변수가 추가로 사용 가능합니다. 예를 들면,
    <varname>$userfile_name</varname>은
    <varname>$_FILES['userfile']['name']</varname>과 동일하고,
    <varname>$userfile_type</varname>은
    <varname>$_FILES['userfile']['type']</varname>과 동일합니다.
    PHP 4.2.0부터 register_globals의 기본값이 off임에 주의하십시오.
    이 지시어에 의존하지 않는 방법을 권장합니다.
   </para>
   <para>
    &php.ini;에서 <link linkend="ini.upload-tmp-dir">upload_tmp_dir</link>을
    이용하여 다른 위치를 지정하지 않는 한, 파일은 서버의 기본 임시 디렉토리에
    저장됩니다. 서버의 기본 디렉토리는 PHP를 실행하는 환경의 환경 변수
    <envar>TMPDIR</envar>을 통해서 변경할 수 있습니다. PHP 스크립트 내부에서
    <function>putenv</function>를 통해서 설정하는 것은 작동하지 않습니다.
    물론, 이 환경 변수는 업로드된 파일에 다른 작업을 할 때 사용할 수 있습니다.
    <example>
     <title>파일 업로드 확인하기</title>
     <para>
      추가 정보는 <function>is_uploaded_file</function>와
      <function>move_uploaded_file</function>에 대한 함수 정보를 참고하십시오.
      다음 예제는 폼에서 전송된 파일 업로드를 처리합니다.
     </para>
     <programlisting role="php">
<![CDATA[
<?php
// 4.1.0 이전의 PHP에서는, $_FILES 대신에 $HTTP_POST_FILES를
// 사용해야 합니다.

$uploaddir = '/var/www/uploads/';
$uploadfile = $uploaddir . $_FILES['userfile']['name'];

print "<pre>";
if (move_uploaded_file($_FILES['userfile']['tmp_name'], $uploadfile)) {
    print "파일이 존재하고, 성공적으로 업로드 되었습니다.";
    print "추가 디버깅 정보입니다:\n";
    print_r($_FILES);
} else {
    print "파일 업로드 공격의 가능성이 있습니다! 디버깅 정보입니다:\n";
    print_r($_FILES);
}
print "</pre>";

?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    업로드된 파일을 받는 PHP 스크립트는 업로드된 파일로 무엇을 할 지
    결정하는 로직을 포함하고 있어야 합니다. 예를 들면,
    <varname>$_FILES['userfile']['size']</varname> 변수는
    너무 작거나 큰 파일을 처리하는데 이용할 수 있습니다.
    <varname>$_FILES['userfile']['type']</varname> 변수는 형식 기준에
    맞지 않는 파일을 처리하는데 이용할 수 있습니다.
    PHP 4.2.0부터, <varname>$_FILES['userfile']['error']</varname>를
    이용하여 <link linkend="features.file-upload.errors">에러 코드</link>에
    따라서 처리하게 할 수 있습니다. 어떠한 로직이건 간에, 임시 디렉토리로부터
    파일을 지우거나 다른 곳으로 이동해야 합니다.
   </simpara>
   <simpara>
    폼에서 어떠한 파일도 선택하지 않으면, PHP는
    $_FILES['userfile']['size']를 0으로, $_FILES['userfile']['tmp_name']을
    none으로 반환합니다.
   </simpara>
   <simpara>
    요청이 끝날 때, 이동하거나 이름을 변경하지 않은 임시 디렉토리의 파일은
    삭제됩니다.
   </simpara>
  </sect1>

  <sect1 id="features.file-upload.errors">
   <title>에러 메세지 설명</title>
   <simpara>
    PHP 4.2.0부터, PHP는 파일 배열에 적절한 에러 코드를 반환합니다. 에러 코드는
    PHP로 파일을 업로드 했을때 만들어지는 파일 배열의 <emphasis>['error']</emphasis>
    세그먼트에서 확인할 수 있습니다. 예를 들면,
    <varname>$_FILES['userfile']['error']</varname>에서 확인할 수 있을겁니다.
   </simpara>
   <para>
    <variablelist>
     <varlistentry>
      <term><varname>UPLOAD_ERR_OK</varname></term>
      <listitem>
       <para>
        값: 0; 오류 없이 파일 업로드가 성공했습니다.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><varname>UPLOAD_ERR_INI_SIZE</varname></term>
      <listitem>
       <para>
        값: 1; 업로드한 파일이 &php.ini; <link
         linkend="ini.upload-max-filesize">upload_max_filesize</link>
        지시어보다 큽니다.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><varname>UPLOAD_ERR_FORM_SIZE</varname></term>
      <listitem>
       <para>
        값: 2; 업로드한 파일이 HTML 폼에서 지정한
        <emphasis>MAX_FILE_SIZE</emphasis> 지시어보다 큽니다.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><varname>UPLOAD_ERR_PARTIAL</varname></term>
      <listitem>
       <para>
        값: 3; 파일이 일부분만 전송되었습니다.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><varname>UPLOAD_ERR_NO_FILE</varname></term>
      <listitem>
       <para>
        값: 4; 파일이 전송되지 않았습니다.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
   <note>
    <para>
     이들은 PHP 4.3.0에서 PHP 상수가 되었습니다.
    </para>
   </note>
  </sect1>

  <sect1 id="features.file-upload.common-pitfalls">
   <title>일반적인 문제</title>
   <simpara>
    <literal>MAX_FILE_SIZE</literal>는 ini 설정 <link
    linkend="ini.upload-max-filesize">upload_max_filesize</link>보다
    큰 파일 크기를 지정할 수 없습니다. 기본값은 2 메가바이트입니다.
   </simpara>
   <simpara>
    메모리 제한을 활성화하면, 큰 값의 <link
    linkend="ini.memory-limit">memory_limit</link>가 필요합니다.
    <link linkend="ini.memory-limit">memory_limit</link>를 충분히
    크게 설정했는지 확인하십시오.
   </simpara>
   <simpara>
    <link linkend="ini.max-execution-time">max_execution_time</link>을
    너무 작게 설정하면, 스크립트 실행 시간이 이 값에 도달합니다.
    <literal>max_execution_time</literal>을 충분히 크게 설정했는지
    확인하십시오.
   </simpara>
   <note>
    <simpara>
     <link linkend="ini.max-execution-time">max_execution_time</link>은
     스크립트 자신의 실행 시간에만 영향을 미칩니다.
     <function>system</function>, <function>sleep</function> 함수 등의 시스템
     호출, 데이터베이스 쿼리, 파일 업로드 과정에 걸리는 시간 등 스크립트
     외부 실행에 소모하는 시간은 스크립트 최대 실행 시간을 측정할 때 포함하지
     않습니다.
    </simpara>
   </note>    
   <simpara>
    <link linkend="ini.post-max-size">post_max_size</link>을 너무 작게
    설정하면, 큰 파일은 업로드할 수 없습니다.
    <literal>post_max_size</literal>을 충분히 크게 설정했는지 확인해보십시오.
   </simpara>
   <simpara>
    파일에 대한 검증을 하지 않으면, 사용자가 다른 디렉토리의 중요한 정보에
    접근할 수 있습니다.
   </simpara>
   <simpara>
    CERN httpd는 클라이언트에서 보내지는 content-type 마임 헤더의
    첫번째 공백을 제거하는 것에 주의하십시오. 이 문제로 인해서, CERN
    httpd는 파일 업로드 기능을 지원하지 않습니다.
   </simpara>
   <simpara>
    많은 양의 디렉토리 목록 형식으로 인해, 확장 형식의 이름(공백을 포함하는 등의)을
    가지는 파일을 정상적으로 다룰 수 있는 보장은 없습니다.
   </simpara>
   <simpara>
    하나의 폼 변수에 (입력 이름으로 foo[] 등을 사용하여) 보통의 입력 필드와
    파일 업로드 필드를 섞어서는 안됩니다.
   </simpara>
  </sect1>

  <sect1 id="features.file-upload.multiple">
   <title>복수 파일 전송하기</title>
   <simpara>
    복수 파일은 <literal>input</literal>에서 다른
    <literal>name</literal>을 사용해서 업로드 할 수 있습니다.
   </simpara>
   <simpara>
    동시에 복수 파일을 업로드하고 배열로 조직화한 정보를 얻을 수 있습니다.
    이를 위해서는, HTML 폼에 복수 선택이나 체크박스와 동일한 방식으로
    동일한 이름의 배열형 구문을 갖추면 됩니다:
   </simpara>
   <note>
    <para>
     복수 파일 업로드 지원은 PHP 3.0.10에서 추가되었습니다.
    </para>
   </note>
   <para>
    <example>
     <title>복수 파일 전송하기</title>
     <programlisting role="html">
<![CDATA[
<form action="file-upload.php" method="post" enctype="multipart/form-data">
  이 파일들을 전송합니다:<br />
  <input name="userfile[]" type="file" /><br />
  <input name="userfile[]" type="file" /><br />
  <input type="submit" value="파일 전송" />
</form>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    위 폼을 전송하면, 배열 <varname>$_FILES['userfile']</varname>,
    <varname>$_FILES['userfile']['name']</varname>, 
    <varname>$_FILES['userfile']['size']</varname>가 초기화됩니다.
    (버전 4.1.0 이전에는 $HTTP_POST_FILES)
    <literal>register_globals</literal>가 on이라면, 전송된 파일들에
    대한 전역 변수도 초기화됩니다. 이 각각에 대해서 전송된 파일에 따른
    숫자로 정렬된 배열을 가지게 됩니다.
   </simpara>
   <simpara>
    예를 들어, <filename>/home/test/review.html</filename>와
    <filename>/home/test/xwp.out</filename>가 전송되었다고 합시다.
    이 경우에, <varname>$_FILES['userfile']['name'][0]</varname>의 값은
    <filename>review.html</filename>이고,
    <varname>$_FILES['userfile']['name'][1]</varname>의 값은
    <filename>xwp.out</filename>가 됩니다. 동일하게,
    <varname>$_FILES['userfile']['size'][0]</varname>는
    <filename>review.html</filename>의 크기를 가지게 되며,
    나머지도 마찬가지입니다.
   </simpara>
   <simpara>
    <varname>$_FILES['userfile']['name'][0]</varname>,
    <varname>$_FILES['userfile']['tmp_name'][0]</varname>,
    <varname>$_FILES['userfile']['size'][0]</varname>,
    <varname>$_FILES['userfile']['type'][0]</varname>이
    설정됩니다.
   </simpara>
  </sect1>

  <sect1 id="features.file-upload.put-method">
   <title>PUT 방식 지원</title>
   <simpara>
    PUT 방식 지원은 PHP 3와 PHP 4에서 차이가 있습니다.
    PHP 4에서는, 표준 입력 스트림으로 HTTP PUT의 내용을 읽어야 합니다.
   </simpara>
   <para>
    <example>
     <title>PHP 4로 HTTP PUT 파일을 저장하기</title>
     <programlisting role="php">
<![CDATA[
<?php
/* PUT 데이터는 stdin 스트림으로 들어옵니다. */
$putdata = fopen("php://stdin", "r");

/* 쓰기 위한 파일을 엽니다. */
$fp = fopen("myputfile.ext", "w");

/* 한번에 1kb씩 읽어서 파일에 씁니다. */
while ($data = fread($putdata, 1024))
  fwrite($fp, $data);

/* 스트림을 닫습니다. */
fclose($fp);
fclose($putdata);
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     아래의 문서는 PHP 3에만 해당합니다.
    </para>
   </note>
   <para>
    PHP는 Netscape Composer나 W3C Amaya 등의 클라이언트에서 사용하는
    HTTP PUT 방식에 대한 지원을 제공합니다. PUT 요청은 파일 업로드보다
    단순하고 다음과 같은 식으로 이루어집니다.
    <informalexample>
     <programlisting>
PUT /path/filename.html HTTP/1.1
     </programlisting>
    </informalexample>
   </para>
   <para>
    일반적으로 원격 클라이언트가 웹 트리의 /path/filename.html에 내용을
    저장하는걸 의미합니다. 아파치나 PHP가 웹 트리의 모든 파일에 누구나
    자동적으로 덮어쓰게 하는 것은 좋은 생각이 아닙니다. 그래서, 웹 서버에
    이러한 요청이 들어왔을때, PHP 스크립트를 통해서 다루도록 할 수 있습니다.
    아파치에서는 <emphasis>Script</emphasis> 지시자를 통해 지정할 수
    있습니다. 아파치 환경 설정 파일의 거의 모든 곳에서 지정할 수 있습니다.
    일반적으로는 &lt;Directory&gt; 블록이나 &lt;Virtualhost&gt; 블록의
    내부에 위치하게 됩니다. 다음 줄을 추가하면 됩니다:
    <informalexample>
     <programlisting>
Script PUT /put.php
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    이는 아파치가 이 줄이 들어가 있는 URI에 해당하는 모든 PUT 요청을
    put.php 스크립트에 전달하게 합니다. 물론, .php 확장자에 대해 PHP가
    사용 가능한 상태여야 합니다.
   </simpara>
   <simpara>
    put.php 파일 안에서는 다음과 같은 작업을 해야 합니다:
   </simpara>
   <para>
    <informalexample><programlisting role="php">
<![CDATA[
<?php copy($PHP_UPLOADED_FILE_NAME, $DOCUMENT_ROOT . $REQUEST_URI); ?>
]]>
    </programlisting></informalexample>
   </para>
   <simpara>
    파일을 원격 클라이언트에서 요청한 위치로 복사합니다. 파일 복사가
    이루어지기 전에 몇가지 체크나 사용자 인증을 할 수 있습니다. 여기서
    보였듯이 PHP는 PUT 방식 요청을 <link
     linkend="features.file-upload.post-method">POST 방식</link>을 다루는 것과
    마찬가지로 임시 파일로 저장합니다. 요청이 끝날 때, 임시 파일은 삭제됩니다.
    그러므로, PUT을 다루는 PHP 스크립트는 파일을 어딘가로 복사해야합니다. 임시
    파일의 파일명은 $PHP_PUT_FILENAME 변수에 들어있고, 대상 파일명의 지정은
    $REQUEST_URI에서 확인할 수 있습니다. (아파치가 아닌 경우 다를 수 있습니다)
    대상 파일 이름은 원격 클라이언트가 지정합니다. 이 클라이언트로부터의
    지정을 무시할 수 있습니다. 예를 들면, 모든 전송 파일을 특별한 업로드
    디렉토리로 복사할 수 있습니다.
   </simpara>
  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
