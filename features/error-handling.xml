<?xml version="1.0" encoding="utf-8"?>
<chapter id="features.error-handling">
	<title>Error Handling</title>
	<para>
	PHP에는 다음과 같은 여러 에러와 경고 형태가 있다.:
   <table>
			<title>PHP error types</title>
			<tgroup cols="4">
				<thead>
					<row>
						<entry>Value</entry>
						<entry>Constant</entry>
						<entry>Description</entry>
						<entry>Note</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>1</entry>
						<entry>E_ERROR</entry>
						<entry>Normal Function Errors (일반적인 에러)</entry>
						<entry/>
					</row>
					<row>
						<entry>2</entry>
						<entry>E_WARNING</entry>
						<entry>Normal Warnings (일반적인 경고)</entry>
						<entry/>
					</row>
					<row>
						<entry>4</entry>
						<entry>E_PARSE</entry>
						<entry>Parser Errors (문법 에러)</entry>
						<entry/>
					</row>
					<row>
						<entry>8</entry>
						<entry>E_NOTICE  </entry>
						<entry>
						Notices (알림-무시할 수 있는 알림이지만 버그의 가능성을 가지고 있는 경우) 
						</entry>
						<entry/>
					</row>
					<row>
						<entry>16</entry>
						<entry>E_CORE_ERROR</entry>
						<entry>fatal errors that occur during PHP's initial startup 
						(PHP가 처음 시작될 때 발생한 치명적 에러)</entry>
						<entry>PHP 4 only</entry>
					</row>
					<row>
						<entry>32</entry>
						<entry>E_CORE_WARNING</entry>
						<entry>warnings (non fatal errors) that occur during PHP's initial startup 
						(PHP가 처음 시작될 때 발생한 치명적이지 않은 경고)</entry>
						<entry>PHP 4 only</entry>
					</row>
					<row>
						<entry>64</entry>
						<entry>E_COMPILE_ERROR</entry>
						<entry>fatal compile-time errors (컴파일시 생긴 치명적 에러)</entry>
						<entry>PHP 4 only</entry>
					</row>
					<row>
						<entry>128</entry>
						<entry>E_COMPILE_WARNING</entry>
						<entry>compile-time warnings (non fatal errors) (컴파일시 발생한 치명적이지 않은 경고)</entry>
						<entry>PHP 4 only</entry>
					</row>
					<row>
						<entry>256</entry>
						<entry>E_USER_ERROR</entry>
						<entry>user-generated error message (사용자가 만든 에러 메세지)</entry>
						<entry>PHP 4 only</entry>
					</row>
					<row>
						<entry>512</entry>
						<entry>E_USER_WARNING</entry>
						<entry>user-generated warning message (사용자가 만든 경고 메세지)</entry>
						<entry>PHP 4 only</entry>
					</row>
					<row>
						<entry>1024</entry>
						<entry>E_USER_NOTICE </entry>
						<entry>user-generated notice message (사용자가 만든 알림 메세지)</entry>
						<entry>PHP 4 only</entry>
					</row>
					<row>
						<entry/>
						<entry>E_ALL</entry>
						<entry>all of the above, as supported (지원가능한 위의 것 모두)</entry>
						<entry/>
					</row>
				</tbody>
			</tgroup>
		</table>
	</para>
	<para>
	위의 값(숫자, 상수 모두)은 레포트하기 원하는 내용의 비트를 설정하기 위해 조합하여 사용할 수 있다.
	원하는 값을 조합해내기 위해 <link linkend="language.operators.bitwise">bitwise operators</link>에
	있는 비트 조작 연산자를 사용한다. 단 <filename>php.ini</filename> 파일에서는 '|', '~', '!', '&amp;'의 
	네개의 연산자만 사용가능하고, <filename>php3.ini</filename>에서는 어떤 비트단위 연산자도 사용할 수 없다.
  </para>
	<para>
	PHP4에서 <link linkend="ini.error-reporting">error_reporting</link>의 기본값은
	<literal>E_ALL &amp; ~E_NOTICE</literal>이다. 즉, 모든 에러와 경고를 출력하지만 알림(notice)는 레포팅하지 않는다.
	PHP3에서의 기본값은 <literal>(E_ERROR | E_WARNING | E_PARSE)</literal>이다.
	내용적으로는 PHP4와 같다.
	PHP3의 <filename>php3.ini</filename>에서는 상수를 사용한 설정을 사용할 수 없으므로,
	<link linkend="ini.error-reporting">error_reporting</link>의 값은 반드시 숫자여야 한다.
	그러므로 기본값은 <literal>7</literal>이다.
  </para>
	<para>
	초기 설정은 ini 파일에 있는 <link linkend="ini.error-reporting">error_reporting</link> 지시자를 사용하여 변할 수 있고,
	아파치의 <filename>httpd.conf</filename>파일에서 php_error_reporting (PHP3에서는 php3_error_reporting) 지시자를
	사용하여 설정할 수도 있다. 또한, 스크립트 실행중에 <function>error_reporting</function> 함수를 사용하여 설정할 수도 있다.
  </para>
	<warning>
		<para>
	PHP3에서 PHP4로 프로그램 코드나 서버 자체를 이전할 경우, 
	이 설정과 <function>error_reporting</function> 함수의 호출 내역을 반드시 확인하거나,
	E_COMPILE_ERROR를 포함한 새로운 에러 타입에 대한 레포팅을 불가능하게 하여야 한다.
	자칫하면 어떤 문제가 어디서 발생했는가에 대한 정보없이 빈 문서를 만들어 낼 수도 있으므로 주의하자.
   </para>
	</warning>
	<para>
	모든 <link linkend="language.expressions">PHP 표현식(expression)</link>은 "@"를 앞에 붙이고 호출되면 
	error reporting을 하지 않는다. 만약 <link linkend="ini.track-errors">track_errors</link> 옵션이 Enabled로 
	되어 있고 해당 문장에서 에러가 발생했다면, <literal>$php_errormsg</literal> 라는 전역변수에 에러 메시지가 담겨 있게 된다.
     그러나 <link linkend="language.operators.errorcontrol">@ error-control operator</link>라도 
     문법 에러의 경우에는 에러 메세지를 disable로 하지 못한다.
  </para>
	<warning>
		<para>
	현재 <link linkend="language.operators.errorcontrol">@
    error-control operator</link> 선행자(prefix)는 스크립트를 중단시킬 정도의
	치명적인 에러에 대해서도 에러 레포팅을 하지 않게 한다.
	특히 <link linkend="language.operators.errorcontrol">@</link>이 특정 함수의 에러레포팅을
	억제 하려고 사용된 경우에, 이 함수가 존재 하지 않거나, 이름을 잘못 쓴 경우 해당 스크립트는
	아무런 이유를 표시하지 않고 죽어버리게 된다.
   </para>
	</warning>
	<para>
	아래에 PHP에서 에러를 다루는 기능에 대한 사용 예를 적어 놓았다.
	이 예에서 우리는 파일로(XML 포맷을 사용) 해당 정보의 로그를 남기고, 
	논리적인 문제로 치명적인 에러가 생긴경우는 개발자에게 e-mail을 보내는 에러 핸들링 함수를 정의하였다.
   <example>
			<title>Using error handling in a script</title>
			<programlisting role="php">
&lt;?php
// we will do our own error handling
error_reporting(0);

// user defined error handling function
function userErrorHandler ($errno, $errmsg, $filename, $linenum, $vars) {
    // timestamp for the error entry
    $dt = date(&quot;Y-m-d H:i:s (T)&quot;);

    // define an assoc array of error string
    // in reality the only entries we should
    // consider are 2,8,256,512 and 1024
    $errortype = array (
                1   =&gt;  &quot;Error&quot;,
                2   =&gt;  &quot;Warning&quot;,
                4   =&gt;  &quot;Parsing Error&quot;,
                8   =&gt;  &quot;Notice&quot;,
                16  =&gt;  &quot;Core Error&quot;,
                32  =&gt;  &quot;Core Warning&quot;,
                64  =&gt;  &quot;Compile Error&quot;,
                128 =&gt;  &quot;Compile Warning&quot;,
                256 =&gt;  &quot;User Error&quot;,
                512 =&gt;  &quot;User Warning&quot;,
                1024=&gt;  &quot;User Notice&quot;
                );
    // set of errors for which a var trace will be saved
    $user_errors = array(E_USER_ERROR, E_USER_WARNING, E_USER_NOTICE);
    
    $err = &quot;&lt;errorentry&gt;\n&quot;;
    $err .= &quot;\t&lt;datetime&gt;&quot;.$dt.&quot;&lt;/datetime&gt;\n&quot;;
    $err .= &quot;\t&lt;errornum&gt;&quot;.$errno.&quot;&lt;/errnumber&gt;\n&quot;;
    $err .= &quot;\t&lt;errortype&gt;&quot;.$errortype[$errno].&quot;&lt;/errortype&gt;\n&quot;;
    $err .= &quot;\t&lt;errormsg&gt;&quot;.$errmsg.&quot;&lt;/errormsg&gt;\n&quot;;
    $err .= &quot;\t&lt;scriptname&gt;&quot;.$filename.&quot;&lt;/scriptname&gt;\n&quot;;
    $err .= &quot;\t&lt;scriptlinenum&gt;&quot;.$linenum.&quot;&lt;/scriptlinenum&gt;\n&quot;;

    if (in_array($errno, $user_errors))
        $err .= &quot;\t&lt;vartrace&gt;&quot;.wddx_serialize_value($vars,&quot;Variables&quot;).&quot;&lt;/vartrace&gt;\n&quot;;
    $err .= &quot;&lt;/errorentry&gt;\n\n&quot;;
    
    // for testing
    // echo $err;

    // save to the error log, and e-mail me if there is a critical user error
    error_log($err, 3, &quot;/usr/local/php4/error.log&quot;);
    if ($errno == E_USER_ERROR)
        mail(&quot;phpdev@mydomain.com&quot;,&quot;Critical User Error&quot;,$err);
}


function distance ($vect1, $vect2) {
    if (!is_array($vect1) || !is_array($vect2)) {
        trigger_error(&quot;Incorrect parameters, arrays expected&quot;, E_USER_ERROR);
        return NULL;
    }

    if (count($vect1) != count($vect2)) {
        trigger_error(&quot;Vectors need to be of the same size&quot;, E_USER_ERROR);
        return NULL;
    }

    for ($i=0; $i&lt;count($vect1); $i++) {
        $c1 = $vect1[$i]; $c2 = $vect2[$i];
        $d = 0.0;
        if (!is_numeric($c1)) {
            trigger_error(&quot;Coordinate $i in vector 1 is not a number, using zero&quot;, 
                            E_USER_WARNING);
            $c1 = 0.0;
        }
        if (!is_numeric($c2)) {
            trigger_error(&quot;Coordinate $i in vector 2 is not a number, using zero&quot;, 
                            E_USER_WARNING);
            $c2 = 0.0;
        }
        $d += $c2*$c2 - $c1*$c1;
    }
    return sqrt($d);
}

$old_error_handler = set_error_handler(&quot;userErrorHandler&quot;);

// undefined constant, generates a warning
$t = I_AM_NOT_DEFINED;

// define some &quot;vectors&quot;
$a = array(2,3,&quot;foo&quot;);
$b = array(5.5, 4.3, -1.6);
$c = array (1,-3);

// generate a user error
$t1 = distance($c,$b).&quot;\n&quot;;

// generate another user error
$t2 = distance($b,&quot;i am not an array&quot;).&quot;\n&quot;;

// generate a warning
$t3 = distance($a,$b).&quot;\n&quot;;

?&gt;
    </programlisting>
		</example>
	이것은 <link linkend="ref.errorfunc">Error Handling and Logging functions</link>에 
	있는 함수들을 어떻게 사용하는 가를 보여주는 간단한 예이다.
  </para>
	<para>
   See also <function>error_reporting</function>,
   <function>error_log</function>,
   <function>set_error_handler</function>,
   <function>restore_error_handler</function>, 
   <function>trigger_error</function>,
   <function>user_error</function>
	</para>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
