<?xml version="1.0" encoding="utf-8"?>
<reference id="ref.classobj">
	<title>클래스/객체 함수</title>
	<titleabbrev>클래스/객체</titleabbrev>
	<partintro>
		<section id="classobj.partintro">
			<title>소 개</title>
			<section id="classobj.intro">
				<title>About</title>
				<para>
여기에 있는 함수들은 클래스와 객체에 대한 정보를 얻는데 도움을 줍니다. 여러분은 이 함수들을 사용하여 어떤 객체가 속한 클래스의 이름, 그리고 그 객체의 속성(멤버 함수(메소드,method)와 속성(멤버변수 등.))을 찾아낼수 있습니다. 여기있는 함수들을 사용하면 어떤 객체의 속성및 메소드뿐만 아니라, 그 객체의 혈통도 알아낼 수 있습니다.(즉, 그 객체가 어떤 클래스의 상속을 받았는지를 알아낼 수 있습니다.)
     </para>
			</section>
			<section id="classobj.example">
				<title>사용방법</title>
				<para>
여기에 있는 예제에서는 먼저 기본적인 형태의 클래스를 정의하고, 그 클래스의 상속을 받은 클래스를 정의합니다. 여기의 기본적인 형태의 클래스는 일반적인 야채에 대한 클래스로, 그 야채가 먹을수 있는 것인지 혹은 그렇지 않은지, 또한 그 야채의 색깔은 무엇인지를 정의합니다. 그 클래스의 하위클래스(자식 클래스)는 <varname>시금치</varname> 클래스로 요리를 할수 있는 멤버함수(메소드, method)와 "<varname>시금치</varname> 객체가 요리를 할수 있는지를 알아내는 다른 멤버함수들을 추가 합니다.
     </para>
				<para>
					<example>
						<title>classes.inc</title>
						<programlisting role="php">
&lt;?php

// 멤버변수(속성)와 멤버함수를 가지는 기본 클래스
	
    class Vegetable {

    var $edible;
    var $color;

    function Vegetable( $edible, $color=&quot;green&quot; ) {
        $this-&gt;edible = $edible;
        $this-&gt;color = $color;
    }

    function is_edible() {
        return $this-&gt;edible;
    }

    function what_color() {
        return $this-&gt;color;
    }
    
} // end of class Vegetable

// 기본클랙스의 상속(확장)
class Spinach extends Vegetable {

    var $cooked = false;

    function Spinach() {
        $this-&gt;Vegetable( true, &quot;green&quot; );
    }

    function cook_it() {
        $this-&gt;cooked = true;
    }

    function is_cooked() {
        return $this-&gt;cooked;
    }
    
} // 시금치 객체의 끝

?&gt;
       </programlisting>
					</example>
				</para>
				<para>
위의 클래스들로 부터 2개의 객체를 생성하면, 그 클래스의 혈통을 포함한 클래스들에 대한 정보를 알아낼수 있습니다.
변수들을 깔끔하게 출력하기 위해 몇개의 멤버함수들을 추가해서 정의할수 있습니다.
     </para>
				<para>
					<example>
						<title>test_script.php</title>
						<programlisting role="php">
&lt;pre&gt;
&lt;?php

include &quot;classes.inc&quot;;

// utility functions

function print_vars($obj) {
    $arr = get_object_vars($obj);
    while (list($prop, $val) = each($arr))
        echo &quot;\t$prop = $val\n&quot;;
}

function print_methods($obj) {
    $arr = get_class_methods(get_class($obj));
    foreach ($arr as $method)
        echo &quot;\tfunction $method()\n&quot;;
}

function class_parentage($obj, $class) {
    global $$obj;
    if (is_subclass_of($$obj, $class)) {
        echo &quot;Object $obj belongs to class &quot;.get_class($$obj);
        echo &quot; a subclass of $class\n&quot;;
    } else {
        echo &quot;Object $obj does not belong to a subclass of $class\n&quot;;
    }
}

// instantiate 2 objects

$veggie = new Vegetable(true,&quot;blue&quot;);
$leafy = new Spinach();

// print out information about objects
echo &quot;veggie: CLASS &quot;.get_class($veggie).&quot;\n&quot;;
echo &quot;leafy: CLASS &quot;.get_class($leafy);
echo &quot;, PARENT &quot;.get_parent_class($leafy).&quot;\n&quot;;

// show veggie properties
echo &quot;\nveggie: Properties\n&quot;;
print_vars($veggie);

// and leafy methods
echo &quot;\nleafy: Methods\n&quot;;
print_methods($leafy);

echo &quot;\nParentage:\n&quot;;
class_parentage(&quot;leafy&quot;, &quot;Spinach&quot;);
class_parentage(&quot;leafy&quot;, &quot;Vegetable&quot;);
?&gt;
&lt;/pre&gt;
       </programlisting>
					</example>
				</para>
				<para>
위의 예제에서 중요한 것은, <varname>$leafy</varname> 객체는 <classname>Vegetable</classname> 클래스의 하위클래스인 <classname>시금치</classname>클래스의 객체라는 것입니다.
위의 예제는 다음과 같은 결과가 출력됩니다.
     </para>
				<para>
					<informalexample>
						<programlisting>
       [...]
Parentage:
Object leafy does not belong to a subclass of Spinach
Object leafy belongs to class spinach a subclass of Vegetable
       </programlisting>
					</informalexample>
				</para>
			</section>
		</section>
	</partintro>
&reference.classobj.functions;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

