<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 288721 Maintainer: progcom Status: ready -->
<refentry xml:id="function.addcslashes" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>addcslashes</refname>
  <refpurpose>C 형식으로 문자열을 슬래시로 인용</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>addcslashes</methodname>
   <methodparam><type>string</type><parameter>str</parameter></methodparam>
   <methodparam><type>string</type><parameter>charlist</parameter></methodparam>
  </methodsynopsis>
  <para>
   <parameter>charlist</parameter> 인수에 주어진 문자 목록 앞에 백슬래시를
   추가한 문자열을 반환합니다.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>str</parameter></term>
     <listitem>
      <para>
       이스케이프할 문자열.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>charlist</parameter></term>
     <listitem>
      <para>
       이스케이프할 문자 목록. <parameter>charlist</parameter>가
       <literal>\n</literal>, <literal>\r</literal> 등을 가지면 C 형식으로
       변환되고, 아스키 코드로 32 미만 126 초과 문자들은 8진 표현으로
       변환합니다.
      </para>
      <para>
       charlist 인수에 문자 시퀀스를 정의할 때, 처음에서 끝 범위에 어떠한 문자가
       들어가는지 확인하십시오.
       <informalexample>
        <programlisting role="php">
<![CDATA[
<?php
echo addcslashes('foo[ ]', 'A..z');
// 출력:  \f\o\o\[ \]
// 모든 대소문자를 이스케이프합니다.
// ... 하지만 [\]^_` 도 포함됩니다.
?>
]]>
        </programlisting>
       </informalexample>
       또한, 범위 지정에서 처음 문자가 나중 문자보다 큰 아스키 값을 가지면
       범위를 형성하지 않습니다. 단지 처음과 마지막, 피리오드(.)문자만을
       이스케이프합니다. 문자의 아스키 값을 찾아보려면 <function>ord</function>
       함수를 이용하십시오.
       <informalexample>
        <programlisting role="php">
<![CDATA[
echo addcslashes("zoo['.']", 'z..A');
// 출력:  \zoo['\.']
?>
]]>
        </programlisting>
       </informalexample>
      </para>
      <para>
       회피 문자로 0, a, b, f, n, r, t, v를 사용하려면 조심하십시오. 이들은
       \0, \a, \b, \f, \n, \r, \t, \v로 변환됩니다. PHP에서 \0 (NULL), \r
       (캐리지 리턴), \n (줄바꿈), \f (폼피드), \v (수직탭), \t (탭)는 미리
       정의된 회피 시퀀스입니다. C에서도 이들이 미리 정의된 회피 시퀀스인것과
       마찬가지입니다.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   이스케이프한 문자열을 반환합니다.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.2.5</entry>
       <entry>
        회피 시퀀스 \v와 \f 추가
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <parameter>charlist</parameter>에 "\0..\37"처럼 넣으면, 아스키 코드 0에서
   31까지의 모든 문자를 이스케이프합니다.
   <example>
    <title><function>addcslashes</function> 예제</title>
    <programlisting role="php">
<![CDATA[
<?php
$escaped = addcslashes($not_escaped, "\0..\37!@\177..\377");
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>stripcslashes</function></member>
    <member><function>stripslashes</function></member>
    <member><function>addslashes</function></member>
    <member><function>htmlspecialchars</function></member>
    <member><function>quotemeta</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
