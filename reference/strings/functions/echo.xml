<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1.21 Maintainer: progcom Status: ready -->
<refentry xml:id="function.echo" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>echo</refname>
  <refpurpose>하나 이상의 문자열을 출력</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>echo</methodname>
   <methodparam><type>string</type><parameter>arg1</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   모든 인수를 출력합니다.
  </simpara>
  <para>
   <function>echo</function>은 실제 함수가 아니기에 (언어 구조입니다) 괄호를
   사용할 필요가 없습니다. <function>echo</function>는 (다른 언어 구조와 달리)
   함수처럼 작동하지 않으므로, 함수 문맥으로 사용할 수 없습니다. 추가로,
   <function>echo</function>에 둘 이상의 인수를 사용할 때 괄호를 사용해서는
   안됩니다.
  </para>
  <para>
   <function>echo</function>는 열기 태그에 이어지는 등호를 사용한 짧은
   구문을 가지고 있습니다. 이 짧은 구문은 <link
    linkend="ini.short-open-tag">short_open_tag</link> 설정을 활성화 했을
   때만 작동합니다.
   <informalexample>
    <programlisting role="php">
<![CDATA[
I have <?=$foo?> foo.
]]>
    </programlisting>
   </informalexample>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>arg1</parameter></term>
     <listitem>
      <para>
       출력할 인수.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>...</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>echo</function> 예제</title>
    <programlisting role="php">
<![CDATA[
<?php
echo "Hello World";

echo "이것은 여러
줄을 표현합니다. 물론 줄바꿈도 
출력합니다.";

echo "이것은 여러\n줄을 표현합니다. 물론 줄바꿈도\n출력합니다.";

echo "문자 이스케이프는 \"이렇게\" 합니다.";

// echo 구문 안에 변수를 사용할 수 있습니다.
$foo = "foobar";
$bar = "barbaz";

echo "foo는 $foo"; // foo는 foobar

// 배열을 사용할 수도 있습니다.
$baz = array("value" => "foo");

echo "이것은 {$baz['value']} !"; // 이것은 foo !

// 작은 따옴표는 변수값이 아닌, 변수명을 출력합니다.
echo 'foo는 $foo'; // foo는 $foo

// 다른 문자를 사용하지 않는다면, 바로 변수를 echo할 수 있습니다.
echo $foo;          // foobar
echo $foo,$bar;     // foobarbarbaz

// 몇몇 사람들은 결합 echo보다 복수 인수 사용을 선호합니다.
echo 'This ', 'string ', 'was ', 'made ', 'with multiple parameters.', chr(10);
echo 'This ' . 'string ' . 'was ' . 'made ' . 'with concatenation.' . "\n";

echo <<<END
이는 $variable 삽입을 가지는 여러 줄을
출력하는 "here document" 구문을 사용합니다. here
document 종료어는 줄에 세미콜론만을 가지고 있어야
하며, 어떠한 공백도 없어야하는 점에 주의하십시오!
END;

// echo는 함수처럼 작동하지 않기에, 다음 코드는 유효하지 않습니다.
($some_var) ? echo 'true' : echo 'false';

// 그러나, 다음 예제는 작동합니다.
($some_var) ? print 'true' : print 'false'; // print도 구조이지만, 함수처럼
                                            // 작동합니다. 그러므로
                                            // 이 문맥에서 사용할 수 있습니다.
echo $some_var ? 'true': 'false'; // 구문을 변경하여 처리
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <simpara>
   <function>print</function>와 <function>echo</function>의 차이에 대해서는,
   FAQT의 Knowledge Base Article을 읽어보십시오: <link
    xlink:href="&url.echo-print;">&url.echo-print;</link>
  </simpara>
  &note.language-construct;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>print</function></member>
    <member><function>printf</function></member>
    <member><function>flush</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
