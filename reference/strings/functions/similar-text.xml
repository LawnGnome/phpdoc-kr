<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1.2 Maintainer: progcom Status: ready -->
<!-- CREDITS: cycle98 -->
  <refentry xml:id="function.similar-text" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>similar_text</refname>
    <refpurpose>
     두 문자열 간의 유사성을 계산합니다.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>설명</title>
     <methodsynopsis>
      <type>int</type><methodname>similar_text</methodname>
      <methodparam><type>string</type><parameter>first</parameter></methodparam>
      <methodparam><type>string</type><parameter>second</parameter></methodparam>
      <methodparam choice="opt"><type>float</type><parameter>percent</parameter></methodparam>
     </methodsynopsis>
    <para>
     Oliver [1993]에서 설명한 방법으로 두 문자열 간의 유사성을 계산합니다.  이
     수행은 Oliver's 표현 코드처럼 스택을 사용하지 않고, 전체 프로세스 속도를
     향상하거나 저하할 수 있는 재귀 호출을 사용하는 점에 주의하십시오. 이
     알고리즘의 복잡도는 O(N**3)이고, N은 가장 긴 문자열의 길이를 나타냅니다.
    </para>
    <para>
     세번째 인자를 참조로 전달하면, <function>similar_text</function>가
     유사성을 백분율로 계산해줍니다. 이 함수는 두 문자열에서 매치하는 문자
     수를 반환합니다.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
