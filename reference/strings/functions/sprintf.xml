<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 1.8 Maintainer: progcom Status: ready -->
  <refentry id="function.sprintf">
   <refnamediv>
    <refname>sprintf</refname>
    <refpurpose>형식화한 문자열을 반환합니다.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>설명</title>
     <methodsynopsis>
      <type>string</type><methodname>sprintf</methodname>
      <methodparam><type>string</type><parameter>format</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     포맷 문자열 <parameter>format</parameter>에 따라 생성한 문자열을
     반환합니다.
    </simpara>
    <simpara>
     포맷 문자열은 0개 이상의 지시어를 조합합니다: 일반 문자는
     (<literal>%</literal>을 제외하고) 결과에 그대로 복사하고, <emphasis>변환
     특정어</emphasis>는 각각의 인자로 교체한 결과를 가집니다. 이는
     <function>sprintf</function>와 <function>printf</function>에 모두
     적용됩니다.
    </simpara>
    <para>
     각각의 변환 특정어는 퍼센트 기호(<literal>%</literal>)에 다음의 요소들이
     붙어서 구성됩니다:
     <orderedlist>
      <listitem>
       <simpara>
        선택적인 <emphasis>패딩 지정어</emphasis>는 적합한 문자열의 크기를
        얻기 위한 패딩에 사용하는 문자를 지정합니다. 이는 스페이스 문자나
        <literal>0</literal> (제로 문자)일 수 있습니다. 기본값은 스페이스로
        채웁니다. 다른 패딩 문자는 작은 따옴표(<literal>'</literal>)를 앞에
        붙여서 지정할 수 있습니다. 아래의 예제를 참고하십시오.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        선택적인 <emphasis>정렬 지정어</emphasis>는 결과를 왼쪽 정렬할지,
        오른쪽 정렬할 지를 결정합니다. 기본값은 오른쪽 정렬입니다; 여기에
        <literal>-</literal> 문자를 사용하면 왼쪽 정렬이 됩니다.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        선택적인 수, <emphasis>너비 지정어</emphasis>는 얼마나 많은
        문자(최소한)가 결과에 들어갈지를 결정합니다.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        선택적인 <emphasis>정밀도 지정어</emphasis>는 부동 소수점 실수에서
        얼마나 많은 소수점 아래의 수를 표시할지를 결정합니다. 이 옵션은
        <type>float</type>형 이외에는 영향을 주지 않습니다. (수를 포맷하는
        다른 유용한 함수에는 <function>number_format</function>이 존재합니다.)
       </simpara>
      </listitem>
      <listitem>
       <para>
        <emphasis>형 지정어</emphasis>는 인자 데이터를 어떤 형으로 취급할지
        결정합니다. 가능한 형은:
        <simplelist>
         <member>
          <literal>%</literal> - 퍼센트 문자. 인자는 필요하지 않습니다.
         </member>
         <member>
          <literal>b</literal> - 인자를 정수로 취급하고, 2진수로 표현합니다.
         </member>
         <member>
          <literal>c</literal> - 인자를 정수로 취급하고, ASCII 값에 해당하는
          문자로 표현합니다.
         </member>
         <member>
          <literal>d</literal> - 인자를 정수로 취급하고, (부호 있는) 10진수로
          표현합니다.
         </member>
         <member>
          <literal>u</literal> - 인자를 정수로 취급하고, 부호 없는 10진수로
          표현합니다.
         </member>
         <member>
          <literal>f</literal> - 인자를 <type>float</type>로 취급하고, 실수로
          표현합니다.
         </member>
         <member>
          <literal>o</literal> - 인자를 정수로 취급하고, 8진수로 표현합니다.
         </member>
         <member>
          <literal>s</literal> - 인자를 문자열로 취급하고 표현합니다.
         </member>
         <member>
          <literal>x</literal> - 인자를 정수로 취급하고 16진수(소문자 표시)로
          표현합니다.
         </member>
         <member>
          <literal>X</literal> - 인자를 정수로 취급하고, 16진수(대문자 표시)로
          표현합니다.
         </member>
        </simplelist>
       </para>
      </listitem>
     </orderedlist>
    </para>
    <para>
     PHP 4.0.6부터 포맷 문자열은 인자 넘버링/교환을 지원합니다. 다음은
     예제입니다:
     <example>
      <title>인자 교환</title>
      <programlisting role="php">
<![CDATA[
<?php
$format = "There are %d monkeys in the %s";
printf($format, $num, $location);
?>
]]>
      </programlisting>
     </example>
     이는 "There are 5 monkeys in the tree"를 출력할 것입니다. 그러나,
     국제화를 위해서 포맷 문자열을 별도의 파일로 작성하고, 이것을 다음과 같이
     재작성했다고 생각해봅시다:
     <example>
      <title>인자 교환</title>
      <programlisting role="php">
<![CDATA[
<?php
$format = "The %s contains %d monkeys";
printf($format, $num, $location);
?>
]]>
      </programlisting>
     </example>
     문제가 생겼습니다. 포맷 문자열에서의 순서와 코드에서 인자의 순서가
     일치하지 않습니다. 여기서 코드를 수정하지 않고, 단순히 포맷 문자열에 어떤
     인자를 가져올지를 지정할 수 있습니다. 포맷 문자열을 다음과 같이 작성하면
     됩니다:
     <example>
      <title>인자 교환</title>
      <programlisting role="php">
<![CDATA[
<?php
$format = "The %2\$s contains %1\$d monkeys";
printf($format, $num, $location);
?>
]]>
      </programlisting>
     </example>
     코드에 많은 인자를 추가하지 않고도 반복해서 출력할 수 있다는 추가적인
     장점이 존재합니다. 예를 들면:
     <example>
      <title>인자 교환</title>
      <programlisting role="php">
<![CDATA[
<?php
$format = "The %2\$s contains %1\$d monkeys.
           That's a nice %2\$s full of %1\$d monkeys.";
printf($format, $num, $location);
?>
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     참고: <function>printf</function>,
     <function>sscanf</function>, <function>fscanf</function>, 
     <function>vsprintf</function>,
     <function>number_format</function>.
    </simpara>
   </refsect1>
   <refsect1>
    <title>예제</title>
    <para>
     <example>
      <title><function>sprintf</function>: 제로로 채운 정수</title>
      <programlisting role="php">
<![CDATA[
<?php
$isodate = sprintf("%04d-%02d-%02d", $year, $month, $day);
?>
]]>
      </programlisting>
     </example>
     <example>
      <title><function>sprintf</function>: 통화 표현하기</title>
      <programlisting role="php">
<![CDATA[
<?php
$money1 = 68.75;
$money2 = 54.35;
$money = $money1 + $money2;
// echo $money 는 "123.1"를 출력합니다;
$formatted = sprintf("%01.2f", $money);
// echo $formatted 는 "123.10"를 출력합니다.
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
