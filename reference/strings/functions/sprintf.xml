<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: n/a Maintainer: progcom Status: ready -->
<refentry xml:id="function.sprintf" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>sprintf</refname>
  <refpurpose>형식화한 문자열을 반환</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>sprintf</methodname>
   <methodparam><type>string</type><parameter>format</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   포맷 문자열 <parameter>format</parameter>에 따라 생성한 문자열을
   반환합니다.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>format</parameter></term>
     <listitem>
      <para>
       포맷 문자열은 0개 이상의 지시어를 조합합니다: 일반 문자는
       (<literal>%</literal>을 제외하고) 결과에 그대로 복사하고, <emphasis>변환
        특정어</emphasis>는 각각의 인수로 교체한 결과를 가집니다. 이는
       <function>sprintf</function>와 <function>printf</function>에 모두
       적용됩니다.
      </para>
      <para>
       각각의 변환 특정어는 퍼센트 기호(<literal>%</literal>)에 다음의 요소들이
       붙어서 구성됩니다:
       <orderedlist>
        <listitem>
         <simpara>
          선택적인 <emphasis>부호 지정어</emphasis>는 숫자에 부호(-나 +)를
          강제합니다. 기본값은 숫자가 음수일때만 - 부호를 사용합니다. 이
          지정어는 양수일때도 + 부호를 붙이고, PHP 4.3.0에서 추가되었습니다.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          선택적인 <emphasis>패딩 지정어</emphasis>는 적합한 문자열의 크기를
          얻기 위한 패딩에 사용하는 문자를 지정합니다. 이는 스페이스 문자나
          <literal>0</literal> (제로 문자)일 수 있습니다. 기본값은 스페이스로
          채웁니다. 다른 패딩 문자는 작은 따옴표(<literal>'</literal>)를 앞에
          붙여서 지정할 수 있습니다. 아래의 예제를 참고하십시오.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          선택적인 <emphasis>정렬 지정어</emphasis>는 결과를 왼쪽 정렬할지,
          오른쪽 정렬할 지를 결정합니다. 기본값은 오른쪽 정렬입니다; 여기에
          <literal>-</literal> 문자를 사용하면 왼쪽 정렬이 됩니다.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          선택적인 수, <emphasis>너비 지정어</emphasis>는 얼마나 많은
          문자(최소한)가 결과에 들어갈지를 결정합니다.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          선택적인 <emphasis>정밀도 지정어</emphasis>는 부동소수점 수에서
          얼마나 많은 소수점 아래의 수를 표시할지를 결정합니다. 이 지정어를
          문자열에 사용하면, 잘라내는 점으로 작동하여 문자열의 최대 문자수를
          제한합니다.
         </simpara>
        </listitem>
        <listitem>
         <para>
          <emphasis>형 지정어</emphasis>는 인수 데이터를 어떤 형으로 취급할지
          결정합니다. 가능한 형은:
          <simplelist>
           <member>
            <literal>%</literal> - 퍼센트 문자. 인수는 필요하지 않습니다.
           </member>
           <member>
            <literal>b</literal> - 인수를 정수로 취급하고, 2진수로 표현합니다.
           </member>
           <member>
            <literal>c</literal> - 인수를 정수로 취급하고, 아스키 값에 해당하는
            문자로 표현합니다.
           </member>
           <member>
            <literal>d</literal> - 인수를 정수로 취급하고, (부호 있는) 10진수로
            표현합니다.
           </member>
           <member>
            <literal>e</literal> - 인수를 과학 형식으로 취급합니다. (예.
            1.2e+2) 정밀도 지정어는 PHP 5.2.1부터 소수점 아래 자리수를
            정합니다. 이전 버전에서는 유효숫자의 갯수(하나 적음)로
            취급했었습니다.
           </member>
           <member>
            <literal>u</literal> - 인수를 정수로 취급하고, 부호 없는 10진수로
            표현합니다.
           </member>
           <member>
            <literal>f</literal> - 인수를 소수로 취급하고, 부동소수점 수로
            표현합니다. (로케일 관련)
           </member>
           <member>
            <literal>F</literal> - 인수를 소수로 취급하고, 부동소수점 수로
            표현합니다. (로케일 무관) PHP 4.3.10과 PHP 5.0.3부터 사용할 수
            있습니다.
           </member>
           <member>
            <literal>o</literal> - 인수를 정수로 취급하고, 8진수로 표현합니다.
           </member>
           <member>
            <literal>s</literal> - 인수를 문자열로 취급하고 표현합니다.
           </member>
           <member>
            <literal>x</literal> - 인수를 정수로 취급하고 16진수(소문자 표시)로
            표현합니다.
           </member>
           <member>
            <literal>X</literal> - 인수를 정수로 취급하고, 16진수(대문자 표시)로
            표현합니다.
           </member>
          </simplelist>
         </para>
        </listitem>
       </orderedlist>
      </para>
      <para>
       포맷 문자열은 인수 넘버링/교환을 지원합니다. 다음은 예제입니다:
       <example>
        <title>인수 교환</title>
        <programlisting role="php">
<![CDATA[
<?php
$format = ;There are %d monkeys in the %s';
printf($format, $num, $location);
?>
]]>
        </programlisting>
       </example>
       이는 "There are 5 monkeys in the tree"를 출력할 것입니다. 그러나,
       국제화를 위해서 포맷 문자열을 별도의 파일로 작성하고, 이것을 다음처럼
       재작성했다고 생각해봅시다:
       <example>
        <title>인수 교환</title>
        <programlisting role="php">
<![CDATA[
<?php
$format = 'The %s contains %d monkeys';
printf($format, $num, $location);
?>
]]>
        </programlisting>
       </example>
       문제가 생겼습니다. 포맷 문자열에서의 순서와 코드에서 인수의 순서가
       일치하지 않습니다. 여기서 코드를 수정하지 않고, 단순히 포맷 문자열에 어떤
       인수를 가져올지를 지정할 수 있습니다. 포맷 문자열을 다음과 같이 작성하면
       됩니다:
       <example>
        <title>인수 교환</title>
        <programlisting role="php">
<![CDATA[
<?php
$format = 'The %2$s contains %1$d monkeys';
printf($format, $num, $location);
?>
]]>
        </programlisting>
       </example>
       코드에 많은 인수를 추가하지 않고도 반복해서 출력할 수 있다는 추가적인
       장점이 존재합니다. 예를 들면:
       <example>
        <title>인수 교환</title>
        <programlisting role="php">
<![CDATA[
<?php
$format = 'The %2$s contains %1$d monkeys.
           That\'s a nice %2$s full of %1$d monkeys.';
printf($format, $num, $location);
?>
]]>
        </programlisting>
       </example>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>args</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>...</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   형식화 문자열 <parameter>format</parameter>에 따라서 생성된 문자열을
   반환합니다.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.0.6</entry>
       <entry>
        인수 넘버링/교환 추가.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>printf</function>: 다양한 예제</title>
   <programlisting role="php">
<![CDATA[
<?php
$n =  43951789;
$u = -43951789;
$c = 65; // 아스키 65는 'A'

// 이중 %%에 주목, '%' 문자를 출력합니다.
printf("%%b = '%b'\n", $n); // 2진 표현
printf("%%c = '%c'\n", $c); // 아스키 문자 출력, chr() 함수와 동일
printf("%%d = '%d'\n", $n); // 표준 정수
printf("%%e = '%e'\n", $n); // 과학 표현
printf("%%u = '%u'\n", $n); // 양의 정수에 대한 부호 없는 정수 표현
printf("%%u = '%u'\n", $u); // 음의 정수에 대한 부호 없는 정수 표현
printf("%%f = '%f'\n", $n); // 부동소수점 표현
printf("%%o = '%o'\n", $n); // 8진 표현
printf("%%s = '%s'\n", $n); // 문자열 표현
printf("%%x = '%x'\n", $n); // 16진 표현 (소문자)
printf("%%X = '%X'\n", $n); // 16진 표현 (대문자)

printf("%%+d = '%+d'\n", $n); // 양의 정수에 대한 부호지정어
printf("%%+d = '%+d'\n", $u); // 음의 정수에 대한 부호지정어
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
%b = '10100111101010011010101101'
%c = 'A'
%d = '43951789'
%e = '4.39518e+7'
%u = '43951789'
%u = '4251015507'
%f = '43951789.000000'
%o = '247523255'
%s = '43951789'
%x = '29ea6ad'
%X = '29EA6AD'
%+d = '+43951789'
%+d = '-43951789'
]]>
   </screen>
  </example>
  <example>
   <title><function>printf</function>: 문자열 지정어</title>
   <programlisting role="php">
<![CDATA[
<?php
$s = 'monkey';
$t = 'many monkeys';

printf("[%s]\n",      $s); // 표준 문자열 출력
printf("[%10s]\n"     $s); // 공백으로 오른쪽 정렬
printf("[%-10s]\n",   $s); // 공백으로 왼쪽 정렬
printf("[%010s]\n",   $s); // 0 채우기도 문자열에 작동
printf("[%'#10s]\n",  $s); // 사용자 채우기 문자 '#' 사용
printf("[%10.10s]\n", $t); // 왼쪽 정렬이지만 10문자로 자름
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
[monkey]
[    monkey]
[monkey    ]
[0000monkey]
[####monkey]
[many monke]
]]>
   </screen>
  </example>
  <example>
   <title><function>sprintf</function>: 0으로 채운 정수</title>
   <programlisting role="php">
<![CDATA[
<?php
$isodate = sprintf("%04d-%02d-%02d", $year, $month, $day);
?>
]]>
   </programlisting>
  </example>
  <example>
   <title><function>sprintf</function>: 통화 표현하기</title>
   <programlisting role="php">
<![CDATA[
<?php
$money1 = 68.75;
$money2 = 54.35;
$money = $money1 + $money2;
// echo $money 는 "123.1"를 출력합니다;
$formatted = sprintf("%01.2f", $money);
// echo $formatted 는 "123.10"를 출력합니다.
?>
]]>
   </programlisting>
  </example>
  <example>
   <title><function>sprintf</function>: 과학 표현</title>
   <programlisting role="php">
<![CDATA[
<?php
$number = 362525200;

echo sprintf("%.3e", $number); // 3.625e+8 출력
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>printf</function></member>
    <member><function>sscanf</function></member>
    <member><function>fscanf</function></member>
    <member><function>vsprintf</function></member>
    <member><function>number_format</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
