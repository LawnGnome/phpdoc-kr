<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: n/a Maintainer: progcom Status: ready -->

<appendix xml:id="json.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <para>
  다음 상수들은 <function>json_last_error</function>에서 반환하는 오류 형식을 나타냅니다.
 </para>
 <variablelist>
  <varlistentry xml:id="constant.json-error-none">
   <term>
    <constant>JSON_ERROR_NONE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     오류가 발생하지 않음. PHP 5.3.0 이후 버전에서 사용가능함.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-depth">
   <term>
    <constant>JSON_ERROR_DEPTH</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     허용된 최대 스택 깊이를 초과함. PHP 5.3.0 이후 버전에서 사용가능함.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-state-mismatch">
   <term>
    <constant>JSON_ERROR_STATE_MISMATCH</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     언더플로 또는 모드 불일치가 발생함. PHP 5.3.0 이후 버전에서 사용가능함.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-ctrl-char">
   <term>
    <constant>JSON_ERROR_CTRL_CHAR</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     제어 문자 오류, 잘못 인코드되었을 수 있음. PHP 5.3.0 이후 버전에서 사용가능함.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-syntax">
   <term>
    <constant>JSON_ERROR_SYNTAX</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     문법 오류. PHP 5.3.0 이후 버전에서 사용가능함.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-utf8">
   <term>
    <constant>JSON_ERROR_UTF8</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     잘못된 형식의 UTF-8 문자들임, 정확하지 못한 인코드가 문제일 수 있슴. 이 상수는 PHP 5.3.1 버전에서 사용가능함.
    </simpara>
   </listitem>
  </varlistentry> 
  <varlistentry xml:id="constant.json-error-recursion">
   <term>
    <constant>JSON_ERROR_RECURSION</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <para>
     The object or array passed to <function>json_encode</function> include
     recursive references and cannot be encoded.
     If the <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant> option was
     given, &null; will be encoded in the place of the recursive reference.
    </para>
    <para>
     This constant is available as of PHP 5.5.0.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-inf-or-nan">
   <term>
    <constant>JSON_ERROR_INF_OR_NAN</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <para>
     The value passed to <function>json_encode</function> includes either
     <link linkend="language.types.float.nan"><constant>NAN</constant></link>
     or <link linkend="function.is-infinite"><constant>INF</constant></link>.
     If the <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant> option was
     given, <literal>0</literal> will be encoded in the place of these
     special numbers.
    </para>
    <para>
     This constant is available as of PHP 5.5.0.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-unsupported-type">
   <term>
    <constant>JSON_ERROR_UNSUPPORTED_TYPE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <para>
     A value of an unsupported type was given to
     <function>json_encode</function>, such as a <type>resource</type>.
     If the <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant> option was
     given, &null; will be encoded in the place of the unsupported value.
    </para>
    <para>
     This constant is available as of PHP 5.5.0.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>

 <para>
  다음 상수들은 <function>json_encode</function>에서 옵션값을 설정하기 위해 결합될 수 있습니다.
 </para>
 <variablelist>
  <varlistentry xml:id="constant.json-hex-tag">
   <term>
    <constant>JSON_HEX_TAG</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     &lt; 와 &gt;은 모두 \u003C 와 \u003E으로 변환됩니다.
     PHP 5.3.0 이후 버전에서 사용가능함.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-hex-amp">
   <term>
    <constant>JSON_HEX_AMP</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     &amp;는 모두 \u0026으로 변환됩니다.
     Available since PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-hex-apos">
   <term>
    <constant>JSON_HEX_APOS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     '(작은따옴표)는 모두 \u0027으로 변환됩니다.
     PHP 5.3.0 이후 버전에서 사용가능함.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-hex-quot">
   <term>
    <constant>JSON_HEX_QUOT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     "(큰따옴표)는 모두 \u0022으로 변환됩니다.
     PHP 5.3.0 이후 버전에서 사용가능함.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-force-object">
   <term>
    <constant>JSON_FORCE_OBJECT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Outputs an object rather than an array when a non-associative array is
     used. Especially useful when the recipient of the output is expecting
     an object and the array is empty.
     Available since PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-numeric-check">
   <term>
    <constant>JSON_NUMERIC_CHECK</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Encodes numeric strings as numbers.
     Available since PHP 5.3.3.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-bigint-as-string">
   <term>
    <constant>JSON_BIGINT_AS_STRING</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Encodes large integers as their original string value.
     Available since PHP 5.4.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-pretty-print">
   <term>
    <constant>JSON_PRETTY_PRINT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Use whitespace in returned data to format it.
     Available since PHP 5.4.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-unescaped-slashes">
   <term>
    <constant>JSON_UNESCAPED_SLASHES</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Don't escape <literal>/</literal>.
     Available since PHP 5.4.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-unescaped-unicode">
   <term>
    <constant>JSON_UNESCAPED_UNICODE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Encode multibyte Unicode characters literally (default is to escape as \uXXXX).
     Available since PHP 5.4.0.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
</appendix>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
