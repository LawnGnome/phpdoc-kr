<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1.29 Maintainer: progcom Status: ready -->
<!-- CREDTIS: fuzzy74 -->
<refentry xml:id="function.array-walk" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_walk</refname>
  <refpurpose>배열의 각 원소에 대해서 특정 함수를 적용</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>array_walk</methodname>
   <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
   <methodparam><type>callback</type><parameter>funcname</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>userdata</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   <parameter>array</parameter> 배열의 각 원소에 사용자 정의 함수
   <parameter>function</parameter>을 적용한다.
  </simpara>
  <para>
   <function>array_walk</function>는 <parameter>array</parameter>의
   내부적인 배열 포인터에 의해 영향을 받지 않는다.
   <function>array_walk</function>는 포인터 위치에 상관없이 전체 배열를
   가로지를것이다.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       입력 배열.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>funcname</parameter></term>
     <listitem>
      <para>
       일반적으로, <parameter>funcname</parameter>는 두 인수를 받습니다.
       첫번째는 <parameter>array</parameter> 인수의 값이고, 두번째는
       키/인덱스입니다.
      </para>
      <note>
       <para>
        <parameter>funcname</parameter>이 배열의 실제 값으로 동작해야 한다면,
        <parameter>funcname</parameter>의 첫번째 인수를 <link
         linkend="language.references">참조</link>로 설정합니다. 그러면 이러한
        원소에 미치는 변경이 원래 배열에도 적용됩니다.
       </para>
      </note>
      <para>
       사용자가 콜백 함수에서 <parameter>array</parameter> 자체를 변경할 수
       없습니다. 즉, 원소를 추가/삭제, 원소를 unset하는 등. 
       <function>array_walk</function>에 적용된 배열이 변경되면, 이 함수의
       동작은 정의되지 않고, 예측할 수 없습니다.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>userdata</parameter></term>
     <listitem>
      <para>
       선택적인 <parameter>userdata</parameter> 인수가 제공되면,
       <parameter>funcname</parameter> 콜백의 세번째 인수로 넘겨집니다.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   <parameter>funcname</parameter> 함수가 주어진 것보다 더 많은 인수를
   요구하면 <function>array_walk</function>가 <parameter>funcname</parameter>을
   호출할 때마다 <link linkend="errorfunc.constants">E_WARNING</link> 등급의
   오류가 발생한다. 이런 경고는 <function>array_walk</function> 호출에 PHP
   오류 연산자 <link linkend="language.operators.errorcontrol">@</link>를
   덧붙이거나, <function>error_reporting</function>을 사용해서 은폐할 수 있다.
  </para>
 </refsect1>
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.0.0</entry>
       <entry>
        <parameter>funcname</parameter>에 key와
        <parameter>userdata</parameter>를 전달하는 기능이 추가.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>array_walk</function> 예제</title>
    <programlisting role="php">
<![CDATA[
<?php
$fruits = array("d" => "lemon", "a" => "orange", "b" => "banana", "c" => "apple");

function test_alter(&$item1, $key, $prefix)
{
    $item1 = "$prefix: $item1";
}

function test_print($item2, $key)
{
    echo "$key. $item2<br />\n";
}

echo "Before ...:\n";
array_walk($fruits, 'test_print');

array_walk($fruits, 'test_alter', 'fruit');
echo "... and after:\n";

array_walk($fruits, 'test_print');
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Before ...:
d. lemon
a. orange
b. banana
c. apple
... and after:
d. fruit: lemon
a. fruit: orange
b. fruit: banana
c. fruit: apple
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_walk_recursive</function></member>
    <member><function>iterator_apply</function></member>
    <member><function>create_function</function></member>
    <member><function>list</function></member>
    <member><function>each</function></member>
    <member><function>call_user_func_array</function></member>
    <member><function>array_map</function></member>
    <member>&seealso.callback;</member>
    <member><link linkend="control-structures.foreach">foreach</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
