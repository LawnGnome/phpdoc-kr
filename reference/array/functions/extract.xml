<?xml version="1.0" encoding="utf-8"?>
<!-- splitted from ./kr/functions/array.xml, last change in rev 1.4 -->
<!-- last change to 'extract' in en/ tree in rev 1.2 -->
	<refentry id="function.extract">
		<refnamediv>
			<refname>extract</refname>
			<refpurpose>
     Import variables into the symbol table from an array
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>설명</title>
				<methodsynopsis>
					<type>void</type><methodname>extract</methodname>
					<methodparam><type>array</type><parameter>var_array</parameter></methodparam>
					<methodparam choice="opt"><type>int</type><parameter>
							extract_type
						</parameter></methodparam>
					<methodparam choice="opt"><type>string</type><parameter>
							prefix
						</parameter></methodparam>
				</methodsynopsis>
			<para>
     This function is used to import variables from an array into the
     current symbol table.  It takes associative array
     <parameter>var_array</parameter> and treats keys as variable
     names and values as variable values.  For each key/value pair it
     will create a variable in the current symbol table, subject to
     <parameter>extract_type</parameter> and
     <parameter>prefix</parameter> parameters.
    </para>
			<para>
				<function>extract</function> checks for colissions with existing
     variables.  The way collisions are treated is determined by
     <parameter>extract_type</parameter>. It can be one of the
     following values:
     <variablelist>
					<varlistentry>
						<term>EXTR_OVERWRITE</term>
						<listitem>
							<simpara>
     If there is a collision, overwrite the existing variable.
    </simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>EXTR_SKIP</term>
						<listitem>
							<simpara>
     If there is a collision, don't overwrite the existing
     variable.
    </simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>EXTR_PREFIX_SAME</term>
						<listitem>
							<simpara>If there is a collision, prefix the new variable with
    <parameter>prefix</parameter>.
    </simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>EXTR_PREFIX_ALL</term>
						<listitem>
							<simpara>
     Prefix all variables with <parameter>prefix</parameter>.
    </simpara>
						</listitem>
					</varlistentry>
				</variablelist>
			</para>
			<para>
     If <parameter>extract_type</parameter> is not specified, it is
     assumed to be EXTR_OVERWRITE.
    </para>
			<para>
     Note that <parameter>prefix</parameter> is only required if
     <parameter>extract_type</parameter> is EXTR_PREFIX_SAME or
     EXTR_PREFIX_ALL.
    </para>
			<para>
				<function>extract</function> checks each key to see if it
     constitues a valid variable name, and if it does only then does
     it proceed to import it.
    </para>
			<para>
     A possible use for extract is to import into symbol table
     variables contained in an associative array returned by
     <function>wddx_deserialize</function>.
    </para>
			<para>
				<example>
					<title>
						<function>extract</function> example</title>
					<programlisting role="php">
&lt;?php

/* Suppose that $var_array is an array returned from
   wddx_deserialize */

$size = "large";
$var_array = array ("color" =&gt; "blue",
                    "size"  =&gt; "medium",
                    "shape" =&gt; "sphere");
extract ($var_array, EXTR_PREFIX_SAME, "wddx");

print "$color, $size, $shape, $wddx_size\n";

?>
      </programlisting>
				</example>
			</para>
			<para>
     The above example will produce:
     <programlisting>
blue, large, sphere, medium
     </programlisting>
			</para>
			<para>
     The <varname>$size</varname> wasn't overwritten, becaus we
     specified EXTR_PREFIX_SAME, which resulted in
     <varname>$wddx_size</varname> being created.  If EXTR_SKIP was
     specified, then $wddx_size wouldn't even have been created.
     EXTR_OVERWRITE would have cause <varname>$size</varname> to have
     value "medium", and EXTR_PREFIX_ALL would result in new variables
     being named <varname>$wddx_color</varname>,
     <varname>$wddx_size</varname>, and
     <varname>$wddx_shape</varname>.
    </para>
			<para>
     You must use an associative array, a numerically indexed array
     will not produce results.
    </para>
			<para>
     See also: <function>compact</function>.
    </para>
		</refsect1>
	</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
