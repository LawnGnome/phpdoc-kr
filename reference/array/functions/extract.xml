<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1.24 Maintainer: progcom Status: ready -->
<!-- CREDITS: fuzzy74 -->
<refentry xml:id="function.extract" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>extract</refname>
  <refpurpose>배열에서 현재 심볼 테이블로 변수를 입력</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>extract</methodname>
   <methodparam><type>array</type><parameter>var_array</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>extract_type</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>prefix</parameter></methodparam>
  </methodsynopsis>
  <para>
   배열에서 현재 심볼 테이블로 변수를 가져옵니다.
  </para>
  <para>
   <function>extract</function>는 각 키가 유효한 변수명이 되는지 확인합니다.
   심볼 테이블에 존재하는 변수와의 충돌 여부도 확인합니다.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var_array</parameter></term>
     <listitem>
      <para>
       연관 배열. 변수명을 키로,
       변수값을 값으로 취급한다. <parameter>extract_type</parameter>과
       <parameter>prefix</parameter> 인수에 따라 각 키/값 쌍에 대해서 
       현재 심볼 테이블안에 변수를 생성한다.
      </para>
      <para>
       연관 배열을 사용해야 합니다. 숫자 인덱스 배열은
       <constant>EXTR_PREFIX_ALL</constant>이나
       <constant>EXTR_PREFIX_INVALID</constant>를 사용하지 않는 한 결과를
       생성하지 않습니다.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>extract_type</parameter></term>
     <listitem>
      <para>
       유효하지않은/숫자 키와 충돌인 경우를 취급하는 방법은
       <parameter>extract_type</parameter>에 의해 결정된다.
       다음 값들 중 하나가 될 수 있다:
       <variablelist>
        <varlistentry>
         <term><constant>EXTR_OVERWRITE</constant></term>
         <listitem>
          <simpara>
           충돌이 발생하면, 기존 변수를 덮어쓴다.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_SKIP</constant></term>
         <listitem>
          <simpara>
           충돌이 발생하면, 기존 변수를 덮어쓰지 않는다.
           variable.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_SAME</constant></term>
         <listitem>
          <simpara>충돌이 발생하면, <parameter>prefix</parameter>를
           변수명 앞에 첨가한다.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_ALL</constant></term>
         <listitem>
          <simpara>
           <parameter>prefix</parameter>를 모든 변수명 앞에 첨가한다.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_INVALID</constant></term>
         <listitem>
          <simpara>
           유효하지 않은/숫자 변수명 앞에만 <parameter>prefix</parameter>를 
           첨가한다.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_IF_EXISTS</constant></term>
         <listitem>
          <simpara>
           현재 심볼 테이블에 이미 존재하는 변수만 덮어쓴다. 그렇지 않으면
           아무것도 하지 않는다. 이 플래그는 유효한 변수 목록을 정의하고
           이 변수들만 추출하는데 유용하다. 예를 들어, 이런 변수는 
           <varname>$_REQUEST</varname>에서 정의된 변수들이다.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_IF_EXISTS</constant></term>
         <listitem>
          <simpara>
           현재 심볼 테이블에 앞첨가된 버전의 같은 변수가 존재할때만
           앞첨가된 변수명을 생성한다.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_REFS</constant></term>
         <listitem>
          <simpara>
           변수를 참조로써 추출한다. 입력된 변수 값이 
           <parameter>var_array</parameter> 인수의 값을 참조한다는 의미를
           갖는다. 이 플래그는 그 자체로나 다른 플래그와 OR 연산하여 
           <parameter>extract_type</parameter>에서 사용할수 있다.
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       <parameter>extract_type</parameter>가 설정되지 않으면,
       <constant>EXTR_OVERWRITE</constant>가 설정되어 있다고 가정한다.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>prefix</parameter></term>
     <listitem>
      <para>
       <parameter>prefix</parameter>는
       <parameter>extract_type</parameter>이 <constant>EXTR_PREFIX_SAME</constant>,
       <constant>EXTR_PREFIX_ALL</constant>, <constant>EXTR_PREFIX_INVALID</constant>,
       <constant>EXTR_PREFIX_IF_EXISTS</constant>일 경우에만 요구된다.
       덧붙인 결과가 유효한 변수명이 아니면, 심볼 테이블에 입력되지 않는다.
       Prefix는 밑줄 문자로 배열 키와 자동으로 분리됩니다.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   심볼 테이블에 성공적으로 입력된 변수의 수를 반환한다.
  </para>
 </refsect1>
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.3.0</entry>
       <entry>
        <constant>EXTR_REFS</constant> 추가.
       </entry>
      </row>
      <row>
       <entry>4.2.0</entry>
       <entry>
        <constant>EXTR_IF_EXISTS</constant>와
        <constant>EXTR_PREFIX_IF_EXISTS</constant> 추가.
       </entry>
      </row>
      <row>
       <entry>4.0.5</entry>
       <entry>
        추출한 변수의 수를 반환합니다.
        <constant>EXTR_PREFIX_INVALID</constant> 추가.
        <constant>EXTR_PREFIX_ALL</constant>이 숫자 변수도 포함합니다.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>extract</function> 예제</title>
    <para>
     <function>wddx_deserialize</function>에서 반환한 연관 배열에 포함되어
     있는 변수들을 심볼 테이블로 가져오기 위해서
     <function>extract</function>를 사용할 수 있습니다.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

/* $var_array가 wddx_deserialize에서 반환한
   배열이라고 가정합시다 */

$size = "large";
$var_array = array("color" => "blue",
                   "size"  => "medium",
                   "shape" => "sphere");
extract($var_array, EXTR_PREFIX_SAME, "wddx");

echo "$color, $size, $shape, $wddx_size\n";

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
blue, large, sphere, medium
]]>
    </screen>
    <para>
     <varname>$size</varname>는 덮어씌어지지 않았다, 왜냐하면 
     <constant>EXTR_PREFIX_SAME</constant>를 설정했기 때문이다.
     결과적으로 <varname>$wddx_size</varname>가 생성되었다.
     <constant>EXTR_SKIP</constant>가 설정되어 있으면,
     <constant>EXTR_OVERWRITE</constant> 는 <varname>$size</varname>가
     "medium" 값을 갖게 하고 <constant>EXTR_PREFIX_ALL</constant>는
     새로운 변수인 <varname>$wddx_color</varname>,
     <varname>$wddx_size</varname>, <varname>$wddx_shape</varname>를 
     갖게한다.
    </para>
   </example>
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    <function>extract</function>를 사용자 입력(<varname>$_GET</varname>,
    ...)같은 신뢰할 수 없는 데이터에 사용하지 마십시오. 예를 들어, <link
     linkend="security.globals">register_globals</link>에 의존하는 오래된
    코드를 실행하기 위해 임시적으로 사용한다면, <constant>EXTR_SKIP</constant>
    등의 덮어쓰지 않는 <parameter>extract_type</parameter>을 사용하고, <link
     linkend="ini">&php.ini;</link> 안에 정의되어 있는 <link
     linkend="ini.variables-order">variables_order</link>와 같은 순서로
    추출해야 합니다.
   </para>
  </warning>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>compact</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
