<?xml version="1.0" encoding="utf-8"?>
<!-- splitted from ./kr/functions/array.xml, last change in rev 1.4 -->
<!-- last change to 'usort' in en/ tree in rev 1.2 -->
	<refentry id="function.usort">
		<refnamediv>
			<refname>usort</refname>
			<refpurpose>
     Sort an array by values using a user-defined comparison function
    </refpurpose>
		</refnamediv>
		<refsect1>
			<title>설명</title>
				<methodsynopsis>
					<type>void</type><methodname>usort</methodname>
					<methodparam><type>array</type><parameter>array</parameter></methodparam>
					<methodparam><type>string</type><parameter>cmp_function</parameter></methodparam>
				</methodsynopsis>
			<para>
     This function will sort an array by its values using a
     user-supplied comparison function.  If the array you wish to sort
     needs to be sorted by some non-trivial criteria, you should use
     this function.
    </para>
			<para>
     The comparison function must return an integer less than, equal
     to, or greater than zero if the first argument is considered to
     be respectively less than, equal to, or greater than the
     second. If two members compare as equal, their order in the
     sorted array is undefined.
    </para>
			<para>
				<example>
					<title>
						<function>usort</function> example</title>
					<programlisting role="php">
function cmp ($a, $b) {   
    if ($a == $b) return 0;
    return ($a > $b) ? -1 : 1;
}

$a = array (3, 2, 5, 6, 1);

usort ($a, "cmp");

while (list ($key, $value) = each ($a)) {
    echo "$key: $value\n";
}
      </programlisting>
				</example>
			</para>
			<para>
     This example would display:
    </para>
			<para>
				<informalexample>
					<programlisting>
0: 6
1: 5
2: 3
3: 2
4: 1
      </programlisting>
				</informalexample>
			</para>
			<note>
				<para>
      Obviously in this trivial case the <function>rsort</function>
      function would be more appropriate.
     </para>
			</note>
			<para>
				<example>
					<title>
						<function>usort</function> example using multi-dimensional array
      </title>
					<programlisting role="php">
function cmp ($a, $b) {
    return strcmp($a["fruit"],$b["fruit"]);
} 

$fruits[0]["fruit"] = "lemons";
$fruits[1]["fruit"] = "apples";
$fruits[2]["fruit"] = "grapes";

usort($fruits, "cmp"); 

while (list ($key, $value) = each ($fruits)) {
    echo "\$fruits[$key]: " . $value["fruit"] . "\n";
}
      </programlisting>
				</example>
			</para>
			<para>
     When sorting a multi-dimensional array, $a and $b contain
     references to the first index of the array.
    </para>
			<para>
     This example would display:
    </para>
			<para>
				<informalexample>
					<programlisting>
$fruits[0]: apples
$fruits[1]: grapes
$fruits[2]: lemons
      </programlisting>
				</informalexample>
			</para>
			<para>
				<warning>
					<para>
       The underlying quicksort function in some C libraries (such as
       on Solaris systems) may cause PHP to crash if the comparison
       function does not return consistent values.
      </para>
				</warning>
			</para>
			<para>
     See also: <function>uasort</function>, <function>uksort</function>, 
     <function>sort</function>, <function>asort</function>,
     <function>arsort</function>,<function>ksort</function>,
     <function>natsort</function>, and <function>rsort</function>.
    </para>
		</refsect1>
	</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
