<?xml version="1.0" encoding="utf-8"?>
<!-- splitted from ./kr/functions/var.xml, last change in rev 1.1 -->
<!-- last change to 'unset' in en/ tree in rev 1.2 -->
  <refentry id="function.unset">
   <refnamediv>
    <refname>unset</refname>
    <refpurpose>Unset a given variable</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>int</type><methodname>unset</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><parameter>...</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>unset</function> destroys the specified variables and
     returns &true;.
    </para>
    <para>
     <example>
      <title><function>unset</function> example</title>
      <programlisting role="php">
// destroy a single variable
unset ($foo);

// destroy a single element of an array
unset ($bar['quux']);

// destroy more than one variable
unset ($foo1, $foo2, $foo3);
      </programlisting>
     </example>
    </para>
    <para>
     The behavior of <function>unset</function> inside of a function
     can vary depending on what type of variable you are attempting to
     destroy.
    </para>
    <para>
     If a globalized variable is <function>unset</function> inside of
     a function, only the local variable is destroyed.  The variable
     in the calling environment will retain the same value as before
     <function>unset</function> was called.
     <informalexample>
      <programlisting role="php">
function destroy_foo() {
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
      </programlisting>
     </informalexample>
     The above example would output:
     <informalexample>
      <programlisting>
bar
      </programlisting>
     </informalexample>
    </para>
    <para>
     If a variable that is PASSED BY REFERENCE is
     <function>unset</function> inside of a function, only the local
     variable is destroyed.  The variable in the calling environment
     will retain the same value as before <function>unset</function>
     was called.
     <informalexample>
      <programlisting role="php">
function foo(&amp;$bar) { 
    unset($bar); 
    $bar = "blah"; 
}

$bar = 'something';
echo "$bar\n";

foo($bar);
echo "$bar\n";
      </programlisting>
     </informalexample>
     The above example would output:
     <informalexample>
      <programlisting>
something
something
      </programlisting>
     </informalexample>
    </para>
    <para>
     If a static variable is <function>unset</function> inside of a
     function, <function>unset</function> unsets the reference to the
     static variable, rather than the static variable itself.
     <informalexample>
      <programlisting role="php">
function foo() { 
    static $a;
    $a++;
       echo "$a\n";

    unset($a);
}

foo();
foo();
foo();
      </programlisting>
     </informalexample>
     The above example would output:
     <informalexample>
      <programlisting>
1
2
3
      </programlisting>
     </informalexample>
    </para>
    <para>
     If you would like to <function>unset</function> a global variable inside of a function, you can use the <parameter>$GLOBALS</parameter> array to do so:
     <informalexample>
      <programlisting role="php">
function foo() {
    unset($GLOBALS['bar']);       
}

$bar = "something";
foo();
      </programlisting>
     </informalexample>
    </para>
    <para>
     See also <function>isset</function> and
     <function>empty</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
