<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1.9 Maintainer: progcom Status: ready -->
  <refentry id="function.unset">
   <refnamediv>
    <refname>unset</refname>
    <refpurpose>주어진 변수를 제거합니다.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>설명</title>
     <methodsynopsis>
      <type>void</type><methodname>unset</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><parameter>...</parameter></methodparam>
     </methodsynopsis>

    <para>
     <function>unset</function>은 주어진 변수를 파괴합니다. PHP 3에서,
     <function>unset</function>은 항상 &true;를 반환했습니다. (정확히는,
     정수값 1) 그러나 PHP 4에서, <function>unset</function>은 true 함수가
     아닙니다: 이제 구문입니다. 아무 값도 반환하지 않고,
     <function>unset</function>의 결과를 가져오려고 하면 parse 에러가
     생성됩니다. 
    </para>
    <para>
     <example>
      <title><function>unset</function> 예제</title>
      <programlisting role="php">
<![CDATA[
<?php
// 하나의 변수를 파괴
unset($foo);

// 배열의 한 요소를 파괴
unset($bar['quux']);

// 하나 이상의 변수를 파괴
unset($foo1, $foo2, $foo3);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     함수 안에서 <function>unset</function>의 행동은 어떠한 변수형을 파괴하려
     했는지에 따라 달라집니다.
    </para>
    <para>
     함수 안에서 전역 변수를 <function>unset</function>하면, 로컬 변수만
     파괴됩니다. 호출한 환경에서 변수는 <function>unset</function>을 호출하기
     전과 같은 값을 유지합니다.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function destroy_foo()
{
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
?>
]]>
      </programlisting>
     </informalexample>
     위 예제의 출력:
     <informalexample>
      <screen>
<![CDATA[
bar
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     함수 안에서 참조로 넘겨진 변수를 <function>unset</function>하면, 로컬
     변수만이 파괴됩니다. 호출한 함수에서 변수는 <function>unset</function>을
     호출하기 전과 동일한 값을 유지합니다.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function foo(&$bar)
{
    unset($bar);
    $bar = "blah";
}

$bar = 'something';
echo "$bar\n";

foo($bar);
echo "$bar\n";
?>
]]>
      </programlisting>
     </informalexample>
     위 예제의 출력:
     <informalexample>
      <screen>
<![CDATA[
something
something
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     함수 안에서 정적 변수를 <function>unset</function>하면,
     <function>unset</function>은 변수와 모든 참조를 파괴합니다.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function foo() {
    static $a;
    $a++;
    echo "$a\n";
    unset($a);
}

foo();
foo();
foo();
?>
]]>
      </programlisting>
     </informalexample>
     위 예제의 출력:
     <informalexample>
      <screen>
<![CDATA[
1
2
3
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     함수 안에서 전역 변수를 <function>unset</function>하려면,
     <varname>$GLOBALS</varname> 배열을 사용할 수 있습니다:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function foo() {
    unset($GLOBALS['bar']);
}

$bar = "something";
foo();
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    
    &note.language-construct;
    
    <para>
     참고: <function>isset</function>,
     <function>empty</function>,
     <function>array_splice</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
