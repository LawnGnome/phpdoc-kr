<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 1.20 Maintainer: progcom Status: ready -->
 <reference xml:id="ref.pgsql" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>PostgreSQL 함수</title>
  <titleabbrev>PostgreSQL</titleabbrev>

  <partintro>
   <section xml:id="pgsql.intro">
    &reftitle.intro;
    <para>
     PostgreSQL 데이터베이스는 비용이 필요 없는 오픈 소스 프로덕트입니다.
     본래 UC Berkeley Computer Science Department에서 개발한 Postgres는
     현재 몇몇 상용 데이터베이스에서 채용한 객체관계 개념을 이끌었습니다.
     SQL92/SQL99 언어 지원, 트랜젝션, 참조 관계, 저장 프로시저, 확장 가능한
     타입을 제공합니다. PostgreSQL은 원래의 버클리 코드에서 오픈 소스로
     이어졌습니다.
    </para>
   </section>

   <section xml:id="pgsql.requirements">
    &reftitle.required;
    <para>
     PostgreSQL 지원을 사용하려면, PostgreSQL 6.5 이상이
     필요하며, 모든 PostgreSQL 모듈 기능을 사용하려면 PostgreSQL 7.0
     이상이 필요합니다. PostgreSQL은 멀티바이트 문자 인코딩을 포함하여
     많은 문자 인코딩을 지원합니다. PostgreSQL의 현재 버전과 관련 정보는
     <link xlink:href="&url.pgsql;">&url.pgsql;</link>과
     <link xlink:href="&url.pgsql.techdocs;">&url.pgsql.techdocs;</link>에
     있습니다.
    </para>
   </section>

   &reference.pgsql.configure;

   &reference.pgsql.ini;

   <section xml:id="pgsql.using">
    <title>사용법과 힌트</title>
    <warning>
     <para>
      PostgreSQL 모듈을 PHP 4.0.6과 함께 사용하는 것은 경고 메세지 핸들링의
      버그로 인해 권장하지 않습니다. 4.1.0 이상을 사용하십시오.
     </para>
    </warning>
    <warning>
     <para>
      PostgreSQL 함수 이름은 현재 코딩 표준을 지키기 위해서 4.2.0 릴리즈부터
      변경되었습니다. 대부분의 새 이름은 pg_lo_poen()과 같이 언더스코어가
      추가되었습니다. 몇몇 함수는 일관성을 위해 pg_exec()에서 pg_query()와
      같이 다른 이름으로 변경되었습니다. 옛 이름은 4.2.0과 이후의 몇몇
      릴리즈에서는 사용할 수 있을 것이지만, 차후에 삭제될 것입니다.
     </para>
    <table>
     <title>함수 이름 변경</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>옛 이름</entry>
        <entry>새 이름</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><function>pg_cmdtuples</function></entry>
        <entry><function>pg_affected_rows</function></entry>
       </row>
       <row>
        <entry><function>pg_errormessage</function></entry>
        <entry><function>pg_last_error</function></entry>
       </row>
       <row>
        <entry><function>pg_exec</function></entry>
        <entry><function>pg_query</function></entry>
       </row>
       <row>
        <entry><function>pg_fieldname</function></entry>
        <entry><function>pg_field_name</function></entry>
       </row>
       <row>
        <entry><function>pg_fieldsize</function></entry>
        <entry><function>pg_field_size</function></entry>
       </row>
       <row>
        <entry><function>pg_fieldnum</function></entry>
        <entry><function>pg_field_num</function></entry>
       </row>
       <row>
        <entry><function>pg_fieldprtlen</function></entry>
        <entry><function>pg_field_prtlen</function></entry>
       </row>
       <row>
        <entry><function>pg_fieldisnull</function></entry>
        <entry><function>pg_field_is_null</function></entry>
       </row>
       <row>
        <entry><function>pg_freeresult</function></entry>
        <entry><function>pg_free_result</function></entry>
       </row>
       <row>
        <entry><function>pg_getlastoid</function></entry>
        <entry><function>pg_last_oid</function></entry>
       </row>
       <row>
        <entry><function>pg_loreadall</function></entry>
        <entry><function>pg_lo_read_all</function></entry>
       </row>
       <row>
        <entry><function>pg_locreate</function></entry>
        <entry><function>pg_lo_create</function></entry>
       </row>
       <row>
        <entry><function>pg_lounlink</function></entry>
        <entry><function>pg_lo_unlink</function></entry>
       </row>
       <row>
        <entry><function>pg_loopen</function></entry>
        <entry><function>pg_lo_open</function></entry>
       </row>
       <row>
        <entry><function>pg_loclose</function></entry>
        <entry><function>pg_lo_close</function></entry>
       </row>
       <row>
        <entry><function>pg_loread</function></entry>
        <entry><function>pg_lo_read</function></entry>
       </row>
       <row>
        <entry><function>pg_lowrite</function></entry>
        <entry><function>pg_lo_write</function></entry>
       </row>
       <row>
        <entry><function>pg_loimport</function></entry>
        <entry><function>pg_lo_import</function></entry>
       </row>
       <row>
        <entry><function>pg_loexport</function></entry>
        <entry><function>pg_lo_export</function></entry>
       </row>
       <row>
        <entry><function>pg_numrows</function></entry>
        <entry><function>pg_num_rows</function></entry>
       </row>
       <row>
        <entry><function>pg_numfields</function></entry>
        <entry><function>pg_num_fields</function></entry>
       </row>
       <row>
        <entry><function>pg_result</function></entry>
        <entry><function>pg_fetch_result</function></entry>
       </row>
      </tbody>
     </tgroup>
    </table>
    <para>
     이전의 <function>pg_connect</function>/<function>pg_pconnect</function>
     구문은 차후에 비동기 접속을 지원하기 위해서 배제되어집니다.
     <function>pg_connect</function>과 <function>pg_pconnect</function>을
     위한 접속 문자열을 사용하시기 바랍니다.
    </para>
   </warning>
   <para>
    모든 빌드에서 모든 함수가 지원되는 것은 아닙니다. libpq (PostgreSQL
    C 클라이언트 인터페이스) 버전과 어떻게 컴파일하였는가에 의존합니다.
    빠진 함수가 존재하면, libpq가 그 함수에 필요한 기능을 제공하지
    않는 것입니다.
   </para>
   <para>
    접속하려는 PostgreSQL 서버보다 오래된 libpq를 사용하지 않아야만 합니다.
    PostgreSQL 서버가 요구하는 것보다 오래된 libpq를 사용하면, 문제가 발생할
    수 있습니다.
   </para>
   <para>
    버전 6.3 (1998/03/02)부터 PostgreSQL은 기본값으로 유닉스 도메인 소켓을
    사용합니다. 기본값으로 TCP 포트는 열지 않습니다. 아래의 표는 이 새로운
    접속의 허용을 나타냅니다. 이 소켓은
    <filename>/tmp/.s.PGSQL.5432</filename>에서 발견할 수 있습니다.
    <command>postmaster</command>에 "유닉스 도메인 소켓과 함께 TCP/IP 소켓을
    리슨하라"는 의미의 '-i' 플래그를 지정하여 이 옵션을 활성화 할 수 있습니다.
    <table>
     <title>Postmaster와 PHP</title>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Postmaster</entry>
        <entry>PHP</entry>
        <entry>상태</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>postmaster &amp;</entry>
        <entry>pg_connect("dbname=MyDbName");</entry>
        <entry>OK</entry>
       </row>
       <row>
        <entry>postmaster -i &amp;</entry>
        <entry>pg_connect("dbname=MyDbName");</entry>
        <entry>OK</entry>
       </row>
       <row>
        <entry>postmaster &amp;</entry>
        <entry>pg_connect("host=localhost dbname=MyDbName");</entry>
        <entry>
         Unable to connect to PostgreSQL server: connectDB() failed:
         Is the postmaster running and accepting TCP/IP (with -i)
         connection at 'localhost' on port '5432'? in
         /path/to/file.php on line 20.
        </entry>
       </row>
       <row>
        <entry>postmaster -i &amp;</entry>
        <entry>pg_connect("host=localhost dbname=MyDbName");</entry>
        <entry>OK</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    PostgreSQL 서버에 접속은 명령 문자열에 다음의 값들을 지정해서
    이루어집니다: <command>$conn = pg_connect("host=myHost port=myPort
     tty=myTTY options=myOptions dbname=myDB user=myUser password=myPassword ");
    </command>
   </para>
   <para>
    이전의 구문:
    <command>
     $conn = pg_connect ("host", "port", "options", "tty", "dbname")
    </command>
    은 배제되었습니다.
   </para>
   <para>
    환경 변수가 PostgreSQL 서버/클라이언트 동작에 영향을 줍니다.
    예를 들면, PostgreSQL 모듈은 접속 문자열에 hostname이 빠져 있으면
    PGHOST 환경 변수를 찾아봅니다. 지원하는 환경 변수는 버전에 따라
    다릅니다. 자세한 내용은 PostgreSQL 프로그래머 매뉴얼 (libpq -
    환경 변수)를 참고하십시오.
   </para>
   <para>
    적절한 유저로 환경 변수를 지정하였는지 확인하십시오. 현재 프로세스가
    어떤 환경 변수를 사용할 수 있는지 확인하려면 <literal>$_ENV</literal>나
    <function>getenv</function>를 사용하십시오.
   </para>
   <example>
    <title>기본 파라메터 설정하기</title>
    <programlisting>
<![CDATA[
PGHOST=pgsql.example.com
PGPORT=7890
PGDATABASE=web-system
PGUSER=web-user
PGPASSWORD=secret
PGDATESTYLE=ISO
PGTZ=JST
PGCLIENTENCODING=EUC-JP

export PGHOST PGPORT PGDATABASE PGUSER PGPASSWORD PGDATESTYLE PGTZ PGCLIENTENCODING
]]>
     </programlisting>
    </example>
   </section>

   &reference.pgsql.constants;
   
   <section xml:id="pgsql.examples">
    &reftitle.examples;
    <para>
     PostgreSQL 7.1.0부터, text 타입의 필드에 1GB까지 저장할 수 있습니다.
     이전 버전에서는, 블록 사이즈(기본값은 8KN, 최대값은 32KB, 컴파일 시에
     지정)으로 제한되었었습니다.
    </para>
    <para>
     대형 객체 (lo) 인터페이스를 사용하려면, 트랜젝션 블록에 대형 객체
     함수를 포함할 필요가 있습니다. 트랜젝션 블록은 SQL 구문
     <command>BEGIN</command>로 시작하고, 트랜젝션이 유효하다면
     <command>COMMIT</command>나 <command>END</command>로 종료합니다.
     트랜젝션이 실패하면 트랜젝션은 <command>ROLLBACK</command>이나
     <command>ABORT</command>로 닫아야만 합니다.
     <example>
      <title>대형 객체 사용하지</title>
      <programlisting role="php">
<![CDATA[
<?php
    $database = pg_connect("dbname=jacarta");
    pg_query($database, "begin");
    $oid = pg_lo_create($database);
    echo "$oid\n";
    $handle = pg_lo_open($database, $oid, "w");
    echo "$handle\n";
    pg_lo_write($handle, "large object data");
    pg_lo_close($handle);
    pg_query($database, "commit");
?>
]]>
      </programlisting>
     </example>
     대형 객체를 닫기 전에 PostgreSQL 서버와의 접속을 끊어서는
     안됩니다.
    </para>
   </section>
  </partintro>

&reference.pgsql.entities.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables: 
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
