<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1.19 Maintainer: progcom Status: ready -->
<!-- Generated by xml_proto.php v2.1. Found in /scripts directory of phpdoc. -->
<section xml:id="pdo.constants" xmlns="http://docbook.org/ns/docbook">
 &reftitle.constants;
 &extension.constants;
 <warning>
  <para>
   PDO는 PHP 5.1부터 클래스 상수를 사용합니다. 이전 릴리즈는
   <constant>PDO_PARAM_BOOL</constant> 형식의 전역 상수를 사용합니다.
  </para>
 </warning>
 <variablelist>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_BOOL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     불 자료형을 의미합니다.
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>
    <constant>PDO::PARAM_NULL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     SQL NULL 자료형을 의미합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_INT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     SQL INTEGER 자료형을 의미합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_STR</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     SQL CHAR, VARCHAR, 기타 문자열 자료형을 의미합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_LOB</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     SQL large object 자료형을 의미합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_STMT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     recordset 형을 의미합니다. 현재 지원하는 드라이버는 없습니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_INPUT_OUTPUT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     저장된 프로시져에서 매개 변수를 INOUT 매개 변수로 지정합니다. 이 값은
     명시적인 PDO::PARAM_* 자료형과 비트 OR 연산을 해야 합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_LAZY</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     결과셋에서 각 행이 컬럼 이름을 변수명으로 가지는 객체를 반환하는 페치
     방식을 지정합니다. PDO::FETCH_LAZY는 접근한 것과 동일한 객체 변수명을
     작성합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_ASSOC</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     결과셋에서 각 행이 컬럼 이름을 키로 가지는 배열을 반환하는 페치 방식을
     지정합니다. 결과셋에 동일한 이름을 가지는 컬럼이 여러 개 있을 경우,
     PDO::FETCH_ASSOC는 각 컬럼 이름에서 하나의 값만 반환합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_NAMED</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     결과셋에서 각 행이 컬럼 이름을 키로 가지는 배열을 반환하는 페치 방식을
     지정합니다. 결과셋에 동일한 이름을 가지는 컬럼이 여러 개 있을 경우,
     PDO::FETCH_NAMED는 각 컬럼 이름에 해당하는 값들을 배열로 반환합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_NUM</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     결과셋에서 각 행이 컬럼 번호를 키로 가지는 배열을 반환하는 페치 방식을
     지정합니다. 컬럼 번호는 0부터 시작합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_BOTH</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     결과셋에서 각 행이 컬럼 번호, 컬럼 이름 모두를 키로 가지는 배열을
     반환하는 페치 방식을 지정합니다. 컬럼 번호는 0부터 시작합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_OBJ</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     결과셋에서 각 행이 컬럼 이름과 동일한 프로퍼티를 가지는 객체를 반환하는
     페치 방식을 지정합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_BOUND</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     결과셋에서 컬럼 값을 <function>PDOStatement::bindParam</function>이나
     <function>PDOStatement::bindColumn</function> 메쏘드를 실행한 것 처럼
     바인드하고, TRUE를 반환하는 페치 방식을 지정합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_COLUMN</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     요청한 하나의 컬럼을 결과셋의 다음 행에서 반환하는 페치 방식을
     지정합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_CLASS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     요청한 클래스에 컬럼 이름과 동일한 프로퍼티를 매핑한 새 인스턴스를
     반환하는 페치 방식을 지정합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_INTO</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     요청한 클래스의 존재하는 인스턴스에 컬럼에 해당하는 프로퍼티를 매핑하여
     반환하는 페치 방식을 지정합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_FUNC</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_GROUP</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_UNIQUE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>
    <constant>PDO::FETCH_KEY_PAIR</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     첫번째 컬럼을 키로 가지고, 나머지 컬럼을 값으로 가지는 배열 형식으로
     페치합니다.
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>
    <constant>PDO::FETCH_CLASSTYPE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_SERIALIZE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     PHP 5.1.0부터 사용할 수 있습니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_PROPS_LATE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     PHP 5.2.0부터 사용할 수 있습니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_AUTOCOMMIT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     이 값을 &false;로 하면, PDO는 자동 커밋을 비활성화해서 연결이 트랙잭션을
     시작하도록 합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_PREFETCH</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     프리페치 크기를 정하여 어플리케이션의 메모리 사용량과 속도 사이에
     밸런스를 맞출 수 있도록 합니다. 모든 데이터베이스/드라이버 조합이
     프리페치 크기 설정을 지원하지는 않습니다. 큰 프리페치 크기는 퍼포먼스를
     향상시키지만 메모리를 많이 사용합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_TIMEOUT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     데이터베이스와 통신에서 시간 초과 값을 초 단위로 설정합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_ERRMODE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     이 속성에 대한 정보는 <link linkend='pdo.error-handling'>오류와 오류
      다루기</link>를 참고하십시오.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_SERVER_VERSION</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     읽기 전용 속성입니다; PDO가 접속하고 있는 데이터베이스 서버 버전을
     반환합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_CLIENT_VERSION</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     읽기 전용 속성입니다; PDO 드라이버가 사용하고 있는 클라이언트 라이브러리
     버전을 반환합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_SERVER_INFO</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     읽기 전용 속성입니다; PDO가 접속하고 있는 데이터베이스 서버에 대한 정보를
     반환합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_CONNECTION_STATUS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_CASE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     컬럼 이름의 대소문자를 지정한 PDO::CASE_* 상수에 따라 강제합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_CURSOR_NAME</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     커서로 사용할 이름을 지정하거나 가져옵니다. 스크롤 가능한 커서로
     위치 지정 갱신을 할 때 유용합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_CURSOR</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     커서 형식을 지정합니다. PDO는 현재
     <constant>PDO::CURSOR_FWDONLY</constant>와
     <constant>PDO::CURSOR_SCROLL</constant>을 지원합니다. 스크롤 가능한
     커서가 필요하지 않은 이상 <constant>PDO::CURSOR_FWDONLY</constant>를
     사용하십시오.
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>
    <constant>PDO::ATTR_DRIVER_NAME</constant>
     (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     드라이버 이름을 반환합니다.
    </simpara>
    <para>
     <example><title>using PDO::ATTR_DRIVER_NAME</title>
     <programlisting role='php'>
<![CDATA[
<?php
if ($db->getAttribute(PDO::ATTR_DRIVER_NAME) == 'mysql') {
  echo "mysql 실행중입니다; mysql 한정 명령은 여기서 실행합니다.\n";
}
?>
]]>
     </programlisting>
     </example>
     </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>
    <constant>PDO::ATTR_ORACLE_NULLS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     자료 페치시에 빈 문자열을 SQL NULL 값으로 변경합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_PERSISTENT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 
     새로운 접속을 만드는 대신, 영구 접속을 요청합니다. 이 속성에 대한 정보는
     <link linkend="pdo.connections">접속과 접속 관리</link>를 참고하십시오.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_STATEMENT_CLASS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_FETCH_CATALOG_NAMES</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 
     결과셋에서 반환하는 각 컬럼 이름 앞에 카탈로그 이름을 붙입니다. 카탈로그
     이름과 컬럼 이름 사이는 점으로 구분됩니다. 이 속성은 드라이버에서
     지원합니다; 사용하는 드라이버가 지원하지 않을 수도 있습니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_FETCH_TABLE_NAMES</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 
     결과셋에서 반환하는 각 컬럼 이름 앞에 테이블 이름을 붙입니다. 테이블
     이름과 컬럼 이름 사이는 점(.)으로 구분됩니다. 이 속성은 드라이버에서
     지원합니다; 사용하는 드라이버가 지원하지 않을 수도 있습니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_STRINGIFY_FETCHES</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_MAX_COLUMN_LEN</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 
     PHP 5.2.0부터 사용할 수 있습니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_EMULATE_PREPARES</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     PHP 5.1.3부터 사용할 수 있습니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ERRMODE_SILENT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     오류가 발생했을 때 아무런 오류나 예외를 발생시키지 않습니다. 개발자는
     명시적으로 오류를 확인해야 합니다. 이것이 기본값입니다.
     이 속성에 대한 자세한 정보는 <link linkend='pdo.error-handling'>오류와
      오류 다루기</link>를 참고하십시오.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ERRMODE_WARNING</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     오류가 발생했을 때 PHP E_WARNING 메세지를 발생시킵니다.
     이 속성에 대한 자세한 정보는 <link linkend='pdo.error-handling'>오류와
      오류 다루기</link>를 참고하십시오.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ERRMODE_EXCEPTION</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     오류가 발생했을 때 <classname>PDOException</classname>을 발생시킵니다.
     이 속성에 대한 자세한 정보는 <link linkend='pdo.error-handling'>오류와
      오류 다루기</link>를 참고하십시오.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::CASE_NATURAL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     데이터베이스 드라이버가 반환한 컬럼 이름을 그대로 사용합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::CASE_LOWER</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 
     컬럼 이름을 소문자로 바꿉니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::CASE_UPPER</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     컬럼 이름을 대문자로 바꿉니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::NULL_NATURAL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::NULL_EMPTY_STRING</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::NULL_TO_STRING</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_ORI_NEXT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     결과셋에서 다음 행을 가져옵니다. 스크롤 가능한 커서에서만 사용할 수
     있습니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_ORI_PRIOR</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     결과셋에서 이전 행을 가져옵니다. 스크롤 가능한 커서에서만 사용할 수
     있습니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_ORI_FIRST</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     결과셋에서 처음 행을 가져옵니다. 스크롤 가능한 커서에서만 사용할 수
     있습니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_ORI_LAST</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     결과셋에서 마지막 행을 가져옵니다. 스크롤 가능한 커서에서만 사용할 수
     있습니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_ORI_ABS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     결과셋에서 행 번호로 요청한 행을 가져옵니다. 스크롤 가능한 커서에서만
     사용할 수 있습니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_ORI_REL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     결과셋에서 현재 커서 위치에 대한 상대적 위치로 요청한 요청한 행을
     가져옵니다. 스크롤 가능한 커서에서만 사용할 수 있습니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::CURSOR_FWDONLY</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     PDOStatement 객체를 진행 전용 커서로 생성합니다. 기본값으로써,  PHP에서
     가장 빠르고 일반적인 데이터 접근 방식입니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::CURSOR_SCROLL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     PDOStatement 객체를 스크롤 가능한 커서로 생성합니다. 결과셋에서 가져올
     행을 PDO::FETCH_ORI_* 상수를 사용하여 제어할 수 있습니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ERR_NONE</constant>
     (<type>string</type>)
   </term>
   <listitem>
    <simpara> 
     SQLSTATE '00000'에 해당합니다. SQL 구문이 아무런 오류나 경고 없이
     성공적으로 처리되었음을 의미합니다. <function>PDO::errorCode</function>나
     <function>PDOStatement::errorCode</function>로 오류 발생 여부를 확인할 때
     유용합니다. 물론, 오류 발생 여부는 메쏘드 반환값으로 확인하는 것이
     일반적입니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_EVT_ALLOC</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     이벤트를 할당합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_EVT_FREE</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     이벤트를 제거합니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_EVT_EXEC_PRE</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     준비된 구문을 실행하기 전에 이벤트를 발생시킵니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_EVT_EXEC_POST</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     준비된 구문을 실행한 후에 이벤트를 발생시킵니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_EVT_FETCH_PRE</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     결과셋에서 페치하기 전에 이벤트를 발생시킵니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_EVT_FETCH_POST</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     결과셋에서 페치한 후에 이벤트를 발생시킵니다.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_EVT_NORMALIZE</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     드라이버가 매개변수 이름을 표준화할 수 있도록, 매개변수를 바인드 하는
     동안에 이벤트를 발생시킵니다.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
</section>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
