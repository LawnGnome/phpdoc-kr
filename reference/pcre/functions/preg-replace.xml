<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1.29 Maintainer: progcom Status: ready -->
<refentry xml:id="function.preg-replace" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>preg_replace</refname>
  <refpurpose>정규 표현식 검색과 치환을 수행</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>preg_replace</methodname>
   <methodparam><type>mixed</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>replacement</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>limit</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">count</parameter></methodparam>
  </methodsynopsis>
  <para>
   <parameter>subject</parameter>를 검색하여
   매치된 <parameter>pattern</parameter>을
   <parameter>replacement</parameter>로 치환합니다.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pattern</parameter></term>
     <listitem>
      <para>
       검색할 패턴. 문자열이나 문자열을 가진 배열일 수 있습니다.
      </para>
      <para>
       <literal>/e</literal> 변경자는 <function>preg_replace</function>가
       <parameter>replacement</parameter> 인수를 참조 치환을 하고 PHP
       코드로 취급하도록 합니다. 팁: <parameter>replacement</parameter>가
       정상적인 PHP 코드 문자열을 가지게 하십시오. 그렇지 않으면, PHP는
       <function>preg_replace</function>를 포함하는 줄에서 해석 오류를
       일으킵니다.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>replacement</parameter></term>
     <listitem>
      <para>
       치환할 문자열이나 문자열을 가진 배열. 이 인수가 문자열이고
       <parameter>pattern</parameter> 인수가 배열이면, 모든 패턴은 해당
       문자열로 치환됩니다. <parameter>pattern</parameter>과
       <parameter>replacement</parameter> 인수가 모두 배열이면, 각
       <parameter>pattern</parameter>은 해당하는
       <parameter>replacement</parameter>로 치환됩니다.
       <parameter>pattern</parameter> 배열보다
       <parameter>replacement</parameter> 배열보다 적은 원소를 가지고 있으면,
       남는 <parameter>pattern</parameter>은 빈 문자열로 치환됩니다.
      </para>
      <para>
       <parameter>replacement</parameter>는
       <literal>\\<replaceable>n</replaceable></literal>나 (PHP 4.0.4부터)
       <literal><replaceable>$n</replaceable></literal> 형태의 참조를 포함할
       수 있습니다. 그러한 모든 참조는 <replaceable>n</replaceable>번째로
       잡은 괄호 패턴으로 대체됩니다. <replaceable>n</replaceable>은 0에서
       99까지 가능하고, <literal>\\0</literal>나 <literal>$0</literal>는
       전체 패턴에 매치한 텍스트를 의미합니다. 괄호를 여는것은 서브패턴을
       포함하여 왼쪽에서 오른쪽(1로부터 시작)으로 카운트합니다. replacement에
       백슬래시를 사용할 때는, 이중으로 해야 합니다. (<literal>"\\\\"</literal>
       PHP 문자열)
      </para>
      <para>
       역참조 바로 뒤에 다른 숫자가 따라오는 패턴을 사용할 때는(즉, 매치된
       패턴 바로 뒤에 수 문자가 위치), <literal>\\1</literal> 식의 역참조를
       사용할 수 없습니다. 예를 들면, <literal>\\11</literal>은
       <function>preg_replace</function>에서 문자 <literal>1</literal>이
       따라오는 역참조 <literal>\\1</literal>인지, 역참조
       <literal>\\1</literal>인지 구분할 수 없습니다. 이 경우, 해결책은
       <literal>\${1}1</literal>를 사용합니다. 이는 독립된 역참조
       <literal>$1</literal>를 작성하고, <literal>1</literal>을 문자로
       남겨놓습니다.
      </para>
      <para>
       <literal>e</literal> 변경자를 사용할 때, 이 함수는 역참조로 치환한
       문자열에서 몇몇 문자(<literal>'</literal>, <literal>"</literal>,
       <literal>\</literal>, NULL)를 이스케이프합니다. 이는 홑따옴표나
       곁따옴표로 이루어진 역참조 사용에서 구문 오류를 막기 위해서
       이루어집니다. (예. <literal>'strlen(\'$1\')+strlen("$2")'</literal>)
       PHP의 <link linkend="language.types.string">문자열 구문</link>을
       확인하여 문자열이 어떻게 해석되고 보여지는지 정확히 이해할 필요가
       있습니다.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>subject</parameter></term>
     <listitem>
      <para>
       검색 치환할 문자열이나 문자열을 가진 배열.
      </para>
      <para>
       <parameter>subject</parameter>가 배열이면, 검색 치환은 모든
       <parameter>subject</parameter>에 이루어지고, 반환값도 배열이 됩니다.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>limit</parameter></term>
     <listitem>
      <para>
       각 <parameter>subject</parameter> 문자열에 대한 각 패턴의 최대 치환수.
       기본값은 <literal>-1</literal>. (무제한)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>count</parameter></term>
     <listitem>
      <para>
       지정하면, 이 변수는 치환이 일어난 횟수로 채워집니다.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>preg_replace</function>는 <parameter>subject</parameter> 인수엣
   따라서 배열이나 문자열을 반환합니다.
  </para>
  <para>
   매치가 발견되면 새 <parameter>subject</parameter>를 반환하고, 그렇지 않으면
   변경되지 않은 <parameter>subject</parameter>를 반환합니다. 오류가 발생하면
   &null;을 반환합니다.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.0</entry>
       <entry>
        <parameter>count</parameter> 인수 추가
       </entry>
      </row>
      <row>
       <entry>4.0.4</entry>
       <entry>
        <parameter>replacement</parameter> 인수에 '$n' 형식 추가
       </entry>
      </row>
      <row>
       <entry>4.0.2</entry>
       <entry>
        <parameter>limit</parameter> 인수 추가
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>수가 따라오는 역참조 사용하기</title>
    <programlisting role="php">
<![CDATA[
<?php
$string = 'April 15, 2003';
$pattern = '/(\w+) (\d+), (\d+)/i';
$replacement = '${1}1,$3';
echo preg_replace($pattern, $replacement, $string);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
April1,2003
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>preg_replace</function>와 인덱스 배열 사용하기</title>
    <programlisting role="php">
<![CDATA[
<?php
$string = 'The quick brown fox jumped over the lazy dog.';
$patterns[0] = '/quick/';
$patterns[1] = '/brown/';
$patterns[2] = '/fox/';
$replacements[2] = 'bear';
$replacements[1] = 'black';
$replacements[0] = 'slow';
echo preg_replace($patterns, $replacements, $string);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
The bear black slow jumped over the lazy dog.
]]>
    </screen>
    <para>
     patterns와 replacements를 ksort해서, 원하던 결과를 얻습니다.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
ksort($patterns);
ksort($replacements);

echo preg_replace($patterns, $replacements, $string);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
The slow black bear jumped over the lazy dog.
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>여러 값 치환하기</title>
    <programlisting role="php">
<![CDATA[
<?php
$patterns = array ('/(19|20)(\d{2})-(\d{1,2})-(\d{1,2})/',
                   '/^\s*{(\w+)}\s*=/');
$replace = array ('\3/\4/\1\2', '$\1 =');
echo preg_replace($patterns, $replace, '{startDate} = 1999-5-27');
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
$startDate = 5/27/1999
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>'e' 변경자 사용하기</title>
    <programlisting role="php">
<![CDATA[
<?php
preg_replace("/(<\/?)(\w+)([^>]*>)/e", 
             "'\\1'.strtoupper('\\2').'\\3'", 
             $html_body);
?>
]]>
    </programlisting>
    <para>
     위 예제는 입력된 텍스트의 모든 HTML 태그를 대문자로 변경합니다.
    </para>
   </example>
  </para>
  <para>
   <example>
    <title>공백 제거하기</title>
    <para>
     이 예제는 문자열에서 초과된 공백을 제거합니다.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$str = 'foo   o';
$str = preg_replace('/\s\s+/', ' ', $str);
// 이제 'foo o'가 됩니다.
echo $str;
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><parameter>count</parameter> 인수 사용하기</title>
    <programlisting role="php">
<![CDATA[
<?php
$count = 0;

echo preg_replace(array('/\d/', '/\s/'), '*', 'xp 4 to', -1, $count);
echo $count; //3
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
xp***to
3
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    <parameter>pattern</parameter>과 <parameter>replacement</parameter>에
    배열을 사용할 때, 키는 배열에 나타난 순서대로 처리합니다. 동일한 숫자
    인덱스 순서를 가질 <emphasis>필요가 없습니다</emphasis>. 어떤
    <parameter>pattern</parameter>이 <parameter>replacement</parameter>로
    치환할 지 인덱스로 정한다면, <function>preg_replace</function>를 호출하기
    전에 각 배열에 <function>ksort</function>를 수행해야 합니다.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>preg_match</function></member>
    <member><function>preg_replace_callback</function></member>
    <member><function>preg_split</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
