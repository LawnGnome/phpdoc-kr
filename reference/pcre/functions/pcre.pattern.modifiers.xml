<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.5 -->
  <refentry id="pcre.pattern.modifiers">
   <refnamediv>
    <refname>패턴 변경자</refname>
    <refpurpose>정규표현식 패턴에 존재하는 변경자의 설명</refpurpose>
   </refnamediv>
   <refsect1>
    <title>설명</title>
    <para>
     아래 목록은 현재 존재하는 PCRE 변경자입니다. 괄호 안의 이름은
     각 변경자에 대한 PCRE 내부의 이름입니다.
    </para>
    <para>
     <blockquote>
      <variablelist>
       <varlistentry>
    <term><emphasis>i</emphasis> (PCRE_CASELESS)</term>
    <listitem>
     <simpara>
      이 변경자를 지정하면, 패턴의 문자는 대문자와 소문자를
      구별하지 않습니다.
     </simpara>
    </listitem>
       </varlistentry>
       <varlistentry>
    <term><emphasis>m</emphasis> (PCRE_MULTILINE)</term>
    <listitem>
     <simpara>
      기본적으로, PCRE는 주어진 문자열을 하나의 "줄"로 취급합니다.
      (실제로 몇개의 라인을 가지더라도) "줄 시작" 메타문자(^)는
      문자열의 처음만을 인식하며, "줄 끝" 메타문자($)는 문자열의
      끝이나 (<emphasis>D</emphasis> 변경자가 지정되지 않는 한)
      마지막 뉴라인의 직전만을 인식합니다. 이는 펄과 같습니다.
     </simpara>
     <simpara>
      이 변경자를 지정하면, "줄 시작"과 "줄 끝"은 주어진 문자열의
      모든 뉴라인 직후와 직전을 인식합니다. respectively, as
      well as at the very start and end. 이는 펄의 /m 변경자와
      동일합니다. 주어진 문자열에 "\n" 문자가 존재하지 않거나
      ^나 $ 패턴이 일어나지 않으면 이 변경자는 아무런 효과가 없습니다.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><emphasis>s</emphasis> (PCRE_DOTALL)</term>
    <listitem>
     <simpara>
      이 변경자가 지정되면, 패턴의 점 메타문자는 뉴라인을 포함하는
      모든 문자를 인식합니다. 지정하지 않으면, 뉴라인은 제외됩니다.
      이 변경자는 펄의 /s 변경자와 동일합니다. [^a]와 같은 부정클래스는
      이 변경자에 관계 없이 항상 뉴라인 문자를 포함합니다.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><emphasis>x</emphasis> (PCRE_EXTENDED)</term>
    <listitem>
     <simpara>
      이 변경자가 지정되면, 공백 문자는 이스케이프 되거나 문자 클래스
      안에 있을 경우를 제외하고, 완전히 무시합니다. 문자 클래스 밖에서
      이스케이프 되지 않은 # 사이와 뉴라인 문자 다음의 문자도 무시합니다.
      이는 펄의 /x 변경자와 같고, 복잡한 패턴 안에 코멘트를 사용할 수
      있게 합니다. 그러나 이는 데이터 문자에만 해당하는 점에 주의하십시오.
      공백 문자는 패턴의 특별한 문자 시퀀스 안에는 존재할 수 없습니다.
      예를 들면, 조건 서브 패턴을 나타내는 (?( 시퀀스에는 나와서는 안됩니다.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><emphasis>e</emphasis></term>
    <listitem>
     <simpara>
      이 변경자를 지정하면, <function>preg_replace</function>는
      변경할 문자열을 PHP 코드로 처리하고, 그 결과를 검색된 문자열의
      이용하여 일반적인 치환을 합니다.
     </simpara>
     <para>
      <function>preg_replace</function>만이 이 변경자를 사용합니다;
      다른 PCRE 함수에서는 무시합니다.
      <note>
       <simpara>
        이 변경자는 PHP3에서는 사용할 수 없습니다.
       </simpara>
      </note>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><emphasis>A</emphasis> (PCRE_ANCHORED)</term>
    <listitem>
     <simpara>
      If this modifier is set, the pattern is forced to be
      "anchored", that is, it is constrained to match only at the
      start of the string which is being searched (the "subject
      string").  This effect can also be achieved by appropriate
      constructs in the pattern itself, which is the only way to
      do it in Perl.
     </simpara>
    </listitem>
       </varlistentry>
       <varlistentry>
    <term><emphasis>D</emphasis> (PCRE_DOLLAR_ENDONLY)</term>
    <listitem>
     <simpara>
      If this modifier is set, a dollar metacharacter in the pattern
      matches only at the end of the subject string. Without this
      modifier, a dollar also matches immediately before the final
      character if it is a newline (but not before any other
      newlines).  This modifier is ignored if <emphasis>m</emphasis>
      modifier is set. There is no equivalent to this modifier in
      Perl.
     </simpara>
    </listitem>
       </varlistentry>
       <varlistentry>
    <term><emphasis>S</emphasis></term>
    <listitem>
     <simpara>
      When a pattern is going to be used several times, it is
      worth spending more time analyzing it in order to speed up
      the time taken for matching. If this modifier is set, then
      this extra analysis is performed. At present, studying a
      pattern is useful only for non-anchored patterns that do not
      have a single fixed starting character.
     </simpara>
    </listitem>
       </varlistentry>
       <varlistentry>
    <term><emphasis>U</emphasis> (PCRE_UNGREEDY)</term>
    <listitem>
     <simpara>
      This modifier inverts the "greediness" of the quantifiers so
      that they are not greedy by default, but become greedy if
      followed by "?". It is not compatible with Perl. It can also
      be set by a (?U) modifier setting within the pattern.
     </simpara>
    </listitem>
       </varlistentry>
       <varlistentry>
    <term><emphasis>X</emphasis> (PCRE_EXTRA)</term>
    <listitem>
     <simpara>
      This modifier turns on additional functionality of PCRE that
      is incompatible with Perl. Any backslash in a pattern that
      is followed by a letter that has no special meaning causes
      an error, thus reserving these combinations for future
      expansion. By default, as in Perl, a backslash followed by a
      letter with no special meaning is treated as a literal.
      There are at present no other features controlled by this
      modifier.
     </simpara>
    </listitem>
       </varlistentry>
       <varlistentry>
    <term><emphasis>u</emphasis> (PCRE_UTF8)</term>
    <listitem>
     <simpara>
      This modifier turns on additional functionality of PCRE that
      is incompatible with Perl. Pattern strings are treated as
      UTF-8. This modifier is available from PHP 4.1.0 or greater
      on Unix and from PHP 4.2.3 on win32.
     </simpara>
    </listitem>
       </varlistentry>
      </variablelist>
     </blockquote>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
