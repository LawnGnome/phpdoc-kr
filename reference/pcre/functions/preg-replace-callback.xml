<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: n/a Maintainer: progcom Status: ready -->
<refentry xml:id="function.preg-replace-callback" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>preg_replace_callback</refname>
  <refpurpose>콜백을 이용한 정규 표현식 검색과 치환을 수행</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>preg_replace_callback</methodname>
   <methodparam><type>mixed</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>callback</type><parameter>callback</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>limit</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">count</parameter></methodparam>
  </methodsynopsis>
  <para>
   이 함수의 작동은 <parameter>replacement</parameter> 대신 
   <parameter>callback</parameter>을 지정하는 것을 제외하면,
   <function>preg_replace</function>와 거의 동일합니다.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pattern</parameter></term>
     <listitem>
      <para>
       검색할 패턴. 문자열이나 문자열을 가진 배열일 수 있습니다.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       <parameter>string</parameter> 문자열에서 매치한 요소의 배열이 넘겨져서
       호출될 콜백. 콜백은 치환할 문자열을 반환해야 합니다.
      </para>
      <para>
       종종 단 한번만 <function>preg_replace_callback</function>에만 사용할
       <parameter>callback</parameter> 함수가 필요합니다. 이러한 경우에
       <function>preg_replace_callback</function> 호출 안에서 
       <function>create_function</function>을 사용해서 익명 함수를 선언할 수
       있습니다. 이 방법으로 호출에 필요한 모든 정보를 한 군데 위치하게 할 수
       있고, 다른 곳에서 사용하지 않는 콜백 함수의 이름으로 함수 이름공간을
       어지럽히는 일을 막을 수 있습니다.
      </para>
      <para>
       <example>
        <title><function>preg_replace_callback</function>과
         <function>create_function</function></title>
        <programlisting role="php">
<![CDATA[
/* 유닉스 형식 명령줄 필터로
 * 문단의 첫 대문자를 소문자로 바꿉니다. */
$fp = fopen("php://stdin", "r") or die("stdin을 읽을 수 없습니다");
while (!feof($fp)) {
    $line = fgets($fp);
    $line = preg_replace_callback(
        '|<p>\s*\w|',
        create_function(
             // 여기에서 홑따옴표가 중요합니다.
             // 혹은 모든 $를 \$로 회피해야 합니다.
             '$matches',
             'return strtolower($matches[0]);'
        ),
        $line
    );
    echo $line;
}
fclose($fp);
?>
]]>
        </programlisting>
       </example>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>subject</parameter></term>
     <listitem>
      <para>
       검색 치환할 문자열이나 문자열로 이루어진 배열.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>limit</parameter></term>
     <listitem>
      <para>
       각 <parameter>subject</parameter> 문자열에 대한 각 패턴의 최대 가능
       치환수. 기본값은 <literal>-1</literal>. (무제한)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>count</parameter></term>
     <listitem>
      <para>
       지정하면, 이 변수는 치환을 마친 수로 채워집니다.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>preg_replace_callback</function>은 <parameter>subject</parameter>
   인수에 따라 배열이나 문자열을 반환합니다.
  </para>
  <para>
   매치가 발견되면 새 subject가 반환되고, 그렇지 않으면 변경되지 않은
   <parameter>subject</parameter>가 반환됩니다.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.0</entry>
       <entry>
        <parameter>count</parameter> 인수 추가
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>preg_replace_callback</function> 예제</title>
    <programlisting role="php">
<![CDATA[
<?php
// 이 문장은 2002년에 사용되었습니다.
// 2003년에 적합하게 업데이트합니다.
$text = "April fools day is 04/01/2002\n";
$text.= "Last christmas was 12/24/2001\n";

// 콜백 함수
function next_year($matches)
{
  // 보통: $matches[0]는 전채 매치입니다.
  // $matches[1]은 첫번째 '(...)'에 들어있는
  // 서브 패턴 매치로 이어집니다.
  return $matches[1].($matches[2]+1);
}

echo preg_replace_callback(
            "|(\d{2}/\d{2}/)(\d{4})|",
            "next_year", $text);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
April fools day is 04/01/2003
Last christmas was 12/24/2002
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>BB 코드를 다루기 위해 재귀 구조를 사용하는
     <function>preg_replace_callback</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$input = "plain [indent] deep [indent] deeper [/indent] deep [/indent] plain";

function parseTagsRecursive($input)
{

    $regex = '#\[indent]((?:[^[]|\[(?!/?indent)|(?R))+)\[/indent]#';

    if (is_array($input)) {
        $input = '<div style="margin-left: 10px">'.$input[1].'</div>';
    }

    return preg_replace_callback($regex, 'parseTagRecursive', $input);
}

$output = parseTagsRecursive($input);

echo $output;
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>preg_replace</function></member>
    <member><function>create_function</function></member>
    <member>&seealso.callback;</member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
