<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.7 Maintainer: progcom Status: ready -->
  <refentry id="function.preg-replace-callback">
   <refnamediv>
    <refname>preg_replace_callback</refname>
    <refpurpose>callback을 이용한 정규 표현식 검색과 치환을 수행합니다.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>설명</title>
    <methodsynopsis>
     <type>mixed</type><methodname>preg_replace_callback</methodname>
     <methodparam><type>mixed</type><parameter>pattern</parameter></methodparam>
     <methodparam><type>callback</type><parameter>callback</parameter></methodparam>
     <methodparam><type>mixed</type><parameter>subject</parameter></methodparam>
     <methodparam choice="opt"><type>int</type><parameter>limit</parameter></methodparam>
    </methodsynopsis>
    <para>
     이 함수의 작동은 <parameter>replacement</parameter> 대신 
     <parameter>callback</parameter>를 지정하는 것을 제외하면,
     <function>preg_replace</function>와 거의 동일합니다.
     <parameter>callback</parameter>는 주어진 문자열에 매치되는 요소의
     배열을 콜해서 넘깁니다. 콜백은 치환된 문자열을 반환해야 합니다.
    </para>
    <example>
     <title><function>preg_replace_callback</function> 예제</title>
     <programlisting role='php'>
<![CDATA[
<?php
  // 이 문장은 2002년에 사용되었습니다.
  // 2003년에 적합하게 업데이트합니다.
  $text = "April fools day is 04/01/2002\n";
  $text.= "Last christmas was 12/24/2001\n";

  // 콜백 함수
  function next_year($matches) {
    // 보통: $matches[0]는 전채 매치입니다.
    // $matches[1]은 첫번째 '(...)'에 들어있는
    // 서브 패턴 매치로 이어집니다.
    return $matches[1].($matches[2]+1);
  }

  echo preg_replace_callback(
              "|(\d{2}/\d{2}/)(\d{4})|",
              "next_year", $text);

  // 결과는:
  // April fools day is 04/01/2003
  // Last christmas was 12/24/2002
?>
]]>
     </programlisting>
    </example>
    <para>
     종종 단 한번의 <function>preg_replace_callback</function>에서
     사용하기 위한 <parameter>callback</parameter> 함수가 필요합니다.
     이 경우에, <function>create_function</function>을 사용해서
     <function>preg_replace_callback</function> 호출 안에서 익명의
     함수를 만들 수 있습니다. 이 방법으로 호출에 필요한 모든 정보를
     한군데에 위치하게 하여, 다른곳에서 사용되지 않는 콜백함수의
     네임스페이스를 절약할 수 있습니다.
    </para>
    <example>
     <title><function>preg_replace_callback</function>과 <function>create_function</function></title>
     <programlisting role='php'>
<![CDATA[
<?php
  /* 문단 첫번째의 대문자를 소문자로 변경하는
   * 유닉스 스타일 명령줄 필터 */

  $fp = fopen("php://stdin", "r") or die("can't read stdin");
  while (!feof($fp)) {
      $line = fgets($fp);
      $line = preg_replace_callback(
          '|<p>\s*\w|',
          create_function(
              // 여기에선 싱글 쿼트(')가 적합합니다.
              // 그렇지 않으면 모든 $를 \$로 이스케이프 해야합니다.
              '$matches',
              'return strtolower($matches[0]);'
          ),
          $line
      );
      echo $line;
  }
  fclose($fp);
?>
]]>
     </programlisting>
    </example>
    <para>
     참고: <function>preg_replace</function>,
     <function>create_function</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

