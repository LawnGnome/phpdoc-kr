<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1.27 Maintainer: progcom Status: ready -->
<refentry xml:id="function.preg-match" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>preg_match</refname>
  <refpurpose>정규표현식 매치를 수행</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>preg_match</methodname>
   <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>string</type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">matches</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>offset</parameter></methodparam>
  </methodsynopsis>
  <para>
   <parameter>pattern</parameter>에 주어진 정규표현식을
   <parameter>subject</parameter>에서 찾습니다.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pattern</parameter></term>
     <listitem>
      <para>
       탐색할 패턴 문자열.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>subject</parameter></term>
     <listitem>
      <para>
       입력 문자열.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>matches</parameter></term>
     <listitem>
      <para>
       <parameter>matches</parameter>가 주어지면, 검색 결과를 채워넣습니다.
       <varname>$matches[0]</varname>는 전체 패턴 텍스트가 들어가고,
       <varname>$matches[1]</varname>부터 괄호로 둘러싸인 서브 패턴을
       채워넣습니다.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       <parameter>flags</parameter>는 다음과 같은 플래그를 사용할 수 있습니다:
       <variablelist>
        <varlistentry>
         <term><constant>PREG_OFFSET_CAPTURE</constant></term>
         <listitem>
          <simpara>
           이 플래그를 넘기면, 모든 매치에 대한 문자열 시작 위치를 함께
           반환합니다. 반환값을 <literal>0</literal>에 매치한 문자열을 가지고,
           <literal>1</literal>에 문자열 시작 위치를 가지는 배열을 원소로 갖는
           배열로 변경하는 점에 주의하십시오.
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>offset</parameter></term>
     <listitem>
      <para>
       일반적으로, 검색은 목표 문자열의 처음에서 시작합니다. 선택적인 인수
       <parameter>offset</parameter>으로 검색을 시작할 다른 위치를 지정할 수
       있습니다. (바이트 단위)
      </para>
      <note>
       <para>
        <parameter>offset</parameter>을 사용하는 것은
        <function>preg_match</function>의 주제 문자열로
        <literal>substr($subject, $offset)</literal>을 사용하는 것과
        다릅니다. <parameter>pattern</parameter>에 <emphasis>^</emphasis>,
        <emphasis>$</emphasis>, <emphasis>(?&lt;=x)</emphasis> 등의 단정을
        포함할 수 있기 때문입니다. 비교:
        <informalexample>
         <programlisting role="php">
<![CDATA[
<?php
$subject = "abcdef";
$pattern = '/^def/';
preg_match($pattern, $subject, $matches, PREG_OFFSET_CAPTURE, 3);
print_r($matches);
?>
]]>
         </programlisting>
         &example.outputs;
         <screen>
<![CDATA[
Array
(
)
]]>
         </screen>
         <para>
          반면 이 예제는
         </para>
         <programlisting role="php">
<![CDATA[
<?php
$subject = "abcdef";
$pattern = '/^def/';
preg_match($pattern, substr($subject,3), $matches, PREG_OFFSET_CAPTURE);
print_r($matches);
?>
]]>
         </programlisting>
         <para>
          다음 결과가 됩니다
         </para>
         <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => def
            [1] => 0
        )

)
]]>
         </screen>
        </informalexample>
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>preg_match</function>는 <parameter>pattern</parameter>이
   매치된 횟수를 반환합니다. 이는 0(매치 없음)이나 1입니다.
   <function>preg_match</function>는 처음 매치 후에 검색을 중지하기
   때문입니다. 대조적으로, <function>preg_match_all</function>는
   <parameter>subject</parameter>의 끝까지 계속해서 실행합니다.
   에러가 발생하면, <function>preg_match</function>는 &false;를 반환합니다.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.3.3</entry>
       <entry>
        <parameter>offset</parameter> 인수 추가
       </entry>
      </row>
      <row>
       <entry>4.3.0</entry>
       <entry>
        <constant>PREG_OFFSET_CAPTURE</constant> 플래그 추가
       </entry>
      </row>
      <row>
       <entry>4.3.0</entry>
       <entry>
        <parameter>flags</parameter> 인수 추가
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>문자열 "php" 찾기</title>
    <programlisting role="php">
<![CDATA[
<?php
// 패턴 구분자 뒤의 "i"는 대소문자를 구별하지 않게 합니다.
if (preg_match("/php/i", "PHP is the web scripting language of choice.")) {
    echo "발견하였습니다.";
} else {
    echo "발견하지 못했습니다.";
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>단어 "Web" 찾기</title>
    <programlisting role="php">
<![CDATA[
<?php
/* 패턴에서 \b는 단어를 지시합니다. 단어 "web"만 매치하고,
 * "webbing"이나 "cobweb" 등의 부분적인 경우에는 매치하지 않습니다. */
if (preg_match("/\bweb\b/i", "PHP is the web scripting language of choice.")) {
    echo "발견하였습니다.";
} else {
    echo "발견하지 못했습니다.";
}

if (preg_match("/\bweb\b/i", "PHP is the website scripting language of choice.")) {
    echo "발견하였습니다.";
} else {
    echo "발견하지 못했습니다.";
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>URL에서 도메인 이름 얻기</title>
    <programlisting role="php">
<![CDATA[
<?php
// URL에서 호스트 이름 얻기
preg_match('@^(?:http://)?([^/]+)@i',
    "http://www.php.net/index.html", $matches);
$host = $matches[1];

// 호스트 이름에서 마지막 두 세그멘트 얻기
preg_match('/[^.]+\.[^.]+$/', $host, $matches);
echo "도메인 이름은: {$matches[0]}\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
도메인 이름은: php.net
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>이름 있는 서브패턴 사용하기</title>
    <programlisting role="php">
<![CDATA[
<?php

$str = 'foobar: 2008';

preg_match('/(?<name>\w+): (?<digit>\d+/', $str, $matches);

print_r($matches);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => foobar: 2008
    [name] => foobar
    [1] => foobar
    [digit] => 2008
    [2] => 2008
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <tip>
   <para>
    하나의 문자열이 다른 문자열에 들어있는지 확인하기 위해서
    <function>preg_match</function>를 사용하지 마십시오. 더욱 빠른
    <function>strpos</function>나 <function>strstr</function>을 사용하십시오.
   </para>
  </tip>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>preg_match_all</function></member>
    <member><function>preg_replace</function></member>
    <member><function>preg_split</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
