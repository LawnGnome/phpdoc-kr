<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./kr/functions/dbx.xml, last change in rev 1.1 -->
<!-- last change to 'dbx-connect' in en/ tree in rev 1.3 -->
  <refentry id="function.dbx-connect">
   <refnamediv>
    <refname>dbx_connect</refname>
    <refpurpose>Open a connection/database</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>dbx_link_object</type><methodname>dbx_connect</methodname>
      <methodparam><type>string</type><parameter>module</parameter></methodparam>
      <methodparam><type>string</type><parameter>host</parameter></methodparam>
      <methodparam><type>string</type><parameter>database</parameter></methodparam>
      <methodparam><type>string</type><parameter>username</parameter></methodparam>
      <methodparam><type>string</type><parameter>password</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>persistent</parameter></methodparam>
     </methodsynopsis>
   &warn.experimental.func;
    <para>
     Returns: a dbx_link_object on success, &false;
     on error.  If a connection has been made but the database could not
     be selected, the connection is closed and &false;
     is returned. The 'persistent' parameter can be set to 
     DBX_PERSISTENT so a persistent connection will be created.
    </para>
    <para>
     The <parameter>module</parameter> parameter can be either a string
     or a constant. The possible values are given below, but keep in 
     mind that they only work if the module is actually loaded.
    </para>
    <para>
     <itemizedlist>
      <listitem>
       <simpara>
        module DBX_MYSQL : "mysql"
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        module DBX_ODBC : "odbc"
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        module DBX_PGSQL : "pgsql"
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        module DBX_MSSQL : "mssql"
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        module DBX_FBSQL : "fbsql" (CVS only)
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     The dbx_link_object has three members, a 'handle', a 'module' and
     a 'database'.  The 'database' member is the name of the currently
     selected database. The 'module' member is for internal use by dbx
     only, and is actually the module number mentioned above. The
     'handle' member is a valid handle for the connected database, and
     as such can be used in module-specific functions (if required),
     e.g.
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$link = dbx_connect ("mysql", "localhost", "db", "username", "password");
mysql_close ($link->handle); // dbx_close($link) would be better here
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     Host, database, username and password parameters are expected,
     but not always used, depending on the connect-functions for the
     abstracted module.
    </para>
    <para>
     <example>
      <title><function>dbx_connect</function> example</title>
      <programlisting role="php">
<![CDATA[
<?php
$link = dbx_connect ("odbc", "", "db", "username", "password", DBX_PERSISTENT)
    or die ("Could not connect");
print ("Connected successfully");
dbx_close ($link);
?>
]]>
      </programlisting>
     </example>
     <note>
      <para>
       Always refer to the module-specific documentation as well.
      </para>
     </note>
    </para>
    <para>
     See also: <function>dbx_close</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
