<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./kr/functions/dbx.xml, last change in rev 1.1 -->
<!-- last change to 'dbx-query' in en/ tree in rev 1.3 -->
  <refentry id="function.dbx-query">
   <refnamediv>
    <refname>dbx_query</refname>
    <refpurpose>Send a query and fetch all results (if any)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>dbx_result_object</type><methodname>dbx_query</methodname>
      <methodparam><type>dbx_link_object</type><parameter>link_identifier</parameter></methodparam>
      <methodparam><type>string</type><parameter>sql_statement</parameter></methodparam>
      <methodparam choice="opt"><type>long</type><parameter>flags</parameter></methodparam>
     </methodsynopsis>
   &warn.experimental.func;
    <para>
     Returns a dbx_result_object or 1 on success (a result object is
     only returned for sql-statements that return results) or 0 on
     failure. The <parameter>flags</parameter> parameter is used to 
     control the amount of
     information that is returned. It may be any combination of the
     constants DBX_RESULT_INFO, DBX_RESULT_INDEX, DBX_RESULT_ASSOC,
     OR-ed together. DBX_RESULT_INFO provides info about columns, such
     as field names and field types. DBX_RESULT_INDEX returns the
     results in a 2d indexed array (e.g. data[2][3], where 2 is the
     row (or record) number and 3 is the column (or field) number),
     where the first row and column are indexed at 0. DBX_RESULT_ASSOC
     associates the column indices with field names. Note that
     DBX_RESULT_INDEX is always returned, regardless of the 
     <parameter>flags</parameter>
     parameter.  If DBX_RESULT_ASSOC is specified, DBX_RESULT_INFO is
     also returned even if it wasn't specified. This means that
     effectively only the combinations DBX_RESULT_INDEX,
     DBX_RESULT_INDEX | DBX_RESULT_INFO and DBX_RESULT_INDEX |
     DBX_RESULT_INFO | DBX_RESULT_ASSOC are possible. This last
     combination is the default if the <parameter>flags</parameter> 
     parameter isn't specified. Associated results are actual 
     references to the indexed data, so if you modify 
     <literal>data[0][0]</literal>, then 
     <literal>data[0]['fieldnameforfirstcolumn']</literal> is 
     modified as well.
    </para>
    <para>
     A dbx_result_object has five members (possibly four depending on
     <parameter>flags</parameter>), 'handle', 'cols', 'rows', 'info' 
     (optional) and 'data'. Handle is a valid result identifier for 
     the specified module, and as such can be used in module-specific
     functions, as seen in the example:
    </para>
    <para>
     <informalexample role="php">
      <programlisting>
<![CDATA[
$result = dbx_query ($link, "SELECT id FROM tbl");
mysql_field_len ($result->handle, 0);
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     The cols and rows members contain the number of columns (or
     fields) and rows (or records) respectively, e.g.
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
$result = dbx_query ($link, "SELECT id FROM tbl");
echo "result size: " . $result->rows . " x " . $result->cols . "<br>\n";
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     The info member is only returned if DBX_RESULT_INFO and/or
     DBX_RESULT_ASSOC are specified in the <parameter>flags</parameter> parameter.
     It is a 2d array, that has two named rows ("name" and "type") to retrieve
     column information, e.g.
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
$result = dbx_query ($link, "SELECT id FROM tbl");
echo "column name: " . $result->info["name"][0] . "<br>\n";
echo "column type: " . $result->info["type"][0] . "<br>\n";
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     The data member contains the actual resulting data, possibly
     associated with column names as well. If DBX_RESULT_ASSOC is set,
     it is possible to use
     <literal>$result->data[2]["fieldname"]</literal>.
    </para>
    <example>
     <title><function>dbx_query</function> example</title>
     <programlisting role="php">
<![CDATA[
<?php
$link = dbx_connect ("odbc", "", "db", "username", "password")
    or die ("Could not connect");
$result = dbx_query ($link, "SELECT id, parentid, description FROM tbl");
if ($result==0) echo "Query failed\n<br>";
elseif ($result==1) {
    echo "Query executed successfully\n<br>";
} else {
    $rows=$result->rows;
    $cols=$result->cols;
    echo "<p>table dimension: {$result->rows} x {$result->cols}<br><table border=1>\n";
    echo "<tr>";
    for ($col=0; $col<$cols; ++$col) {
        echo "<td>-{$result->info["name"][$col]}-<br>-{$result->info["type"][$col]}-</td>";
    }
    echo "</tr>\n";
    for ($row=0; $row<$rows; ++$row){
        echo "<tr>";
        for ($col=0; $col<$cols; ++$col) {
            echo "<td>-{$result->data[$row][$col]}-</td>";
        }
        echo "</tr>\n";
    }
    echo "</table><p>\n";
    echo "table dimension: {$result->rows} x id, parentid, description<br><table border=1>\n";
    for ($row=0; $row<$rows; ++$row) {
        echo "<tr>";
        echo "<td>-{$result->data[$row]["id"]}-</td>";
        echo "<td>-{$result->data[$row]["parentid"]}-</td>";
        echo "<td>-{$result->data[$row]["description"]}-</td>";
        echo "</tr>\n";
    }
    echo "</table><p>\n";
}
dbx_close($link);
?>
]]>
     </programlisting>
    </example>
    <note>
     <para>
      Always refer to the module-specific documentation as well.
     </para>
    </note>
    <para>
     See also: <function>dbx_connect</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
