<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1.24 Maintainer: pcraft Status: ok -->
<refentry xml:id="function.mysql-real-escape-string" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>mysql_real_escape_string</refname>
  <refpurpose>mysql_query에서 특수 문자열을 이스케이프(escape)하기위해 사용</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>mysql_real_escape_string</methodname>
   <methodparam><type>string</type><parameter>unescaped_string</parameter></methodparam>
   <methodparam choice="opt"><type>resource</type><parameter>link_identifier</parameter></methodparam>
  </methodsynopsis>
  <para>
<parameter>unescaped_string</parameter>된 문자열에서 접속의
현재 문자 집합으로 특수 문자열을 이스케이프하여 <function>mysql_query</function> 수행시
안전하게 질의할 수 있도록 한다.
이진 데이터를 입력할 경우 이 함수를 사용해야 한다.
  </para>
  <para>
<function>mysql_real_escape_string</function>는 MySQL 라이브러리 함수인 
mysql_real_escape_string를 호출하여, 다음의 문자에 백슬래쉬를 붙인다:
<literal>\x00</literal>, <literal>\n</literal>,
<literal>\r</literal>, <literal>\</literal>, <literal>'</literal>,
<literal>"</literal>, <literal>\x1a</literal>.
  </para>
  <para>
이 함수는 MySQL로 질의를 전송하기 전에 안전하게 데이터를 만들기 위해 항상 사용해야한다.  
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>unescaped_string</parameter></term>
     <listitem>
      <para>
이스케이프할 문자열.
      </para>
     </listitem>
    </varlistentry>
    &mysql.linkid.description;
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
이스케이프된 문자열을 반환하고 에러가 발생하면 &false;를 반환한다.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>mysql_real_escape_string</function> 예제</title>
    <programlisting role="php">
<![CDATA[
<?php
// Connect
$link = mysql_connect('mysql_host', 'mysql_user', 'mysql_password')
    OR die(mysql_error());

// Query
$query = sprintf("SELECT * FROM users WHERE user='%s' AND password='%s'",
            mysql_real_escape_string($user),
            mysql_real_escape_string($password));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>SQL 인젝션 공격(Injection Attack)의 예</title>
    <programlisting role="php">
<![CDATA[
<?php
// Query database to check if there are any matching users
$query = "SELECT * FROM users WHERE user='{$_POST['username']}' AND password='{$_POST['password']}'";
mysql_query($query);

// We didn't check $_POST['password'], it could be anything the user wanted! For example:
$_POST['username'] = 'aidan';
$_POST['password'] = "' OR ''='";

// This means the query sent to MySQL would be:
echo $query;
?>
]]>
    </programlisting>
     <para>
MySQL로 전송되는 질의:
     </para>
    <screen>
<![CDATA[
SELECT * FROM users WHERE name='aidan' AND password='' OR ''=''
]]>
    </screen>
    <para>
유효한 비밀번호 없이 누구나 접속하여 접근이 가능하다.
    </para>
   </example>
  </para>
  <para>
   <example>
    <title>"Best Practice" 질의</title>
    <para>
<function>mysql_real_escape_string</function>은 
각 변수에 대해 SQL 인젝션을 방지한다.
이 예제는 <link linkend="security.magicquotes">Magic Quotes</link> 설정과는 별개로
데이터베이스를 질의하는 "best practice" 방법을 시연한다.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// Quote variable to make safe
function quote_smart($value)
{
    // Stripslashes
    if (get_magic_quotes_gpc()) {
        $value = stripslashes($value);
    }
    // Quote if not integer
    if (!is_numeric($value)) {
        $value = "'" . mysql_real_escape_string($value) . "'";
    }
    return $value;
}

// Connect
$link = mysql_connect('mysql_host', 'mysql_user', 'mysql_password')
    OR die(mysql_error());

// Make a safe query
$query = sprintf("SELECT * FROM users WHERE user=%s AND password=%s",
            quote_smart($_POST['username']),
            quote_smart($_POST['password']));

mysql_query($query);
?>
]]>
    </programlisting>
    <para>
SQL 인젝션 공격이 동작하지 않으며 질의가 정확하게 실행될 것이다.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
<function>mysql_real_escape_string</function>을 사용하기 전에
MySQL 접속이 필요하다. 그렇지 않으면 
<literal>E_WARNING</literal> 등급의 에러가 발생되며, &false;가 반환될 것이다.
만약 <parameter>link_identifier</parameter>가 정의되지 않으면,
최근 MySQL 접속이 사용된다.
   </para>
  </note>
  <note>
   <para>
<link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link>이 활성화되면,
<function>stripslashes</function>가 모든 데이터에 먼저 적용된다.
이 함수를 데이터에 사용하면 이스케이프된 데이터에 중복 처리될 것이다.
   </para>
  </note>
  <note>
   <para>
이 함수가 데이터 이스케이프를 위해 사용되지 않으면, 질의는 
<link linkend="security.database.sql-injection">SQL Injection Attacks</link>으로
취약점이 생기게 된다.
   </para>
  </note>
  <note>
   <simpara>
<function>mysql_real_escape_string</function>는 
<literal>%</literal>와 <literal>_</literal>를 이스케이프하지는 않는다.
<literal>LIKE</literal>, <literal>GRANT</literal>, <literal>REVOKE</literal>와
결합되어 사용되는 와일드카드이기 때문이다.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mysql_client_encoding</function></member>
    <member><function>addslashes</function></member>
    <member><function>stripslashes</function></member>
    <member><link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link> 지시자</member>
    <member><link linkend="ini.magic-quotes-runtime">magic_quotes_runtime</link> 지시자</member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
