<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1.129 Maintainer: progcom Status: ready -->
 <chapter xml:id="language.operators" xmlns="http://docbook.org/ns/docbook">
  <title>연산자</title>
  <simpara>
   연산자는 하나 이상의 값(또는, 프로그래밍 은어로 표현)을 받아서 다른 값을
   산출합니다. (그러므로 구조 자체는 표현이 됩니다) 그러므로 (print처럼) 값을
   반환하는 함수나 구조를 연산자로 생각할 수 있고, (echo처럼) 아무것도
   반환하지 않는 것을 다른 것으로 생각할 수 있습니다.
  </simpara>
  <para>
   세 종류의 연산자가 있습니다. 첫번째는 하나의 값에만 작용하는 일항
   연산자입니다. 예를 들면, !(부정 연산자)나 ++(증가 연산자)가 있습니다.
   두번째는 이항 연산자로 불립니다; 이 종류는 PHP가 지원하는 대부분의 연산자에
   해당합니다. 목록은 아래의 <link
    linkend="language.operators.precedence">연산자 우선권</link> 섹션에
   있습니다.
  </para>
  <para>
   세번째는 삼항 연산자입니다: ?:. 이것은 세번째에 의존해서 두 표현 중 하나를
   선택하는 데 사용합니다. 삼항 연산자를 괄호로 감싸는 건 매우 좋은
   생각입니다.
  </para>
  
  <sect1 xml:id="language.operators.precedence">
   <title>연산자 우선권</title>
   <para>
    연산자 우선권은 두 표현이 얼마나 "단단하게" 묶여 있는지 정의합니다. 예를
    들어, <literal>1 + 5 * 3</literal> 표현의 답은 <literal>18</literal>이
    아닌 <literal>16</literal>입니다. 곱셈("*") 연산자가 덧셈(+) 연산자보다
    높은 우선권을 가지기 때문입니다. 필요하다면, 우선권을 강제하기 위해 괄호를
    사용할 수 있습니다. 예를 들면: <literal>(1 + 5) * 3</literal>은
    <literal>18</literal>로 평가됩니다. 연산자 우선권이 같으면, 왼쪽에서
    오른쪽 결합을 사용합니다.
   </para>
   <para>
    다음 표는 높은 우선권을 가지는 연산자가 위쪽에 나오는 연산자 우선권
    목록입니다. 같은 줄에 있는 연산자는 같은 우선권을 가지며, 이 경우 결합이
    평가하는 순서를 결정합니다.
    <table>
     <title>연산자 우선권</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>결합</entry>
        <entry>연산자</entry>
        <entry>추가 정보</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>무결합</entry>
        <entry>clone new</entry>
        <entry><link linkend="language.oop5.cloning">clone</link>과 <link linkend="language.oop5.basic.new">new</link></entry>
       </row>
       <row>
        <entry>왼쪽</entry>
        <entry>[</entry>
        <entry><function>array</function></entry>
       </row>
       <row>
        <entry>무결합</entry>
        <entry>++ --</entry>
        <entry>
         <link linkend="language.operators.increment">증가/감소</link>
        </entry>
       </row>
       <row>
        <entry>무결합</entry>
        <entry>~ - (int) (float) (string) (array) (object) (bool) @</entry>
        <entry>
         <link linkend="language.types">자료형</link>
        </entry>
       </row>
       <row>
        <entry>무결합</entry>
        <entry>instanceof</entry>
        <entry>
         <link linkend="language.types">자료형</link>
        </entry>
       </row>
       <row>
        <entry>오른쪽</entry>
        <entry>!</entry>
        <entry>
         <link linkend="language.operators.logical">논리</link>
        </entry>
       </row>
       <row>
        <entry>왼쪽</entry>
        <entry>* / %</entry>
        <entry>
         <link linkend="language.operators.arithmetic">계산</link>
        </entry>
       </row>
       <row>
        <entry>왼쪽</entry>
        <entry>+ - .</entry>
        <entry>
         <link linkend="language.operators.arithmetic">계산</link>&listendand; 
         <link linkend="language.operators.string">문자열</link></entry>
       </row>
       <row>
        <entry>왼쪽</entry>
        <entry>&lt;&lt; &gt;&gt;</entry>
        <entry>
         <link linkend="language.operators.bitwise">비트</link>
        </entry>
       </row>
       <row>
        <entry>무결합</entry>
        <entry>&lt; &lt;= &gt; &gt;= &lt;&gt;</entry>
        <entry>
         <link linkend="language.operators.comparison">비교</link>
        </entry>
       </row>
       <row>
        <entry>무결합</entry>
        <entry>== != === !==</entry>
        <entry>
         <link linkend="language.operators.comparison">비교</link>
        </entry>
       </row>
       <row>
        <entry>왼쪽</entry>
        <entry>&amp;</entry>
        <entry>
         <link linkend="language.operators.bitwise">비트</link>&listendand; 
         <link linkend="language.references">참조</link></entry>
       </row>
       <row>
        <entry>왼쪽</entry>
        <entry>^</entry>
        <entry>
         <link linkend="language.operators.bitwise">비트</link>
        </entry>
       </row>
       <row>
        <entry>왼쪽</entry>
        <entry>|</entry>
        <entry>
         <link linkend="language.operators.bitwise">비트</link>
        </entry>
       </row>
       <row>
        <entry>왼쪽</entry>
        <entry>&amp;&amp;</entry>
        <entry>
         <link linkend="language.operators.logical">논리</link>
        </entry>
       </row>
       <row>
        <entry>왼쪽</entry>
        <entry>||</entry>
        <entry>
         <link linkend="language.operators.logical">논리</link>
        </entry>
       </row>
       <row>
        <entry>왼쪽</entry>
        <entry>? :</entry>
        <entry>
         <link linkend="language.operators.comparison.ternary">삼항</link>
        </entry>
       </row>
       <row>
        <entry>오른쪽</entry>
        <entry>
         = += -= *= /= .= %= &amp;= |= ^= &lt;&lt;= &gt;&gt;=
        </entry>
        <entry>
         <link linkend="language.operators.assignment">할당</link>
        </entry>
       </row>
       <row>
        <entry>왼쪽</entry>
        <entry>and</entry>
        <entry>
         <link linkend="language.operators.logical">논리</link>
        </entry>
       </row>
       <row>
        <entry>왼쪽</entry>
        <entry>xor</entry>
        <entry>
         <link linkend="language.operators.logical">논리</link>
        </entry>
       </row>
       <row>
        <entry>왼쪽</entry>
        <entry>or</entry>
        <entry>
         <link linkend="language.operators.logical">논리</link>
        </entry>
       </row>
       <row>
        <entry>왼쪽</entry>
        <entry>,</entry>
        <entry>다양한 사용</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    왼쪽 결합은 표현이 왼쪽에서 오른쪽으로 평가됨을 의미하며, 오른쪽 결합은
    반대입니다.
    <example>
     <title>결합성</title>
     <programlisting role="php">
<![CDATA[
<?php
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5
?>
]]>
     </programlisting>
    </example>
    괄호를 사용하는 것은 표현의 가독성을 증가시킵니다.
   </para>
   <note>
    <para>
     <literal>=</literal>이 대부분의 연산자보다 낮은 우선권을 가지지만, PHP는
     다음과 같은 표현을 허용합니다: <literal>if (!$a = foo())</literal>, 이
     경우 <literal>foo()</literal>의 반환값은 <varname>$a</varname>에
     들어갑니다.
    </para>
   </note>
  </sect1>

  <sect1 xml:id="language.operators.arithmetic">
   <title>계산 연산자</title>
   <simpara>
    학교에서 배운 기본 계산을 떠올렸습니까? 그와 같이 작동합니다.
   </simpara>
   <table>
    <title>계산 연산자</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>예제</entry>
       <entry>이름</entry>
       <entry>결과</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>-$a</entry>
       <entry>부정</entry>
       <entry>$a의 반대.</entry>
      </row>
      <row>
       <entry>$a + $b</entry>
       <entry>덧셈</entry>
       <entry>$a와 $b의 합.</entry>
      </row>
      <row>
       <entry>$a - $b</entry>
       <entry>뺄셈</entry>
       <entry>$a와 $b의 차.</entry>
      </row>
      <row>
       <entry>$a * $b</entry>
       <entry>곱셈</entry>
       <entry>$a와 $b의 곱.</entry>
      </row>
      <row>
       <entry>$a / $b</entry>
       <entry>나눗셈</entry>
       <entry>$a와 $b의 몫.</entry>
      </row>
      <row>
       <entry>$a % $b</entry>
       <entry>나머지</entry>
       <entry>$a를 $b로 나눈 나머지.</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <simpara>
    나눗셈 연산자("/")는 두 연산수가 정수(또는 정수로 변환되는 문자열)가
    아니고 수가 정확히 나눠질 수 있으면 정수 값을 반환합니다. 그렇지 않으면
    소수 값을 반환합니다.
   </simpara>
   <simpara>
    나머지 연산자는 계산하기 전에 정수로 변환(소수점 부분을 제거)합니다.
   </simpara>
   <note>
    <simpara>
     음수 <literal>$a</literal>에 대한 <literal>$a % $b</literal>의 나머지는
     음수입니다.
    </simpara>
   </note>
   <simpara>
    매뉴얼 <link linkend="ref.math">수학 함수</link> 페이지를 참고하십시오.
   </simpara>

  </sect1>
  
  <sect1 xml:id="language.operators.assignment">
   <title>할당 연산자</title>
   <simpara>
    기본 할당 연산자는 "="입니다. 처음에는 이것을 "같다"로 생각할 수 있습니다.
    아닙니다. 실제로는 왼쪽 연산수가 오른쪽 표현의 값으로 설정됨을 의미합니다.
    ("를 설정"입니다)
   </simpara>
   <para>
    할당 연산자의 값은 할당된 값입니다. 그러므로, "$a = 3"의 값은 3입니다.
    이는 트릭 같은 일을 허용합니다:
    <informalexample>
     <programlisting role="php"> 
<![CDATA[
<?php

$a = ($b = 4) + 5; // $a는 이제 9와 같고, $b는 4로 설정됩니다.

?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    기본 연산자에 추가로, 모든 <link linkend="language.operators">이항
     계산</link>, 배열 합집합과 문자열 연산자에 대하여 "결합 연산자"가
    존재합니다. 이를 사용해서 값을 표현으로 사용하고 그 표현의 결과를 값에
    설정할 수 있도록 합니다. 예를 들면:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

$a = 3;
$a += 5; // $a를 8로 설정, 다음과 같습니다: $a = $a + 5;
$b = "Hello ";
$b .= "There!"; // $b = $b . "There!";와 마찬가지로, $b를 "Hello There!"로 설정

?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    할당은 원래 값을 새로운 것으로 복사하기 때문에(값으로 할당), 하나의 변경은
    다른 것에 영향을 주지 않습니다. 또한 빠듯한 루프 안에서 커다란 배열을
    복사해야할 필요성이 존재하게 됩니다. <computeroutput>$var =
     &amp;$othervar;</computeroutput> 구문을 사용해서, 참조로 할당도
    지원합니다. '참조로 할당'은 두 변수가 같은 데이터를 가리키는 것을
    의미하며, 아무것도 복사하지 않습니다. 참조에 대해서 알아보려면, <link
     linkend="language.references">참조 설명</link>을 읽어보십시오. PHP 5부터,
    객체는 명시적으로 새로운 것을 만드는 <link
     linkend="language.oop5.cloning">clone</link> 키워드를 사용하지 않는 한
    참조로 할당됩니다.
   </para>
  </sect1>

  <sect1 xml:id="language.operators.bitwise">
   <title>비트 연산자</title>
   <simpara>
    비트 연산자는 정수에 있는 특정 비트를 끄거나 켤 수 있도록 합니다. 왼쪽과
    오른쪽 인수가 모두 문자열이면, 비트 연산자는 문자의 아스키 값으로
    연산합니다.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
echo 12 ^ 9; // Outputs '5'

echo "12" ^ "9"; // Outputs the Backspace character (ascii 8)
                 // ('1' (ascii 49)) ^ ('9' (ascii 57)) = #8

echo "hallo" ^ "hello"; // Outputs the ascii values #0 #4 #0 #0 #0
                        // 'a' ^ 'e' = #4

echo 2 ^ "3"; // Outputs 1
              // 2 ^ ((int)"3") == 1

echo "2" ^ 3; // Outputs 1
              // ((int)"2") ^ 3 == 1
?>
]]>
     </programlisting>
    </informalexample> 
   </para>

   <table>
    <title>비트 연산자</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>예제</entry>
       <entry>이름</entry>
       <entry>결과</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>$a &amp; $b</entry>
       <entry>And</entry>
       <entry>$a와 $b 모두에 설정된 비트가 설정됩니다.</entry>
      </row>
      <row>
       <entry>$a | $b</entry>
       <entry>Or</entry>
       <entry>$a나 $b에 설정된 비트가 설정됩니다.</entry>
      </row>
      <row>
       <entry>$a ^ $b</entry>
       <entry>Xor</entry>
       <entry>
        $a나 $b에 설정되었지만, 양쪽에 설정되지 않은 비트.
       </entry>
      </row>
      <row>
       <entry>~ $a</entry>
       <entry>Not</entry>
       <entry>
        $a에 설정되지 않은 비트가 설정되는, 역입니다.
       </entry>
      </row>
      <row>
       <entry>$a &lt;&lt; $b</entry>
       <entry>Shift left</entry>
       <entry>
        $a의 비트를 $b 단계만큼 왼쪽으로 시프트 (각 단계는 "2로 곱하기"를
        의미합니다)
       </entry>
      </row>
      <row>
       <entry>$a &gt;&gt; $b</entry>
       <entry>Shift right</entry>
       <entry>
        $a의 비트를 $b 단계만큼 오른쪽으로 시프트 (각 단계는 "2로 나누기"를
        의미합니다)
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <warning>
    <para>
     32비트 시스템에서 32비트 초과하는 오른쪽 시프트를 하지 마십시오. 결과가
     32비트를 수 넘어가는 왼쪽 시프트를 하지 마십시오.
    </para>
   </warning>
  </sect1>

  <sect1 xml:id="language.operators.comparison">
   <title>비교 연산자</title>
   <simpara>
    비교 연산자는 이름 그대로 두 값을 비교하도록 합니다. <link
     linkend="types.comparisons">자료형 비교표</link>에서 다양한 자료형 관련
    비교의 예제를 확인해 볼 수 있습니다.
   </simpara>
   <table>
    <title>비교 연산자</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>예제</entry>
       <entry>이름</entry>
       <entry>결과</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>$a == $b</entry>
       <entry>Equal</entry>
       <entry>$a와 $b가 같으면 &true;.</entry>
      </row>
      <row>
       <entry>$a === $b</entry>
       <entry>Identical</entry>
       <entry>
        $a와 $b가 같고, 같은 자료형이면 &true;. (PHP 4에서 추가)
       </entry>
      </row>
      <row>
       <entry>$a != $b</entry>
       <entry>Not equal</entry>
       <entry>$a가 $b와 같지 않으면 &true;.</entry>
      </row>
      <row>
       <entry>$a &lt;&gt; $b</entry>
       <entry>Not equal</entry>
       <entry>$a가 $b와 같지 않으면 &true;.</entry>
      </row>
      <row>
       <entry>$a !== $b</entry>
       <entry>Not identical</entry>
       <entry>
        $a가 $b와 같지 않거나, 같은 자료형이 아니면 &true;. (PHP 4에서 추가)
       </entry>
      </row>
      <row>
       <entry>$a &lt; $b</entry>
       <entry>Less than</entry>
       <entry>$a가 $b보다 작으면 &true;.</entry>
      </row>
      <row>
       <entry>$a &gt; $b</entry>
       <entry>Greater than</entry>
       <entry>$a가 $b보다 크면 &true;.</entry>
      </row>
      <row>
       <entry>$a &lt;= $b</entry>
       <entry>Less than or equal to </entry>
       <entry>$a가 $b보다 작거나 같으면 &true;.</entry>
      </row>
      <row>
       <entry>$a &gt;= $b</entry>
       <entry>Greater than or equal to </entry>
       <entry>$a가 $b보다 크거나 같으면 &true;.</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>
    정수를 문자열과 비교하면, 문자열이 <link
     linkend="language.types.string.conversion">수로 변환</link>됩니다. 두개의
    수 문자열을 비교하면, 정수로 비교됩니다. 이 규칙은 <link
     linkend="control-structures.switch">switch</link> 구문에도 적용됩니다.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
var_dump(0 == "a"); // 0 == 0 -> true
var_dump("1" == "01"); // 1 == 1 -> true
var_dump("1" == "1e0"); // 1 == 1 -> true

switch ("a") {
case 0:
    echo "0";
    break;
case "a": // never reached because "a" is already matched with 0
    echo "a";
    break;
}
?>
]]>
     </programlisting>
    </informalexample> 
   </para>

   <para>
    다양한 자료형에 대해서, 비교는 다음 표에 따라 이루어집니다. (순서대로)
   </para>
   <table xml:id="language.operators.comparison.types">
    <title>다양한 자료형 비교</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>연산수 1의 자료형</entry>
       <entry>연산수 2의 자료형</entry>
       <entry>결과</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><type>null</type>이나 <type>string</type></entry>
       <entry><type>string</type></entry>
       <entry>&null;을 ""로 변환, 수치나 어휘 비교</entry>
      </row>
      <row>
       <entry><type>bool</type>이나 <type>null</type></entry>
       <entry>anything</entry>
       <entry><type>bool</type>로 변환, &false; &lt; &true;</entry>
      </row>
      <row>
       <entry><type>object</type></entry>
       <entry><type>object</type></entry>
       <entry>내장 클래스는 자신의 비교 함수를 정의할 수 있습니다. 다른
        클래스는 비교할 수 없고, 같은 클래스는 배열과 같은 방식으로 프로퍼티를
        비교합니다(PHP 4). PHP 5는 자체의 <link
         linkend="language.oop5.object-comparison">해석법</link>을 가지고
        있습니다.
       </entry>
      </row>
      <row>
       <entry><type>string</type>, <type>resource</type>, <type>number</type></entry>
       <entry><type>string</type>, <type>resource</type>, <type>number</type></entry>
       <entry>문자열과 자원을 수로 변환하여, 일반적인 수학</entry>
      </row>
      <row>
       <entry><type>array</type></entry>
       <entry><type>array</type></entry>
       <entry>적은 멤버를 가진 배열이 작고, 연산수 1의 키가 연산수 2에서
        발견되지 않으면 배열을 비교할 수 없고, 그렇지 않으면 - 값대 값으로
        비교(아래 예제를 참고)</entry>
      </row>
      <row>
       <entry><type>array</type></entry>
       <entry>모두</entry>
       <entry><type>array</type>가 항상 큽니다</entry>
      </row>
      <row>
       <entry><type>object</type></entry>
       <entry>모두</entry>
       <entry><type>object</type>가 항상 큽니다</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>
    <example>
     <title>표준 배열 비교의 모사</title>
     <programlisting role="php">
<![CDATA[
<?php
// 표준 비교 연산자로 배열은 이렇게 비교합니다
function standard_array_compare($op1, $op2)
{
    if (count($op1) < count($op2)) {
        return -1; // $op1 < $op2
    } elseif (count($op1) > count($op2)) {
        return 1; // $op1 > $op2
    }
    foreach ($op1 as $key => $val) {
        if (!array_key_exists($key, $op2)) {
            return null; // uncomparable
        } elseif ($val < $op2[$key]) {
            return -1;
        } elseif ($val > $op2[$key]) {
            return 1;
        }
    }
    return 0; // $op1 == $op2
}
?>
]]>
     </programlisting>
    </example> 
   </para>

   <para>
    참고: <function>strcasecmp</function>,
    <function>strcmp</function>,
    <link linkend="language.operators.array">배열 연산자</link>,
    매뉴얼 <link linkend="language.types">자료형</link> 섹션.
   </para>

   <sect2 xml:id="language.operators.comparison.ternary">
    <title>삼항 연산자</title>
    <para>
     또다른 조건부 연산자는 "?:"(삼항) 연산자입니다.
     <example>
      <title>기본값 할당하기</title>
      <programlisting role="php">
<![CDATA[
<?php
// 사용 예제: 삼항 연산자
$action = (empty($_POST['action'])) ? 'default' : $_POST['action'];

// 위 예제는 다음의 if/else 구문과 동일합니다
if (empty($_POST['action'])) {
    $action = 'default';
} else {
    $action = $_POST['action'];
}

?>
]]>
      </programlisting>
     </example> 
     <literal>(expr1) ? (expr2) : (expr3)</literal> 표현은
     <replaceable>expr1</replaceable>이 &true;이면
     <replaceable>expr2</replaceable>로 평가되고,
     <replaceable>expr1</replaceable>이 &false;이면
     <replaceable>expr3</replaceable>로 평가됩니다.
    </para>
    <para>
     PHP 5.3부터, 삼항 연산자의 중간 부분을 비울 수 있습니다. 표현식
     <literal>expr1 ?: expr3</literal>은 <replaceable>expr1</replaceable>이
     &true;이면 <replaceable>expr1</replaceable>, 아니면
     <replaceable>expr3</replaceable>를 반환합니다.
    </para>
    <note>
     <simpara>
      삼항 연산자는 구문이므로, 변수로 평가되지 않고 구문의 결과로 평가되는
      점에 주의하십시오. 이 점은 참조로 변수를 반환할 때 중요합니다. 그러므로
      참조로 반환하는 함수에서 <literal>return $var == 42 ? $a : $b;</literal>
      구문은 작동하지 않고, 경고가 발생합니다.
     </simpara>
    </note>
    <note>
     <para>
      삼항 연사자를 "쌓는" 일을 피하길 권합니다. 하나의 구문에서 하나를
      초과하는 삼항 연산자를 사용할 때, PHP 작동은 명확하지 않습니다:
      <example>
       <title>명확하지 않은 삼항 작동</title>
       <programlisting role="php">
<![CDATA[
<?php
// 얼핏 보기에, 'true'를 출력할 것 같습니다
echo (true?'true':false?'t':'f');

// 그러나 위의 실제 출력은 't'입니다
// 이는 삼항 표현이 왼쪽에서 오른쪽으로 평가되기 때문입니다

// 다음이 위 코드와 동일한 더 명확한 버전입니다
echo ((true ? 'true' : 'false') ? 't' : 'f');

// 여기서, 첫 표현이 'true'로 평가되고, 이것이
// (bool)true로 전환되어 평가된 후, 두번째
// 삼항 표현의 true쪽을 반환합니다.
?>
]]>
       </programlisting>
      </example>
     </para>
    </note>
   </sect2>

  </sect1>

  <sect1 xml:id="language.operators.errorcontrol">
   <title>오류 제어 연산자</title>
   <simpara>
    PHP는 하나의 오류 제어 연산자를 지원합니다: at 부호(@). PHP 표현의 앞에
    덧붙이면, 그 표현에서 생성되는 모든 오류 메세지를 무시합니다.
   </simpara>
   <simpara>
    <link linkend="ini.track-errors"><option>track_errors</option></link>
    기능을 켜면, 표현이 생성한 모든 오류 메세지는
    <varname>$php_errormsg</varname> 변수에 저장됩니다. 이 변수는 각 오류마다
    덮어씌워지므로, 사용하려면 일찍 확인하십시오.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
/* Intentional file error */
$my_file = @file ('non_existent_file') or
    die ("Failed opening file: error was '$php_errormsg'");

// this works for any expression, not just functions:
$value = @$cache[$key]; 
// will not issue a notice if the index $key doesn't exist.

?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <note>
    <simpara>
     @ 연산자는 <link linkend="language.expressions">표현</link>에만
     작용합니다. 간단한 규칙으로: 어떠한 값을 얻을 수 있으면, @를 붙일 수
     있습니다. 즉, 변수, 함수, <function>include</function> 호출, 상수 등에
     붙일 수 있습니다. 함수 정의, 클래스 정의, <literal>if</literal>와
     <literal>foreach</literal> 같은 조건부 구문 등에는 붙일 수 없습니다.
    </simpara>
   </note>
   <simpara>
    <function>error_reporting</function>과 매뉴얼 <link
     linkend="ref.errorfunc">오류 다루기와 기록 함수</link> 섹션을
    참고하십시오.
   </simpara>
   <warning>
    <para>
     현재 "@" 오류 제어 연산자는 스크립트 실행을 종료하는 치명적인 오류에 대한
     오류 보고도 꺼버립니다. 즉, "@"를 어떠한 함수에서 오류를 제거하려고
     사용하였을 때, 그 함수가 존재하지 않거나, 오타를 내면 그 위치에서 아무런
     이유를 알려주는 지시도 없이 스크립트가 종료됩니다.
    </para>
   </warning>
  </sect1>
  
  <sect1 xml:id="language.operators.execution">
   <title>실행 연산자</title>
   <para>
    PHP는 하나의 실행 연산자를 지원합니다: 역따옴표(``). 홑따옴표가 아닌 점에
    주의하십시오! PHP는 역따옴표 안의 내용을 쉘 명령으로 실행하려 할 것입니다;
    출력을 반환합니다. (즉, 단순히 출력하는 것이 아닙니다; 변수에 할당할 수
    있습니다) 역따옴표 연산자를 사용하는 것은
    <function>shell_exec</function>와 동일합니다.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$output = `ls -al`;
echo "<pre>$output</pre>";
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <note>
    <para>
     역따옴표 연산자는 &safemode;가 켜져있거나
     <function>shell_exec</function>가 비활성화 되면 사용할 수 없습니다.
    </para>
   </note>
   <para>
    매뉴얼 <link linkend="ref.exec">프로그램 실행 함수</link> 섹션,
    <function>popen</function>, <function>proc_open</function>, <link
     linkend="features.commandline">PHP를 명령줄에서 사용하기</link>를
    참고하십시오.
   </para>
  </sect1>

  <sect1 xml:id="language.operators.increment">
   <title>증가/감소 연산자</title>
   <para>
    PHP는 C 형식의 사전, 사후 증가 및 감소 연산자를 지원합니다.
   </para>
   <note>
    <simpara>
     증가/감소 연산자는 논리 값에 영향을 주지 않습니다. &null; 값을 감소하는
     것도 영향이 없지만, 증가시키면 <literal>1</literal>이 됩니다.
    </simpara>
   </note>
   <table>
    <title>증가/감소 연산자</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>예제</entry>
       <entry>이름</entry>
       <entry>효과</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>++$a</entry>
       <entry>Pre-increment</entry>
       <entry>$a를 1 증가하고, $a를 반환.</entry>
      </row>
      <row>
       <entry>$a++</entry>
       <entry>Post-increment</entry>
       <entry>$a를 반환하고, $a를 1 증가.</entry>
      </row>
      <row>
       <entry>--$a</entry>
       <entry>Pre-decrement</entry>
       <entry>$a를 1 감소하고, $a를 반환.</entry>
      </row>
      <row>
       <entry>$a--</entry>
       <entry>Post-decrement</entry>
       <entry>$a를 반환하고, $a를 1 감소.</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>
    간단한 예제 스크립트입니다:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
echo "<h3>Postincrement</h3>";
$a = 5;
echo "Should be 5: " . $a++ . "<br />\n";
echo "Should be 6: " . $a . "<br />\n";

echo "<h3>Preincrement</h3>";
$a = 5;
echo "Should be 6: " . ++$a . "<br />\n";
echo "Should be 6: " . $a . "<br />\n";

echo "<h3>Postdecrement</h3>";
$a = 5;
echo "Should be 5: " . $a-- . "<br />\n";
echo "Should be 4: " . $a . "<br />\n";

echo "<h3>Predecrement</h3>";
$a = 5;
echo "Should be 4: " . --$a . "<br />\n";
echo "Should be 4: " . $a . "<br />\n";
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    PHP는 문자 변수에 계산 연산을 할 경우, C가 아닌 펄의 규정을 따릅니다. 예를
    들면, 펄에서 'Z'+1은 'AA'가 되지만, C에서 'Z'+1은 '['( ord('Z') == 90,
    ord('[') == 91)입니다. 문자 변수는 증가만 할 수 있고, 감소는 할 수 없으며,
    아스키 알파벳 문자(a-z와 A-Z)만 지원합니다.
    <example>
     <title>문자 변수에 계산 연산</title>
     <programlisting role="php">
<![CDATA[
<?php
$i = 'W';
for ($n=0; $n<6; $n++) {
    echo ++$i . "\n";
}
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
X
Y
Z
AA
AB
AC
]]>
     </screen>
    </example>
   </para>
   <para>
    논리값에 대한 증가나 감소는 영향이 없습니다.
   </para>
  </sect1>

  <sect1 xml:id="language.operators.logical">
   <title>논리 연산자</title>

   <table>
    <title>논리 연산자</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>예제</entry>
       <entry>이름</entry>
       <entry>결과</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>$a and $b</entry>
       <entry>And</entry>
       <entry>$a와 $b가 모두 &true;이면 &true;.</entry>
      </row>
      <row>
       <entry>$a or $b</entry>
       <entry>Or</entry>
       <entry>$a나 $b가 &true;이면 &true;.</entry>
      </row>
      <row>
       <entry>$a xor $b</entry>
       <entry>Xor</entry>
       <entry>$a와 $b중 하나만 &true;일 때만 &true;.</entry>
      </row>
      <row>
       <entry>! $a</entry>
       <entry>Not</entry>
       <entry>$a가 &true;가 아니면 &true;.</entry>
      </row>
      <row>
       <entry>$a &amp;&amp; $b</entry>
       <entry>And</entry>
       <entry>$a와 $b가 모두 &true;이면 &true;.</entry>
      </row>
      <row>
       <entry>$a || $b</entry>
       <entry>Or</entry>
       <entry>$a나 $b가 &true;이면 &true;.</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <simpara>
    "and"와 "or" 연산자가 두 종류가 있는 것은, 다른 우선권을 가지기
    때문입니다. (<link linkend="language.operators.precedence">연산자
     우선권</link> 참고)
   </simpara>
   <example>
    <title>논리 연산자 설명</title>
    <programlisting role="php">
<![CDATA[
<?php

// foo() will never get called as those operators are short-circuit
$a = (false && foo());
$b = (true  || foo());
$c = (false and foo());
$d = (true  or  foo());

// "||" has a greater precedence than "or"
$e = false || true; // $e will be assigned to (false || true) which is true
$f = false or true; // $f will be assigned to false
var_dump($e, $f);

// "&&" has a greater precedence than "and"
$g = true && false; // $g will be assigned to (true && false) which is false
$h = true and false; // $h will be assigned to true
var_dump($g, $h);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
bool(true)
bool(false)
bool(false)
bool(true)
]]>
    </screen>
   </example>
  </sect1>

  <sect1 xml:id="language.operators.string">
   <title>문자열 연산자</title>
   <simpara>
    두 개의 <type>string</type> 연산자가 있습니다. 첫번째는 연결
    연산자('.')로, 오른쪽과 왼쪽 인수의 연결을 반환합니다. 두번째는 연결 할당
    연산자('.=')로, 오른쪽 인수를 왼쪽 인수에 덧붙입니다. 자세한 정보는 <link
     linkend="language.operators.assignment">할당 연산자</link>를
    참고하십시오.
   </simpara>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$a = "Hello ";
$b = $a . "World!"; // now $b contains "Hello World!"

$a = "Hello ";
$a .= "World!";     // now $a contains "Hello World!"
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    매뉴얼 <link linkend="language.types.string">문자열형</link>과 <link
     linkend="ref.strings">문자열 함수</link> 섹션을 참고하십시오.
   </para>
  </sect1>
  
  <sect1 xml:id="language.operators.array">
   <title>배열 연산자</title>
   <table>
    <title>배열 연산자</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>예제</entry>
       <entry>이름</entry>
       <entry>결과</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>$a + $b</entry>
       <entry>Union</entry>
       <entry>$a와 $b의 합집합.</entry>
      </row>
      <row>
       <entry>$a == $b</entry>
       <entry>Equality</entry>
       <entry>$a와 $b가 동일한 키/값 쌍을 가지면 &true;.</entry>
      </row>
      <row>
       <entry>$a === $b</entry>
       <entry>Identity</entry>
       <entry>$a와 $b가 동일한 키/값 쌍을 동일한 순서와 동일한 자료형으로
        가지면 &true;.</entry>
      </row>
      <row>
       <entry>$a != $b</entry>
       <entry>Inequality</entry>
       <entry>$a가 $b와 같지 않으면 &true;.</entry>
      </row>
      <row>
       <entry>$a &lt;&gt; $b</entry>
       <entry>Inequality</entry>
       <entry>$a가 $b와 같지 않으면 &true;.</entry>
      </row>
      <row>
       <entry>$a !== $b</entry>
       <entry>Non-identity</entry>
       <entry>$a가 $b와 동일하지 않으면 &true;.</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>
    <literal>+</literal> 연산자는 오른쪽 배열에서 왼쪽 배열로 키를 유지하며
    원소를 덧붙입니다. 중복되는 키를 덮어쓰지 않습니다.
   </para>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$a = array("a" => "apple", "b" => "banana");
$b = array("a" => "pear", "b" => "strawberry", "c" => "cherry");

$c = $a + $b; // Union of $a and $b
echo "Union of \$a and \$b: \n";
var_dump($c);

$c = $b + $a; // Union of $b and $a
echo "Union of \$b and \$a: \n";
var_dump($c);
?>
]]>
     </programlisting>
    </informalexample>
    실행하면, 위 스크립트는 다음을 출력합니다:
    <screen role="php">
<![CDATA[
Union of $a and $b:
array(3) {
  ["a"]=>
  string(5) "apple"
  ["b"]=>
  string(6) "banana"
  ["c"]=>
  string(6) "cherry"
}
Union of $b and $a:
array(3) {
  ["a"]=>
  string(4) "pear"
  ["b"]=>
  string(10) "strawberry"
  ["c"]=>
  string(6) "cherry"
}
]]>
    </screen>
   </para>
   <para>
    동일한 키와 값을 가지고 있으면, 비교할 때 같은 배열 원소입니다.
   </para>
   <para>
    <example>
     <title>비열 비교하기</title>
     <programlisting role="php">
<![CDATA[
<?php
$a = array("apple", "banana");
$b = array(1 => "banana", "0" => "apple");

var_dump($a == $b); // bool(true)
var_dump($a === $b); // bool(false)
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    매뉴얼 <link linkend="language.types.array">배열형</link>과 <link
     linkend="ref.array">배열 함수</link> 섹션을 참고하십시오.
   </para>
  </sect1>
  <sect1 xml:id="language.operators.type">
   <title>자료형 연산자</title>
   <para>
    <literal>instanceof</literal>는 PHP 변수가 어떤 <link
     linkend="language.oop5.basic.class">클래스</link>에서 생성된 객체인지
    확인할 때 사용합니다:
    <example>
     <title>클래스에 instanceof 사용하기</title>
     <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
}

class NotMyClass
{
}
$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof NotMyClass);
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
bool(true)
bool(false)
]]>
     </screen>
    </example>
   </para>
   <para>
    <literal>instanceof</literal>는 변수가 부모 클래스에서 상속받은 클래스인지
    확인할 때도 사용할 수 있습니다:
    <example>
     <title>상속 클래스에 instanceof 사용하기</title>
     <programlisting role="php">
<![CDATA[
<?php
class ParentClass
{
}

class MyClass extends ParentClass
{
}

$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof ParentClass);
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
bool(true)
bool(true)
]]>
     </screen>
    </example>
   </para>
   <para>
    객체가 클래스의 인스턴스가 <emphasis>아닌</emphasis>지 확인하려면, <link
     linkend="language.operators.logical">논리 <literal>not</literal>
     연산자</link>를 사용할 수 있습니다.
    <example>
     <title>객체가 클래스의 인스턴스가 <emphasis>아닌</emphasis>지 확인하기
      위해 instanceof 사용하기</title>
     <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
}

$a = new MyClass;
var_dump(!($a instanceof stdClass));
?>
]]>
     </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
]]>
     </screen>
    </example>
   </para>
   <para>
    마지막으로, <literal>instanceof</literal>는 변수가 <link
     linkend="language.oop5.interfaces">인터페이스</link>를 구현한 클래스의
    객체 인스턴스인지 확인하기 위해 사용할 수 있습니다:
    <example>
     <title>클래스에 instanceof 사용하기</title>
     <programlisting role="php">
<![CDATA[
<?php
interface MyInterface
{
}

class MyClass implements MyInterface
{
}

$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof MyInterface);
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
bool(true)
bool(true)
]]>
     </screen>
    </example>
   </para>
   <para>
    보통 <literal>instanceof</literal>를 문자 클래스명에 사용하지만, 다른
    객체나 문자열 변수와도 사용할 수 있습니다:
    <example>
     <title>다른 변수와 instanceof 사용하기</title>
     <programlisting role="php">
<![CDATA[
<?php
interface MyInterface
{
}

class MyClass implements MyInterface
{
}

$a = new MyClass;
$b = new MyClass;
$c = 'MyClass';
$d = 'NotMyClass';

var_dump($a instanceof $b); // $b is an object of class MyClass
var_dump($a instanceof $c); // $c is a string 'MyClass'
var_dump($a instanceof $d); // $d is a string 'NotMyClass'
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
bool(true)
bool(false)
]]>
     </screen>
    </example>
   </para>
   <para>
    주의해야할 함정이 있습니다. PHP 5.1.0 이전에,
    <literal>instanceof</literal>는 클래스명이 존재하지 않으면 <link
     linkend="language.oop5.autoload">__autoload()</link>를 호출했습니다.
    추가로, 클래스가 적재되지 않으면 치명적인 오류가 발생했습니다. 이는
    <literal>동적 클래스 참조</literal>를 사용하거나, 클래스명을 가지는 문자열
    변수로 해결할 수 있습니다:
    <example>
     <title>PHP 5.0 intanceof에서 클래스명 찾기와 치명적인 오류 피하기</title>
     <programlisting role="php">
<![CDATA[
<?php
$d = 'NotMyClass';
var_dump($a instanceof $d); // no fatal error here
?>
     ]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(false)
]]>
     </screen>
    </example>
   </para>
   <simpara>
    <literal>instanceof</literal> 연산자는 PHP 5에서 추가되었습니다. 이전에는
    <function>is_a</function>가 사용되었지만, <function>is_a</function>는
    <literal>instanceof</literal>의 기능으로 인해 배제되었습니다. PHP
    5.3.0부터 <function>is_a</function>는 배제되지 않게 되었습니다.
   </simpara>
   <para>
    참고: <function>get_class</function>,
    <function>is_a</function>.
   </para>
  </sect1>
 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
