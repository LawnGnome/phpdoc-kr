<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.10 $ -->
<!-- EN-Revision: 1.78 -->
 <chapter id="control-structures">
  <title>제어 구조</title>

  <simpara>
   모든 PHP 스크립트는 연속적인 구문으로 이루어진다. 하나의 구문은 지정문
   이 될수도 있고, 함수 호출, 반복문, 조건문이 될수 있으며 심지어는 아무
   내용이 없는 빈 문장일수도 있다. 한 구문은 보통 세미콜른(;)으로 끝난다.
   또한 여러개의 구문을 중괄호({,})를 사용하여 하나의 그룹으로 만들어 사용할 수도 있다.
   이 구문 그룹은 그 그룹의 모든 구문들이 하나의 구문인 것처럼 인식된다.
   이 장에서는 여러 가지 구문형태에 대해 알아본다.
  </simpara>

  <sect1 id="control-structures.if">
   <title><literal>if</literal></title>
   <para>
    <literal>if</literal>문은 PHP를 포함해서 모든 언어에 있어서 가장
    중요한 기능(feature) 중 하나이다. 이 제어문으로 각각 다른 코드에 대해
    조건적인 수행을 가능케한다. <literal>if</literal>문의 기능은 C와 비슷하다:
    <informalexample>
     <programlisting>
<![CDATA[
if (expr)
    statement
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    <link linkend="language.expressions">표현식에 관한 섹션</link>에서 설명된것처럼
    <replaceable>expr</replaceable>은 논리(Boolean)값으로 취급된다.
    <replaceable>expr</replaceable>이 &true;와 같다면 PHP는 <replaceable>statement</replaceable>를
    수행할것이고, &false;라면 무시될것이다. 무슨값이 &false;인지 알려면
    <link linkend="language.types.boolean.casting">'Converting to boolean'</link>에 관한 섹션을 참고하세요.
   </simpara>
   <para>
    다음 예는 <replaceable>$a</replaceable>가 <replaceable>$b</replaceable>보다
    크다면 <computeroutput>a는 b보다 크다</computeroutput>를 출력할 것입니다.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
if ($a > $b)
    print "a는 b보다 크다";
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    종종 하나 이상의 구문을 조건적으로 수행시켜야 하는 때가 있습니다.
    물론 <literal>if</literal>절로 각 구문을 감싸줄 필요는 없습니다.
    대신, 구문 그룹안에 몇개의 구문을 그룹화할 수 있습니다. 예를 들면,
    이코드는 <replaceable>$a</replaceable>가 <replaceable>$b</replaceable>보다
    크다면 <computeroutput>a는 b보다 크다</computeroutput>라고 출력할것이고,
    <replaceable>$a</replaceable>의 값을 <replaceable>$b</replaceable>로
    지정하게 될것입니다.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
if ($a > $b) {
    print "a는 b보다 크다";
    $b = $a;
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    <literal>If</literal>문은 다른 <literal>if</literal>문안에 무한정으로
    내포될수 있습니다. 이와 같은 기능은 프로그램의 여러부분을 조건적으로
    수행하기 위한 유연성을 제공합니다.
   </simpara>
  </sect1>

  <sect1 id="control-structures.else">
   <title><literal>else</literal></title>
   <para>
    가끔은 특정 조건에 맞을때 구문 수행하지 않고, 조건과 맞지 않을 때 
    다른 구문을 수행하게 하고 싶은 때가 있다. <literal>else</literal>
    문은 이 목적을 위한 것이다. <literal>if</literal>문 다음의
    <literal>else</literal>문은 <literal>if</literal>구문안의 표현식이
    &false;일때 수행된다. 예를 들면, 다음 코드는 <replaceable>$a</replaceable>가
    <replaceable>$b</replaceable>보다 크다면 <computeroutput>a는 b보다 크다</computeroutput> 
    를 출력할것이고, 그렇지않다면 <computeroutput>a는 b보다 크지 않다</computeroutput>를 
    출력할것이다:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
if ($a > $b) {
    print "a는 b보다 크다";
} else {
    print "a는 b보다 크지 않다";
}
?>
]]>
     </programlisting>
    </informalexample>
    <literal>else</literal>문은 <literal>if</literal>문이 &false;일때만
    수행이 된다. 그리고 그들 모두 &false;값이 될수있다면 <literal>elseif</literal>문
    을 쓸수 있습니다.
    (<link linkend="control-structures.elseif">elseif</link>를 보세요)
   </para>
  </sect1>

  <sect1 id="control-structures.elseif">
   <title><literal>elseif</literal></title>
   <para>
    <literal>elseif</literal>, as its name suggests, is a combination
    of <literal>if</literal> and <literal>else</literal>.  Like
    <literal>else</literal>, it extends an <literal>if</literal>
    statement to execute a different statement in case the original
    <literal>if</literal> expression evaluates to
    &false;.  However, unlike
    <literal>else</literal>, it will execute that alternative
    expression only if the <literal>elseif</literal> conditional
    expression evaluates to &true;.  For example, the
    following code would display <computeroutput>a is bigger than
    b</computeroutput>, <computeroutput>a equal to b</computeroutput>
    or <computeroutput>a is smaller than b</computeroutput>:

    <literal>elseif</literal>, 이 이름에서 알수 있듯이,
    <literal>if</literal>와 <literal>else</literal>의 조합이다.
    <literal>else</literal>처럼 이 구문은 <literal>if</literal>절 
    다음에 와서 원래 <literal>if</literal>표현식이 &false;와 같은 경우에
    다른 구문을 수행한다. 그러나, <literal>else</literal>와는 달리
    <literal>elseif</literal>조건 표현식이 &true;일 때만 대체 표현식을
    수행할것이다. 예를 들면 다음 코드는 <computeroutput>a는 b보다 크다</computeroutput>,
    <computeroutput>a는 b와 같다</computeroutput>나 
    <computeroutput>a는 b보다 작다</computeroutput>을 출력할것이다.

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
if ($a > $b) {
    print "a는 b보다 크다";
} elseif ($a == $b) {
    print "a는 b와 같다";
} else {
    print "a는 b보다 작다";
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    같은 <literal>if</literal>절 안에 몇개의 <literal>elseif</literal>절이
    존재할수 있다. 가장 먼저 &true;가 되는 <literal>elseif</literal>표현식이 
    수행될것이다. PHP에서는 'else if' (두 단어)로 쓸수 있고 'elseif' (한 단어)
    와 방식은 같다. 문장적(syntactic)으로는 다르다 (C에 익숙하다면,
    이것은 같은 방식이다) 그러나 그 둘 모두 완전히 같은 결과를 보여줄것이다.
   </simpara>
   <simpara>
    <literal>elseif</literal>절은 선행 <literal>if</literal> 표현식과
    다른 <literal>elseif</literal>표현식이 &false;이고,
    이 <literal>elseif</literal>표현식이 &true;일때만 수행된다.
   </simpara>
  </sect1>

  <sect1 id="control-structures.alternative-syntax">
   <title>제어 구조의 대체 문법</title>
   <para>
    PHP는 제어 구조를 위해 대체 문법을 제공한다; 즉
    <literal>if</literal>, <literal>while</literal>, <literal>for</literal>,
    <literal>foreach</literal>, 그리고 <literal>switch</literal>.
    각 경우에 대체 문법의 기본형태는 괄호열기를 콜른 (:)으로 대체하고
    괄호닫기는 각각 <literal>endif;</literal>, <literal>endwhile;</literal>,
    <literal>endfor;</literal>, <literal>endforeach;</literal>, 또는
    <literal>endswitch;</literal>으로 대체한다.

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php if ($a == 5): ?>
A는 5와 같다
<?php endif; ?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    위 예에서는 대체 문법으로 쓰여진 <literal>if</literal>구문안에 "A는 5와 같다"
    HTML 블록이 포함되어있다. 이 HTML 블록은 $a가 5와 같을때만 출력될것이다.
   </simpara>
   <para>
    대체 문법은 <literal>else</literal>와 <literal>elseif</literal>문에도
    적용이 된다. 다음은 <literal>elseif</literal>와 <literal>else</literal>문
    과 같이 있는 <literal>if</literal>문 절의 대체 형태이다:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
if ($a == 5):
    print "a는 5와 같다";
    print "...";
elseif ($a == 6):
    print "a는 6과 같다";
    print "!!!";
else:
    print "a는 5도 아니고 6도 아니다";
endif;
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    더 많은 예는<link linkend="control-structures.while">while</link>,
    <link linkend="control-structures.for">for</link>와 <link
    linkend="control-structures.if">if</link>섹션에 있다.
   </para>
  </sect1>

  <sect1 id="control-structures.while">
   <title><literal>while</literal></title>
   <para>
    <literal>while</literal> loops are the simplest type of loop in
    PHP.  They behave just like their C counterparts.  The basic form
    of a <literal>while</literal> statement is:
    <informalexample>
     <programlisting>
<![CDATA[
while (expr) statement
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    The meaning of a <literal>while</literal> statement is simple.  It
    tells PHP to execute the nested statement(s) repeatedly, as long
    as the <literal>while</literal> expression evaluates to
    &true;.  The value of the expression is checked
    each time at the beginning of the loop, so even if this value
    changes during the execution of the nested statement(s), execution
    will not stop until the end of the iteration (each time PHP runs
    the statements in the loop is one iteration).  Sometimes, if the
    <literal>while</literal> expression evaluates to
    &false; from the very beginning, the nested
    statement(s) won't even be run once.
   </simpara>
   <para>
    Like with the <literal>if</literal> statement, you can group
    multiple statements within the same <literal>while</literal> loop
    by surrounding a group of statements with curly braces, or by
    using the alternate syntax:
    <informalexample>
     <programlisting>
<![CDATA[
while (expr): statement ... endwhile;
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    The following examples are identical, and both print numbers from
    1 to 10:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
/* example 1 */

$i = 1;
while ($i <= 10) {
    print $i++;  /* the printed value would be
                    $i before the increment
                    (post-increment) */
}

/* example 2 */

$i = 1;
while ($i <= 10):
    print $i;
    $i++;
endwhile;
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>

  <sect1 id="control-structures.do.while">
   <title><literal>do..while</literal></title>
   <simpara>
    <literal>do..while</literal> loops are very similar to
    <literal>while</literal> loops, except the truth expression is
    checked at the end of each iteration instead of in the beginning.
    The main difference from regular <literal>while</literal> loops is
    that the first iteration of a <literal>do..while</literal> loop is
    guaranteed to run (the truth expression is only checked at the end
    of the iteration), whereas it's may not necessarily run with a
    regular <literal>while</literal> loop (the truth expression is
    checked at the beginning of each iteration, if it evaluates to
    &false; right from the beginning, the loop
    execution would end immediately).
   </simpara>
   <para>
    There is just one syntax for <literal>do..while</literal> loops:

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$i = 0;
do {
   print $i;
} while ($i > 0);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
     The above loop would run one time exactly, since after the first
     iteration, when truth expression is checked, it evaluates to
     &false; ($i is not bigger than 0) and the loop
     execution ends.
   </simpara>
   <para>
    Advanced C users may be familiar with a different usage of the
    <literal>do..while</literal> loop, to allow stopping execution in
    the middle of code blocks, by encapsulating them with
    <literal>do..while</literal>(0), and using the <link
    linkend="control-structures.break"><literal>break</literal></link>
    statement.  The following code fragment demonstrates this:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
do {
    if ($i < 5) {
        print "i is not big enough";
        break;
    }
    $i *= $factor;
    if ($i < $minimum_limit) {
        break;
    }
    print "i is ok";

    /* process i */

} while(0);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Don't worry if you don't understand this right away or at all.
    You can code scripts and even powerful scripts without using this
    'feature'.
   </simpara>
  </sect1>

  <sect1 id="control-structures.for">
   <title><literal>for</literal></title>
   <para>
    <literal>for</literal> loops are the most complex loops in PHP.
    They behave like their C counterparts.  The syntax of a
    <literal>for</literal> loop is:
    <informalexample>
     <programlisting>
<![CDATA[
for (expr1; expr2; expr3) statement
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    The first expression (<replaceable>expr1</replaceable>) is
    evaluated (executed) once unconditionally at the beginning of the
    loop.
   </simpara>
   <simpara>
    In the beginning of each iteration,
    <replaceable>expr2</replaceable> is evaluated.  If it evaluates to
    &true;, the loop continues and the nested
    statement(s) are executed.  If it evaluates to
    &false;, the execution of the loop ends.
   </simpara>
   <simpara>
    At the end of each iteration, <replaceable>expr3</replaceable> is
    evaluated (executed).
   </simpara>
   <simpara>
    Each of the expressions can be empty.
    <replaceable>expr2</replaceable> being empty means the loop should
    be run indefinitely (PHP implicitly considers it as
    &true;, like C).  This may not be as useless as
    you might think, since often you'd want to end the loop using a
    conditional <link
    linkend="control-structures.break"><literal>break</literal></link>
    statement instead of using the <literal>for</literal> truth
    expression.
   </simpara>
   <para>
    Consider the following examples.  All of them display numbers from
    1 to 10:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
/* example 1 */

for ($i = 1; $i <= 10; $i++) {
    print $i;
}

/* example 2 */

for ($i = 1; ; $i++) {
    if ($i > 10) {
        break;
    }
    print $i;
}

/* example 3 */

$i = 1;
for (;;) {
    if ($i > 10) {
        break;
    }
    print $i;
    $i++;
}

/* example 4 */

for ($i = 1; $i <= 10; print $i, $i++);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Of course, the first example appears to be the nicest one (or
    perhaps the fourth), but you may find that being able to use empty
    expressions in <literal>for</literal> loops comes in handy in many
    occasions.
   </simpara>
   <para>
    PHP also supports the alternate "colon syntax" for
    <literal>for</literal> loops.
    <informalexample>
     <programlisting>
<![CDATA[
for (expr1; expr2; expr3): statement; ...; endfor;
]]>
     </programlisting>
     </informalexample>
   </para>
   <para>
    Other languages have a <literal>foreach</literal> statement to
    traverse an array or hash. PHP 3 has no such construct; PHP 4 does
    (see <link
    linkend="control-structures.foreach">foreach</link>). In PHP 3, you
    can combine <link linkend="control-structures.while">while</link>
    with the <function>list</function> and <function>each</function>
    functions to achieve the same effect. See the documentation for
    these functions for an example.
   </para>

  </sect1>

  <sect1 id="control-structures.foreach">
   <title><literal>foreach</literal></title>
   <para>
    PHP 4 (not PHP 3) includes a <literal>foreach</literal> construct, much
    like Perl and some other languages. This simply gives an easy way to
    iterate over arrays. <literal>foreach</literal> works only on arrays, and
    will issue an error when you try to use it on a variable with a different
    data type or an uninitialized variable. There are two syntaxes; the
    second is a minor but useful extension of the first:
    <informalexample>
     <programlisting>
<![CDATA[
foreach (array_expression as $value) statement
foreach (array_expression as $key => $value) statement
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    The first form loops over the array given by
    <literal>array_expression</literal>. On each loop, the value of
    the current element is assigned to <literal>$value</literal> and
    the internal array pointer is advanced by one (so on the next
    loop, you'll be looking at the next element).
   </simpara>
   <simpara>
    The second form does the same thing, except that the current
    element's key will be assigned to the variable
    <literal>$key</literal> on each loop.
   </simpara>
   <para>
    <note>
     <para>
      When <literal>foreach</literal> first starts executing, the
      internal array pointer is automatically reset to the first element
      of the array. This means that you do not need to call
      <function>reset</function> before a <literal>foreach</literal>
      loop.
     </para>
    </note>
   </para>
   <para>
    <note>
     <para>
      Also note that <literal>foreach</literal> operates on a copy of
      the specified array and not the array itself. Therefore, the
      array pointer is not modified as with the
      <function>each</function> construct, and changes to the array
      element returned are not reflected in the original array.
      However, the internal pointer of the original array
      <emphasis>is</emphasis> advanced with the processing of the
      array.  Assuming the foreach loop runs to completion, the
      array's internal pointer will be at the end of the array.
     </para>
    </note>
   </para>
   <para>
    <note>
     <para>
      <literal>foreach</literal> does not support the ability to
      suppress error messages using '@'.
     </para>
    </note>
   </para>
   <para>
    You may have noticed that the following are functionally
    identical:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$arr = array("one", "two", "three");
reset ($arr);
while (list(, $value) = each ($arr)) {
    echo "Value: $value<br>\n";
}

foreach ($arr as $value) {
    echo "Value: $value<br>\n";
}
?>
]]>
     </programlisting>
    </informalexample>
    The following are also functionally identical:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
reset ($arr);
while (list($key, $value) = each ($arr)) {
    echo "Key: $key; Value: $value<br>\n";
}

foreach ($arr as $key => $value) {
    echo "Key: $key; Value: $value<br>\n";
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    Some more examples to demonstrate usages:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
/* foreach example 1: value only */

$a = array (1, 2, 3, 17);

foreach ($a as $v) {
   print "Current value of \$a: $v.\n";
}

/* foreach example 2: value (with key printed for illustration) */

$a = array (1, 2, 3, 17);

$i = 0; /* for illustrative purposes only */

foreach ($a as $v) {
    print "\$a[$i] => $v.\n";
    $i++;
}

/* foreach example 3: key and value */

$a = array (
    "one" => 1,
    "two" => 2,
    "three" => 3,
    "seventeen" => 17
);

foreach ($a as $k => $v) {
    print "\$a[$k] => $v.\n";
}

/* foreach example 4: multi-dimensional arrays */

$a[0][0] = "a";
$a[0][1] = "b";
$a[1][0] = "y";
$a[1][1] = "z";

foreach ($a as $v1) {
    foreach ($v1 as $v2) {
        print "$v2\n";
    }
}

/* foreach example 5: dynamic arrays */

foreach (array(1, 2, 3, 4, 5) as $v) {
    print "$v\n";
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>

  <sect1 id="control-structures.break">
   <title><literal>break</literal></title>
   <simpara>
    <literal>break</literal> ends execution of the current
    <literal>for</literal>, <literal>foreach</literal>
    <literal>while</literal>, <literal>do..while</literal> or
    <literal>switch</literal> structure.
   </simpara>
   <simpara>
    <literal>break</literal> accepts an optional numeric argument
    which tells it how many nested enclosing structures are to be
    broken out of.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$arr = array ('one', 'two', 'three', 'four', 'stop', 'five');
while (list (, $val) = each ($arr)) {
    if ($val == 'stop') {
        break;    /* You could also write 'break 1;' here. */
    }
    echo "$val<br>\n";
}

/* Using the optional argument. */

$i = 0;
while (++$i) {
    switch ($i) {
    case 5:
        echo "At 5<br>\n";
        break 1;  /* Exit only the switch. */
    case 10:
        echo "At 10; quitting<br>\n";
        break 2;  /* Exit the switch and the while. */
    default:
        break;
    }
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>

  <sect1 id="control-structures.continue">
   <title><literal>continue</literal></title>
   <simpara>
    <literal>continue</literal> is used within looping structures to
    skip the rest of the current loop iteration and continue execution
    at the beginning of the next iteration.
   </simpara>
   <note>
    <simpara>
     Note that in PHP the
     <link linkend="control-structures.switch">switch</link> statement is
     considered a looping structure for the purposes of
     <literal>continue</literal>.
    </simpara>
   </note>
   <simpara>
    <literal>continue</literal> accepts an optional numeric argument
    which tells it how many levels of enclosing loops it should skip
    to the end of.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
while (list ($key, $value) = each ($arr)) {
    if (!($key % 2)) { // skip odd members
        continue;
    }
    do_something_odd ($value);
}

$i = 0;
while ($i++ < 5) {
    echo "Outer<br>\n";
    while (1) {
        echo "&nbsp;&nbsp;Middle<br>\n";
        while (1) {
            echo "&nbsp;&nbsp;Inner<br>\n";
            continue 3;
        }
        echo "This never gets output.<br>\n";
    }
    echo "Neither does this.<br>\n";
}
?>
]]>
     </programlisting>
     </informalexample>
    </para>
  </sect1>

  <sect1 id="control-structures.switch">
   <title><literal>switch</literal></title>
   <simpara>
    The <literal>switch</literal> statement is similar to a series of
    IF statements on the same expression.  In many occasions, you may
    want to compare the same variable (or expression) with many
    different values, and execute a different piece of code depending
    on which value it equals to.  This is exactly what the
    <literal>switch</literal> statement is for.
   </simpara>
   <note>
    <simpara>
     Note that unlike some other languages, the
     <link linkend="control-structures.continue">continue</link> statement
     applies to switch and acts similar to <literal>break</literal>.  If you
     have a switch inside a loop and wish to continue to the next iteration of
     the outer loop, use <literal>continue 2</literal>.
    </simpara>
   </note>
   <para>
    The following two examples are two different ways to write the
    same thing, one using a series of <literal>if</literal>
    statements, and the other using the <literal>switch</literal>
    statement:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
if ($i == 0) {
    print "i equals 0";
} elseif ($i == 1) {
    print "i equals 1";
} elseif ($i == 2) {
    print "i equals 2";
}

switch ($i) {
    case 0:
        print "i equals 0";
        break;
    case 1:
        print "i equals 1";
        break;
    case 2:
        print "i equals 2";
        break;
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    It is important to understand how the <literal>switch</literal>
    statement is executed in order to avoid mistakes.  The
    <literal>switch</literal> statement executes line by line
    (actually, statement by statement).  In the beginning, no code is
    executed.  Only when a <literal>case</literal> statement is found
    with a value that matches the value of the
    <literal>switch</literal> expression does PHP begin to execute the
    statements.  PHP continues to execute the statements until the end
    of the <literal>switch</literal> block, or the first time it sees
    a <literal>break</literal> statement.  If you don't write a
    <literal>break</literal> statement at the end of a case's
    statement list, PHP will go on executing the statements of the
    following case.  For example:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
switch ($i) {
    case 0:
        print "i equals 0";
    case 1:
        print "i equals 1";
    case 2:
        print "i equals 2";
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Here, if $i is equal to 0, PHP would execute all of the print
    statements!  If $i is equal to 1, PHP would execute the last two
    print statements. You would get the expected behavior ('i equals 2' 
    would be displayed) only if $i is equal to 2.  Thus,
    it is important not to forget <literal>break</literal> statements
    (even though you may want to avoid supplying them on purpose under
    certain circumstances).
   </simpara>
   <simpara>
    In a <literal>switch</literal> statement, the condition is
    evaluated only once and the result is compared to each
    <literal>case</literal> statement. In an <literal>elseif</literal>
    statement, the condition is evaluated again. If your condition is
    more complicated than a simple compare and/or is in a tight loop,
    a <literal>switch</literal> may be faster.
   </simpara>
   <para>
    The statement list for a case can also be empty, which simply
    passes control into the statement list for the next case.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
switch ($i) {
    case 0:
    case 1:
    case 2:
        print "i is less than 3 but not negative";
        break;
    case 3:
        print "i is 3";
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    A special case is the <literal>default</literal> case.  This case matches
    anything that wasn't matched by the other cases, and should be the last
    <literal>case</literal> statement.  For example:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
switch ($i) {
    case 0:
        print "i equals 0";
        break;
    case 1:
        print "i equals 1";
        break;
    case 2:
        print "i equals 2";
        break;
    default:
        print "i is not equal to 0, 1 or 2";
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    The <literal>case</literal> expression may be any expression that
    evaluates to a simple type, that is, integer or floating-point
    numbers and strings.  Arrays or objects cannot be used here unless
    they are dereferenced to a simple type.
   </para>
   <para>
    The alternative syntax for control structures is supported with
    switches. For more information, see <link
    linkend="control-structures.alternative-syntax">Alternative syntax
    for control structures</link> .
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
switch ($i):
    case 0:
        print "i equals 0";
        break;
    case 1:
        print "i equals 1";
        break;
    case 2:
        print "i equals 2";
        break;
    default:
        print "i is not equal to 0, 1 or 2";
endswitch;
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>

  <sect1 id="control-structures.declare">
   <title><literal>declare</literal></title>
   <para>
    The <literal>declare</literal> construct is used to
    set execution directives for a block of code.
    The syntax of <literal>declare</literal> is similar to
    the syntax of other flow control constructs:
    <informalexample>
     <programlisting>
<![CDATA[
declare (directive) statement
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    The <literal>directive</literal> section allows the
    behavior of the <literal>declare</literal> block to
    be set.
    Currently only one directive is recognized: the
    <literal>ticks</literal> directive. (See below for more
    information on the
    <link linkend="control-structures.declare.ticks">ticks</link>
    directive)
   </para>
   <para>
    The <literal>statement</literal> part of the
    <literal>declare</literal> block will be executed -- how
    it is executed and what side effects occur during execution
    may depend on the directive set in the
    <literal>directive</literal> block.
   </para>
   <para>
    The <literal>declare</literal> construct can also be used in the global 
    scope, affecting all code following it.
    <informalexample>
     <programlisting>
<![CDATA[
<?php
// these are the same:

// you can use this:
declare(ticks=1) {
    // entire script here
}

// or you can use this:
declare(ticks=1);
// entire script here
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <sect2 id="control-structures.declare.ticks">
    <title>Ticks</title>
    <para>A tick is an event that occurs for every
    <replaceable>N</replaceable> low-level statements executed
    by the parser within the <literal>declare</literal> block.
    The value for <replaceable>N</replaceable> is specified
    using <literal>ticks=<replaceable>N</replaceable></literal>
    within the <literal>declare</literal> blocks's
    <literal>directive</literal> section.
   </para>
   <para>
    The event(s) that occur on each tick are specified using the
    <function>register_tick_function</function>. See the example 
    below for more details. Note that more than one event can occur
    for each tick.
   </para>
   <para>
    <example>
     <title>Profile a section of PHP code</title>
     <programlisting role="php">
<![CDATA[
<?php
// A function that records the time when it is called
function profile ($dump = FALSE)
{
    static $profile;

    // Return the times stored in profile, then erase it
    if ($dump) {
        $temp = $profile;
        unset ($profile);
        return ($temp);
    }

    $profile[] = microtime ();
}

// Set up a tick handler
register_tick_function("profile");

// Initialize the function before the declare block
profile ();

// Run a block of code, throw a tick every 2nd statement
declare (ticks=2) {
    for ($x = 1; $x < 50; ++$x) {
        echo similar_text (md5($x), md5($x*$x)), "<br />;";
    }
}

// Display the data stored in the profiler
print_r (profile (TRUE));
?>
]]>
     </programlisting>
    </example>
    The example profiles the PHP code within the 'declare'
    block, recording the time at which every second low-level
    statement in the block was executed. This information can
    then be used to find the slow areas within particular
    segments of code. This process can be performed using other
    methods: using ticks is more convenient and easier to
    implement.
   </para>
   <simpara>
    Ticks are well suited for debugging, implementing simple
    multitasking, backgrounded I/O and many other tasks.
   </simpara>
   <simpara>
    See also <function>register_tick_function</function> and
    <function>unregister_tick_function</function>.
   </simpara>
   </sect2>
  </sect1>

  <sect1 id="function.return">
   <title>return</title>
   <simpara>
    If called from within a function, the <function>return</function>
    statement immediately ends execution of the current function, and
    returns its argument as the value of the function
    call. <function>return</function> will also end the execution of
    an <function>eval</function> statement or script file.
   </simpara>
   <simpara>
    If called from the global scope, then execution of the current
    script file is ended. If the current script file was
    <function>include</function>ed or <function>require</function>ed,
    then control is passed back to the calling file. Furthermore, if
    the current script file was <function>include</function>ed, then
    the value given to <function>return</function> will be returned as
    the value of the <function>include</function> call. If
    <function>return</function> is called from within the main script
    file, then script execution ends. If the current script file was
    named by the <link
    linkend="ini.auto-prepend-file">auto_prepend_file</link> or <link
    linkend="ini.auto-append-file">auto_append_file</link>
    configuration options in &php.ini;, 
    then that script file's execution is ended.
   </simpara>
   <simpara>For more information, see <link
   linkend="functions.returning-values">Returning values</link>.
   </simpara>
   <para>
    <note>
     <simpara>
      Note that since <function>return</function> is a language
      construct and not a function, the parentheses surrounding its
      arguments are <emphasis>not</emphasis> required--in fact, it is
      more common to leave them out than to use them, although it
      doesn't matter one way or the other.
     </simpara>
    </note>
   </para>
  </sect1>


 <sect1 id="function.require">
   <title><function>require</function></title>

   <simpara>
    The <function>require</function> statement includes and evaluates
    the specific file.
   </simpara>
   <simpara>
     <function>require</function> includes and evaluates a specific file.  
     Detailed information on how this inclusion works is described in the 
     documentation for <function>include</function>.
   </simpara>
   <simpara>
     <function>require</function> and <function>include</function> 
     are identical in every way except how they handle failure.  
     <function>include</function> produces a 
     <link linkend="internal.e-warning">Warning</link> while 
     <function>require</function> results in a <link linkend="internal.e-error">
     Fatal Error</link>.  In other words, don't hesitate to use 
     <function>require</function> if you want a missing file to halt processing 
     of the page.  <function>include</function> does not behave this way, the
     script will continue regardless.  Be sure to have an appropriate
     <link linkend="ini.include-path">include_path</link> setting as well.
   </simpara>
   <para>
    <example>
     <title>Basic <function>require</function> examples</title>
     <programlisting role="php">
<![CDATA[
<?php

require 'prepend.php';

require $somefile;

require ('somefile.txt');

?>
]]>
     </programlisting>
   </example>
   </para>
   <simpara>
    See the <function>include</function> documentation for more examples.
   </simpara>
   <para>
    <note>
     <simpara>
      Prior to PHP 4.0.2, the following applies: <function>require</function>
      will always attempt to read the target file, even if the line it's on
      never executes.  The conditional statement won't affect
      <function>require</function>. However, if the line on which the
      <function>require</function> occurs is not executed, neither will any of
      the code in the target file be executed.  Similarly, looping structures
      do not affect the behaviour of <function>require</function>. Although
      the code contained in the target file is still subject to the loop, the
      <function>require</function> itself happens only once.
     </simpara>
    </note>
   </para>
   
   &note.language-construct;
   
   &warn.no-win32-fopen-wrapper;
   
   <simpara>
    See also <function>include</function>, <function>require_once</function>,
    <function>include_once</function>, <function>eval</function>, 
    <function>file</function>, <function>readfile</function>, 
    <function>virtual</function> and <link linkend="ini.include-path">include_path</link>.
   </simpara>
  </sect1>

 <sect1 id="function.include">
   <title><function>include</function></title>
   <simpara>
    The <function>include</function> statement includes and evaluates
    the specified file.
   </simpara>
   <simpara>
     The documentation below also applies to <function>require</function>.
     The two constructs are identical in every way except how they handle
     failure.  <function>include</function> produces a 
     <link linkend="internal.e-warning">Warning</link> while <function>require</function>
     results in a <link linkend="internal.e-error">Fatal Error</link>.
     In other words, use <function>require</function> if you want 
     a missing file to halt processing of the page.  <function>include</function> does 
     not behave this way, the script will continue regardless.  Be sure to have an 
     appropriate <link linkend="ini.include-path">include_path</link> setting as well.
   </simpara>
   <simpara>
     When a file is included, the code it contains inherits the
     <link linkend="language.variables.scope">variable scope</link> of the
     line on which the include occurs.  Any variables available at that line
     in the calling file will be available within the called file, from that
     point forward.
   </simpara>
   <para>
     <example>
      <title>Basic <function>include</function> example</title>
      <programlisting role="php">
<![CDATA[
vars.php
<?php

$color = 'green';
$fruit = 'apple';

?>

test.php
<?php

echo "A $color $fruit"; // A

include 'vars.php';

echo "A $color $fruit"; // A green apple

?>
]]>
      </programlisting>
     </example>
   </para>
   <simpara>
     If the include occurs inside a function within the calling file,
     then all of the code contained in the called file will behave as
     though it had been defined inside that function.  So, it will follow
     the variable scope of that function.
   </simpara>
   <para>
     <example>
     <title>Including within functions</title>
      <programlisting role="php">
<![CDATA[
<?php

function foo()
{
    global $color;

    include 'vars.php';

    echo "A $color $fruit";
}

/* vars.php is in the scope of foo() so     *
 * $fruit is NOT available outside of this  *
 * scope.  $color is because we declared it *
 * as global.                               */

foo();                    // A green apple
echo "A $color $fruit";   // A green

?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
     When a file is included, parsing drops out of PHP mode and
     into HTML mode at the beginning of the target file, and resumes
     again at the end.  For this reason, any code inside the target
     file which should be executed as PHP code must be enclosed within
     <link linkend="language.basic-syntax.phpmode">valid PHP start
     and end tags</link>.
   </simpara>
   <simpara>
     If "<link linkend="ini.allow-url-fopen">URL fopen wrappers</link>"
     are enabled in PHP (which they are in the default configuration),
     you can specify the file to be included using an URL (via HTTP or
     other supported wrapper - see <xref linkend="wrappers"/> for a list
     of protocols) instead of a local pathname.  If the target server interprets
     the target file as PHP code, variables may be passed to the included
     file using an URL request string as used with HTTP GET.  This is
     not strictly speaking the same thing as including the file and having
     it inherit the parent file's variable scope; the script is actually
     being run on the remote server and the result is then being
     included into the local script.
   </simpara>
   &warn.no-win32-fopen-wrapper;
   <para>
    <example>
     <title><function>include</function> through HTTP</title>
     <programlisting role="php">
<![CDATA[
<?php

/* This example assumes that www.example.com is configured to parse .php
 * files and not .txt files. Also, 'Works' here means that the variables
 * $foo and $bar are available within the included file. */

// Won't work; file.txt wasn't handled by www.example.com as PHP
include 'http://www.example.com/file.txt?foo=1&bar=2';

// Won't work; looks for a file named 'file.php?foo=1&bar=2' on the
// local filesystem.
include 'file.php?foo=1&bar=2';

// Works.
include 'http://www.example.com/file.php?foo=1&bar=2';

$foo = 1;
$bar = 2;
include 'file.txt';  // Works.
include 'file.php';  // Works.

?>
]]>
     </programlisting>
    </example>
    See also <link linkend="features.remote-files">Remote files</link>,
    <function>fopen</function> and <function>file</function> for related 
    information.
   </para>
   <para>
     Because <function>include</function> and <function>require</function>
     are special language constructs, you must enclose them within a statement
     block if it's inside a conditional block.
   </para>
   <para>
    <example>
     <title>include() and conditional blocks</title>
     <programlisting role="php">
<![CDATA[
<?php

// This is WRONG and will not work as desired.
if ($condition)
    include $file;
else
    include $other;


// This is CORRECT.
if ($condition) {
    include $file;
} else {
    include $other;
}

?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    Handling Returns: It is possible to execute a <function>return</function> 
    statement inside an included file in order to terminate processing in that 
    file and return to the script which called it.  Also, it's possible to return 
    values from included files.  You can take the value of the include call as 
    you would a normal function.
   </simpara>
   <para>
    <note>
     <simpara>
      In PHP 3, the return may not appear inside a block unless it's
      a function block, in which case the <function>return</function> applies 
      to that function and not the whole file.
     </simpara>
    </note>
   </para>
   <para>
    <example>
     <title><function>include</function> and the <function>return</function> statement</title>
      <programlisting role="php">
<![CDATA[
return.php
<?php

$var = 'PHP';

return $var;

?>

noreturn.php
<?php

$var = 'PHP';

?>

testreturns.php
<?php

$foo = include 'return.php';

echo $foo; // prints 'PHP'

$bar = include 'noreturn.php';

echo $bar; // prints 1

?>
]]>
      </programlisting>
    </example>
   </para>
   <simpara>
    <literal>$bar</literal> is the value <literal>1</literal> because the include 
    was successful.  Notice the difference between the above examples.  The first uses 
    <function>return</function> within the included file while the other does not.  
    A few other ways to "include" files into variables are with 
    <function>fopen</function>, <function>file</function> or by using 
    <function>include</function> along with 
    <link linkend="ref.outcontrol">Output Control Functions</link>.
   </simpara>
   
   &note.language-construct;

   <simpara>
    See also <function>require</function>, <function>require_once</function>,
    <function>include_once</function>, <function>readfile</function>,
    <function>virtual</function>, and
    <link linkend="ini.include-path">include_path</link>.
   </simpara>
 </sect1>

 <sect1 id="function.require-once">
   <title><function>require_once</function></title>
   <para>
    The <function>require_once</function> statement includes and evaluates
    the specified file during the execution of the script.
    This is a behavior similar to the <function>require</function> statement,
    with the only difference being that if the code from a file has already
    been included, it will not be included again.  See the documentation for
    <function>require</function> for more information on how this statement 
    works.
   </para>
   <para>
    <function>require_once</function> should be used in cases where
    the same file might be included and evaluated more than once during a
    particular execution of a script, and you want to be sure that it is
    included exactly once to avoid problems with function redefinitions,
    variable value reassignments, etc.
   </para>
   <para>
     For examples on using <function>require_once</function> and
     <function>include_once</function>, look at the 
     <ulink url="&url.php.pear;">PEAR</ulink> code included in the 
     latest PHP source code distributions.
   </para>
   <para>
    <note>
     <para>
      <function>require_once</function> was added in PHP 4.0.1pl2
     </para>
    </note>
   </para>
   <para>
    <note>
     <para>
      Be aware, that the behaviour of <function>require_once</function>
      and <function>include_once</function> may not be what you expect
      on a non case sensitive operating system (such as Windows).
      <example>
       <title><function>require_once</function> is case sensitive</title>
       <programlisting role="php">
<![CDATA[
<?php
require_once("a.php"); // this will include a.php
require_once("A.php"); // this will include a.php again on Windows!
?>
]]>
        </programlisting>
      </example>
     </para>
    </note>
   </para>
   &warn.no-win32-fopen-wrapper;
   <para>
    See also: <function>require</function>,
    <function>include</function>, <function>include_once</function>,
    <function>get_required_files</function>,
    <function>get_included_files</function>, <function>readfile</function>,
    and <function>virtual</function>.
   </para>
  </sect1>

 <sect1 id="function.include-once">
   <title><function>include_once</function></title>
   <para>
    The <function>include_once</function> statement includes and evaluates
    the specified file during the execution of the script.
    This is a behavior similar to the <function>include</function> statement,
    with the only difference being that if the code from a file has already
    been included, it will not be included again.  As the name suggests, 
    it will be included just once.
   </para>
   <para>
    <function>include_once</function> should be used in cases where 
    the same file might be included and evaluated more than once during a
    particular execution of a script, and you want to be sure that it is
    included exactly once to avoid problems with function redefinitions,
    variable value reassignments, etc.
   </para>
   <para>
    For more examples on using <function>require_once</function> and
    <function>include_once</function>, look at the
    <ulink url="&url.php.pear;">PEAR</ulink> code included in the latest
    PHP source code distributions.
   </para>
   <para>
    <note>
     <para>
      <function>include_once</function> was added in PHP 4.0.1pl2
     </para>
    </note>
   </para>
   <para>
   <note>
     <para>
      Be aware, that the behaviour of <function>include_once</function>
      and <function>require_once</function> may not be what you expect
      on a non case sensitive operating system (such as Windows).
      <example>
       <title><function>include_once</function> is case sensitive</title>
       <programlisting role="php">
<![CDATA[
<?php
include_once("a.php"); // this will include a.php
include_once("A.php"); // this will include a.php again on Windows!
?>
]]>
        </programlisting>
      </example>
     </para>
    </note>
   </para>
   &warn.no-win32-fopen-wrapper;
   <para>
    See also <function>include</function>,
    <function>require</function>, <function>require_once</function>,
    <function>get_required_files</function>,
    <function>get_included_files</function>, <function>readfile</function>,
    and <function>virtual</function>.
   </para>
  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
