<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1.55 Maintainer: progcom Status: ready -->
<!-- CREDITS: fuzzy74 -->
 <chapter xml:id="language.constants" xmlns="http://docbook.org/ns/docbook">
  <title>상수</title>

  <simpara>
   상수는 단순한 값을 위한 식별자(이름)이다. 이름이 제시하는것과 같이,
   이 값은 스크립트 실행중에는 변경될수 없다. (실질적으로 상수가 아닌
   <link linkend="language.constants.predefined">마법 상수</link>
   을 제외하고)
   상수는 기본적으로 대소문자를 구별한다. 관례상, 상수 식별자는 항상
   대문자이다.
  </simpara>
  <para>
   PHP에서 상수명은 같은 규칙을 따른다. 유효한 상수명은 문자나 밑줄로
   시작하고 다른 문자나 숫자, 밑줄이 뒤를 따른다. 정규식으로는
   다음처럼 표현할수 있다:
   <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>
  </para>
  &tip.userlandnaming;
  <para>
   <example>
    <title>상수명으로 적합하거나 부적합한 이름들</title>
    <programlisting role="php">
<![CDATA[
<?php

// 유효한 상수명
define("FOO",     "something");
define("FOO2",    "something else");
define("FOO_BAR", "something more");

// 무효한 상수명
define("2FOO",    "something");

// 유효하지만, 피해야할 상수명:
// 어느날 PHP에서 마법 상수를 제공할 수 있으며,
// 이 경우 스크립트를 사용할 수 없습니다
define("__FOO__", "something");

?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <simpara>
    여기서 문자는 a-z, A-Z와 아스키 문자 127에서 255까지이다
    (0x7f-0xff).
   </simpara>
  </note>

  <simpara>
   &link.superglobals;처럼 상수의 유효범위(scope)는 전역적이다. 유효범위에
   상관없이 스크립트의 어느곳에서도 상수를 참조할수 있다. 상수에 관한
   더 자세한 정보를 위해 
   <link linkend="language.variables.scope">변수 범위</link>
   매뉴얼 섹션을 참고합니다.
  </simpara>

  <sect1 xml:id="language.constants.syntax">
   <title>문법</title>
   <simpara>
    <function>define</function> 함수를 사용해서 상수를 정의할 수 있습니다. PHP
    5.3.0부터 클래스 정의 밖에서 <literal>const</literal> 키워드를 사용할 수도
    있습니다. 상수가 한번 정의되면, 변경하거나 해제(undefine)할 수 없습니다.
   </simpara>
   <simpara>
    상수는 스칼라 데이터(<type>boolean</type>, <type>integer</type>,
    <type>float</type>, <type>string</type>)만 가질 수 있습니다.
    <type>resource</type>를 상수로 등록할 수 있지만, 피하십시오. 예상할 수
    없는 결과를 낳을 수 있습니다.
   </simpara>
   <simpara>
    단순히 상수명을 써서 상수값을 얻을 수 있다. 변수와는 달리 
    <literal>$</literal>가 상수명 앞으로 오면 <emphasis>안된다</emphasis>
    동적으로 상수명을 취하려한다면 <function>constant</function>함수로
    상수값을 가져올수 있다.
    정의된 모든 상수 목록을 구하려면 <function>get_defined_constants</function>
    함수를 쓴다.
   </simpara>
   <note>
    <simpara>
     상수와 (전역)변수는 서로 다른 네임스페이스(namespace)상에 있다.
     이말의 의미는 예를 들면 &true;와 <varname>$TRUE</varname>은
     일반적으로 다르다는것이다.
    </simpara>
   </note>
   <simpara>
    해제된 상수를 사용한다면, PHP는 상수명 자체를 쓴것이라고 가정할것이다
    즉,<type>string</type>으로 인식할것이다. (CONSTANT vs "CONSTANT")
    <link linkend="ref.errorfunc">E_NOTICE</link>로 이런 일이 발생했는지
    알수 있다.   
    왜 <link linkend="language.types.array.foo-bar">$foo[bar]</link>가
    잘못됐는지 (<literal>bar</literal>를 상수로 <function>define</function>
    하지않았다면) 매뉴얼을 참고한다. 단순히 상수가 설정되었는지만 확인하려
    한다면 <function>defined</function>함수를 쓰면 됩니다.
   </simpara>
   <para>
    다음은 상수와 변수의 차이점이다:
    <itemizedlist>
     <listitem>
      <simpara>
       상수는 이름 앞에 달러표시(<literal>$</literal>)가 없다.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       상수는 단순 지정(assingment)이 아니라 <function>define</function>
       함수로만 정의될수 있다.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       상수는 변수의 유효범위 규칙과는 상관없이 어느곳에서든 정의되거나
       값을 취할수 있다.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       상수는 한번 설정되면 재정의하거나 해제할수 없을것이다; 그리고
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       상수는 스칼라 값만 쓸수 있다.
       </simpara>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    <example>
     <title>상수 정의하기</title>
     <programlisting role="php">
<![CDATA[
<?php
define("CONSTANT", "Hello world.");
echo CONSTANT; // "Hello world."을 출력한다
echo Constant; // "Constant"를 출력하고 경고가 뜬다.
?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    <example>
     <title><literal>const</literal> 키워드를 사용해서 상수 정의하기</title>
     <programlisting role="php">
<![CDATA[
<?php
// PHP 5.3.0부터 작동
const CONSTANT = 'Hello World';

echo CONSTANT;
?>
]]>
     </programlisting>
    </example>
   </para>

   <simpara>
    참고: <link linkend="language.oop5.constants">클래스 상수</link>.
   </simpara>
  </sect1>
  
  <sect1 xml:id="language.constants.predefined">
   <title>마법 상수</title>

   <simpara>
    PHP는 어떤스크립트에서도 유효한 많은 수의 <link
     linkend="reserved.constants">미리 정의된 상수</link>를 제공한다.
    하지만 이 상수의 대부분은 다양한 확장(extension)에 의해 생성된다.
    그래서 그 확장이 같이 컴파일되어 유효하거나 동적인 로딩이 되어있어야
    이런 상수가 존재하게 된다.
   </simpara>
   
   <para>
    일곱 가지 마법 상수가 존재한다. 이 상수들은
    어디에서 쓰느냐에 따라 용도가 변경된다. 예를 들면,
    <constant>__LINE__</constant>상수의 값은 스크립트의 해당 줄과
    관련이 있다. 이 특별한 상수들은 대소문자 구별이 없고 다음과 같다:
   </para>
   <para>
    <table>
     <title>약간의 "마법" PHP 상수</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>이름</entry>
        <entry>설명</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><constant>__LINE__</constant></entry>
        <entry>
         파일의 현재 줄 번호
        </entry>
       </row>
       <row>
        <entry><constant>__FILE__</constant></entry>
        <entry>
         파일의 전체경로와 파일명. 포함한 파일 안에서 사용하면, 포함된
         파일명을 반환합니다.. PHP 4.0.2부터, <constant>__FILE__</constant>은
         언제나 절대 경로를 가지고 있습니다. 이전에는 특정한 경우에서 상대
         경로를 가지고 있었습니다.
        </entry>
       </row>
       <row>
        <entry><constant>__DIR__</constant></entry>
        <entry>
         파일의 디렉토리. 포함한 파일 안에서는, 포함된 파일의 디렉토리를
         반환합니다. 이는 <literal>dirname(__FILE__)</literal>과 동일합니다.
         디렉토리명은 루트 디렉토리가 아닌 이상, 마지막에 슬래시가 없습니다.
         (PHP 5.3.0에서 추가)
        </entry>
       </row>
       <row>
        <entry><constant>__FUNCTION__</constant></entry>
        <entry>
         함수명. (PHP 4.3.0에서 추가) PHP 5부터 이 상수는 정의된 그대로의
         함수명을 반환합니다. (대소문자 구분) PHP 4에서는 항상 소문자였습니다.
        </entry>
       </row>
       <row>
        <entry><constant>__CLASS__</constant></entry>
        <entry>
         클래스명. (PHP 4.3.0에서 추가) PHP 5부터 이 상수는 정의된 그대로의
         클래스명을 반환합니다. (대소문자 구분) PHP 4에서는 항상
         소문자였습니다.
        </entry>
       </row>
       <row>
        <entry><constant>__METHOD__</constant></entry>
        <entry>
         클래스 메쏘드명 (PHP 5.0.0에서 추가) 메쏘드 명은 정의한 대로
         반환됩니다. (대소문자 구분)
        </entry>
       </row>
       <row>
        <entry><constant>__NAMESPACE__</constant></entry>
        <entry>
         현재 이름공간 이름 (대소문자 구분). 이 상수는 컴파일 시에
         정의됩니다. (PHP 5.3.0에서 추가)
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    참고:
    <function>get_class</function>,
    <function>get_object_vars</function>,
    <function>file_exists</function>,
    <function>function_exists</function>.
   </para>
  </sect1>
 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
