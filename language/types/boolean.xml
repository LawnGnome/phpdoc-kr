<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 333500 Maintainer: acidd15 Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="language.types.boolean">
 <title>불린(Booleans)</title>
 
 <simpara>
  이것은 아주 간단한 타입입니다. <type>boolean</type> 은 참(&true;)과 거짓(&false;)값을 표현합니다.
 </simpara>

 <sect2 xml:id="language.types.boolean.syntax">
  <title>구문</title>
  <para>
   <type>boolean</type> 을 나타내기 위해서는, 상수 &true; 나 &false; 을 사용합니다.
   모두 대소문자를 구별하지 않습니다.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$foo = True; // TRUE 를 $foo 에 할당합니다.
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   보통은, <link linkend="language.operators">연산자</link> 가 리턴한 <type>boolean</type> 값이 <link linkend="language.control-structures">조건문</link> 에 전달 됩니다.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// == 는 테스트 연산자 입니다.
// 동일함을 비교하고, boolean 값을 리턴합니다.
if ($action == "show_version") {
    echo "The version is 1.23";
}

// 이것은 불필요 합니다.
if ($show_separators == TRUE) {
    echo "<hr>\n";
}

// ...왜냐하면 다음과 같이 해도 동일하기 때문입니다.:
if ($show_separators) {
    echo "<hr>\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="language.types.boolean.casting">
  <title>불린(boolean)으로 변환</title>

  <simpara>
   <type>boolean</type> 명시적으로 변환하기 위해서, <literal>(bool)</literal> 또는 <literal>(boolean)</literal> 캐스트를 사용합니다.
   하지만, 보통의 경우에는 연산자, 함수, 조건문 이 <type>boolean</type>으로 자동으로 변환하므로 캐스트가 불필요 합니다.
  </simpara>

  <simpara>
   참고 <link linkend="language.types.type-juggling">타입 다루기(juggling)</link>.
  </simpara>
   
  <para>
   <type>boolean</type> 으로 변환할때, 다음 값들은 &false; 로 간주 됩니다.:
  </para>
  
  <itemizedlist>
   <listitem>
    <simpara>
     <link linkend="language.types.boolean">boolean</link> &false;
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.integer">integer</link> 0 (zero)
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.float">float</link> 0.0 (zero)
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     비어있는 <link linkend="language.types.string">string</link>, 그리고
     <link linkend="language.types.string">string</link> "0"
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     요소를 가지지 않는 <link linkend="language.types.array">array</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     멤버 변수를 가지지 않는 <link linkend="language.types.object">object</link> (PHP 4 에서만 적용)
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     특별한 타입 <link linkend="language.types.null">NULL</link> (unset 변수 포함)
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     빈 태그로부터 만들어진 <link linkend="ref.simplexml">SimpleXML</link> 객체
    </simpara>
   </listitem>
  </itemizedlist>
    
  <para>
   다른 모든 값들은 &true; 로 간주 합니다. (모든 <link linkend="language.types.resource">resource</link> 를 포함해서)
  </para>
  
  <warning>
   <simpara>
    <literal>-1</literal> 은 &true; 로 간주됩니다, 0 이 아닌 다른 숫자들도 마찬가지입니다.
    (양수이든 음수이든 상관 없음)!
   </simpara>
  </warning>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump((bool) "");        // bool(false)
var_dump((bool) 1);         // bool(true)
var_dump((bool) -2);        // bool(true)
var_dump((bool) "foo");     // bool(true)
var_dump((bool) 2.3e5);     // bool(true)
var_dump((bool) array(12)); // bool(true)
var_dump((bool) array());   // bool(false)
var_dump((bool) "false");   // bool(true)
?>
]]>
   </programlisting>
  </informalexample>

 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
