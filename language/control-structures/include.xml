<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: n/a Maintainer: progcom Status: ready -->

<sect1 xml:id="function.include" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><function>include</function></title>
 <simpara>
  <function>include</function>문은 특정 파일을 인클루드 하고, 적용시킨다.
 </simpara>
 <simpara>
  아래 내용은 <function>require</function>에도 적용됩니다. 두 구조는 수행
  실패를 다루는 방법을 제외하고 완전히 동일합니다. 둘 모두 <link
   linkend="errorfunc.constants.errorlevels.e-warning">Warning</link>을
  발생시키지만, <function>require</function>는 <link
   linkend="errorfunc.constants.errorlevels.e-error">Fatal Error</link>가
  나타납니다. 즉, 파일이 없을 때 페이지 처리를 멈추고 싶으면
  <function>require</function>를 사용하면 됩니다.
  <function>include</function>는 멈추지 않고 스크립트가 계속 실행됩니다.
  또한, 적합한 <link linkend="ini.include-path">include_path</link> 설정인지
  확인해야 합니다. 
  PHP 4.3.5 이전에는 포함한 파일 안에서 해석 오류가 발생해도 수행을 멈추지
  않는 점에 주의하십시오. 이 버전부터는 멈춥니다.
 </simpara>
 <simpara>
  파일을 포함할 때는 각 include_path에 대해서 먼저 현재 작업 디렉토리에서
  상대 경로를 찾고, 실행중인 스크립트가 있는 디렉토리를 찾습니다. 즉,
  include_path가
  <literal>libraries</literal>이고, 현재 작업 디렉토리가 <filename
   class="directory">/www/</filename>이며, 포함한 파일
  <filename>include/a.php</filename>에 <literal>include
   "b.php"</literal>가 있으면, <filename>b.php</filename>는 먼저 <filename
   class="directory">/www/libraries/</filename>에서 찾고, 그 후에
  <filename class="directory">/www/include/</filename>을 찾습니다. 파일
  이름이 <literal>./</literal>이나 <literal>../</literal>로 시작하면, 현재
  작업 디렉토리 안에서만 찾습니다.
 </simpara>
 <simpara>
  파일이 인클루드 되면, 그 코드를 포함하는 코드는 인클루드가 발생한 줄의
  <link linkend="language.variables.scope">변수 유효 범위</link>를 물려받는다.
  호출하는 파일의 그 줄에서 사용되는 어떤 변수도 그 줄부터는 호출된 파일안에서 
  사용이 가능하다.
  그러나, 포함한 파일에서 선언한 모든 함수와 클래스는 전역 영역에
  들어갑니다.
 </simpara>
 <para>
  <example>
   <title>기본적인 <function>include</function> 사용예</title>
   <programlisting role="php">
<![CDATA[
vars.php
<?php

$color = 'green';
$fruit = 'apple';

?>

test.php
<?php

echo "A $color $fruit"; // A

include 'vars.php';

echo "A $color $fruit"; // A green apple

?>
]]>
   </programlisting>
  </example>
 </para>
 <simpara>
  인클루드가 호출하는 파일안의 함수내에서 발생한다면, 호출된 파일안의
  모든 코드가 그 함수에서 정의된것처럼 동작한다. 그래서, 그 함수의 변수
  유효범위를 따를것이다.
  이 규칙의 에외는 포함이 일어나기 전에 평가되는 <link
   linkend="language.constants.predefined">마법 상수</link>입니다.
 </simpara>
 <para>
  <example>
   <title>함수 내에서 인클루드하기</title>
   <programlisting role="php">
<![CDATA[
<?php

function foo()
{
    global $color;

    include 'vars.php';

    echo "A $color $fruit";
}

/* vars.php is in the scope of foo() so     *
 * $fruit is NOT available outside of this  *
 * scope.  $color is because we declared it *
 * as global.                               */

foo();                    // A green apple
echo "A $color $fruit";   // A green

?>
]]>
   </programlisting>
  </example>
 </para>
 <simpara>
  파일이 인클루드되면, 파싱은 PHP모드의 밖으로 나가서 목적 파일의 시작부분은
  HTML모드로 들어가게 되고, 끝부분에서 원래대로 회복된다. 이때문에,
  목적 파일에서 PHP코드로서 수행되어야 하는 코드는 
  <link linkend="language.basic-syntax.phpmode">유효한 PHP 시작과 마침 태그</link>
  로 막아줘야 한다.
 </simpara>
 <simpara>
  PHP에서 "<link linkend="ini.allow-url-fopen">URL fopen wrappers</link>"가 
  활성화되어 있으면 (디폴트 설정임), URL(HTTP나 다른 지원 래퍼(wrapper) -
  프로토콜 목록은 <xref linkend="wrappers"/>을 참고)을 사용하여 파일을 인클루드
  할수 있다. 목적 서버가 목적 파일을 PHP코드로 해석한다면, HTTP GET으로 사용된
  URL 리퀘스트 문자열은 변수로서 넘겨지게 될것이다. 이와같은 일은 파일을 인크루드
  하고 부모 파일의 변수 유효범위를 상속하는 것과 같은 경우가 되지는 않는다.
  스크립트는 실질적으로 원격 서버에서 실행이 되고 나서 로컬 스크립트에 포함된다.
 </simpara>
 &warn.no-win32-fopen-wrapper;
 <para>
  <example>
   <title>HTTP로 <function>include</function>하기</title>
   <programlisting role="php">
<![CDATA[
<?php

/* This example assumes that www.example.com is configured to parse .php
 * files and not .txt files. Also, 'Works' here means that the variables
 * $foo and $bar are available within the included file. */

// Won't work; file.txt wasn't handled by www.example.com as PHP
include 'http://www.example.com/file.txt?foo=1&bar=2';

// Won't work; looks for a file named 'file.php?foo=1&bar=2' on the
// local filesystem.
include 'file.php?foo=1&bar=2';

// Works.
include 'http://www.example.com/file.php?foo=1&bar=2';

$foo = 1;
$bar = 2;
include 'file.txt';  // Works.
include 'file.php';  // Works.

?>
]]>
   </programlisting>
  </example>
 </para>
 <warning>
  <title>보안 경고</title>
  <para>
   원격 파일은 원격 서버에서 실행(파일 확장자와 원격 서버가 PHP를
   실행하는가에 따라 다릅니다)되지만, 로컬 서버에서 실행할 수 있는 유효한
   PHP 스크립트를 만들 수도 있습니다. 원격 서버에서만 실행한 결과를 그대로
   출력해야 한다면, <function>readfile</function> 함수가 더 적합합니다.
   아니라면, 원격 스크립트가 유효하고 적합한 코드를 생성하도록 특별한
   주의를 기울이십시오.
  </para>
 </warning>
 <para>
  참고: <link linkend="features.remote-files">원격 파일</link>,
  <function>fopen</function>, <function>file</function>에 관련 정보가
  있습니다.
 </para>
 <simpara>
  반환 다루기: include한 파일 안에서 그 파일의 수행을 종료하고, 호출한
  스크립트로 돌아가기 위해서 <function>return</function>문을 실행할 수
  있습니다. 또한, 값을 반환하는 일도 가능합니다. include 호출을 일반 함수를
  사용한 것처럼 값을 받을 수 있습니다. 그러나, 원격 파일을 포함하였을 때, 그
  파일의 출력이 (다른 로컬 파일처럼) <link
   linkend="language.basic-syntax.phpmode">유효한 PHP 시작과 끝
   태그</link>를 가지지 않는다면 이 값을 받을 수 없습니다. 이 태그들 안에
  필요한 값을 정의하면, include한 파일의 어떤 위치에서라도 사용할 수
  있습니다.
 </simpara>
 <para>
  <function>include</function>은 특별한 언어 구조이기 때문에, 인수를 괄호로
  쌀 필요가 없습니다. 반환값을 비교할 때는 조심하십시오.
  <example>
   <title>include의 반환값 비교하기</title>
   <programlisting role="php">
<![CDATA[
<?php
// include(('vars.php') == 'OK'), 즉 include('')로 인식하여 작동하지 않습니다.
if (include('vars.php') == 'OK') {
    echo 'OK';
}

// 작동합니다.
if ((include 'vars.php') == 'OK') {
    echo 'OK';
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title><function>include</function>와 <function>return</function>문</title>
   <programlisting role="php">
<![CDATA[
return.php
<?php

$var = 'PHP';

return $var;

?>

noreturn.php
<?php

$var = 'PHP';

?>

testreturns.php
<?php

$foo = include 'return.php';

echo $foo; // prints 'PHP'

$bar = include 'noreturn.php';

echo $bar; // prints 1

?>
]]>
   </programlisting>
  </example>
 </para>
 <simpara>
  include가 성공했기 때문에 <literal>$bar</literal>의 값은
  <literal>1</literal>입니다. 위 예제 사이의 차이에 주목하십시오. 처음 것은
  포함한 파일 안에서 <function>return</function>을 사용하였지만, 다른 것은
  하지 않았습니다. 파일을 포함할 수 없으면 &false;를 반환하고
  <literal>E_WARNING</literal>을 발생합니다.
 </simpara>
 <para>
  포함한 파일에서 함수를 정의하면, 어디서 <function>return</function>을
  했는지에 관계 없이 메인 파일에서 사용할 수 있습니다. 파일이 두번 포함되면,
  PHP 5는 함수가 이미 정의되어 있기 때문에 치명적인 오류를 발생하지만, PHP
  4는 <function>return</function> 뒤에 정의했다면 불평하지 않습니다. 이미
  포함한 파일을 확인하기 위해서는 포함한 파일 안에서 조건적으로 return하기
  보다는 <function>include_once</function>를 사용하는 것을 권합니다.
 </para>
 <simpara>
  PHP 파일을 변수로 "포함"하는 또 다른 방법은 <link
   linkend="ref.outcontrol">출력 제어 함수</link>를
  <function>include</function>와 함께 사용하여 출력을 캡쳐하는 것입니다.
  예를 들면:
 </simpara>
 <para>
  <example>
   <title>PHP 파일을 포함하여 문자열로 변환하기 위해 출력 버퍼링
    사용하기</title>
   <programlisting role="php">
<![CDATA[
<?php
$string = get_include_contents('somefile.php');

function get_include_constents($filename) {
    if (is_file($filename)) {
        ob_start();
        include $filename;
        $contents = ob_get_contents();
        ob_end_clean();
        return $contents;
    }
    return false;
}

?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  스크립트 안에 자동으로 파일을 포함하기 위해서는, &php.ini;의 <link
   linkend="ini.auto-prepend-file">auto_prepend_file</link>과 <link
   linkend="ini.auto-append-file">auto_append_file</link> 설정 옵션을
  참고하십시오.
 </para>

 &note.language-construct;

 <simpara>
  참고: <function>require</function>, <function>require_once</function>,
  <function>include_once</function>,
  <function>get_included_files</function>, <function>readfile</function>,
  <function>virtual</function>, <function>virtual</function>, <link
   linkend="ini.include-path">include_path</link>.
 </simpara>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
