<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 283798 Maintainer: progcom Status: ready -->

<sect1 xml:id="control-structures.while" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>while</literal></title>
 <para>
  <literal>while</literal>는 PHP에서 제일 간단한 루프형이다.
  C와 똑같은 방식으로 동작한다. <literal>while</literal>문의
  기본적인 형태는 다음과 같다:
  <informalexample>
   <programlisting>
<![CDATA[
while (expr)
    statement
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  <literal>while</literal>문의 의미는 단순하다. <literal>while</literal>
  표현식이 계속 &true;이면, PHP에게 내포되어있는 구문(들)을 반복 수행하도
  록 하라는것이다. 표현식의 값은 루프의 시작에서 매번 체크가 된다. 그래서
  이 표현식 값이 내포된 구문(들)의 수행동안에 바뀔지라도 반복(iteration)
  의 끝이 아니면 수행은 끝나지 않게 된다.(루프에서 PHP가 구문을 한번수행
  할때 한번 반복(iteration)이다) 시작된지 얼마안되어 <literal>while</literal>표현식이 
  &false;로 판명되면, 내포된 구문(들)은 즉시 수행을 멈출것이다.
 </simpara>
 <para>
  <literal>if</literal>문과 마찬가지로 중괄호나 대체문법을 사용하여
  구문의 그룹을 둘러쌈으로써 <literal>while</literal>루프 안에 여러
  구문을 그룹화할 수 있다.
  <informalexample>
   <programlisting>
<![CDATA[
while (expr):
    statement
    ...
endwhile;
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  다음 예는 모두 동일하다. 둘다 1부터 10까지의 숫자를 출력한다:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/* example 1 */

$i = 1;
while ($i <= 10) {
    echo $i++;  /* 출력하는 값은 증가하기
                   전의 $i입니다.
                   (post-increment) */
}

/* example 2 */

$i = 1;
while ($i <= 10):
    echo $i;
    $i++;
endwhile;
?>
]]>
   </programlisting>
  </informalexample>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
