<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: n/a Maintainer: progcom Status: ready -->

<sect1 xml:id="control-structures.declare" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>declare</literal></title>
 <para>
  <literal>declare</literal>구문은 코드 블록의 수행 지시어를
  활성화하기 위해 사용된다.
  <literal>declare</literal>문법은 다른 흐름 제어 구조의 문법과
  비슷하다:
  <informalexample>
   <programlisting>
<![CDATA[
declare (directive) statement
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  <literal>directive</literal> 부분은 <literal>declare</literal> 블록의
  동작을 활성화합니다. 현재는 두 지시어만 인식합니다:
  <literal>ticks</literal> 지시어(자세한 정보는 아래 <link
   linkend="control-structures.declare.ticks">ticks</link> 지시어 참고)와
  <literal>encoding</literal> 지시어(자세한 정보는 아래 <link
   linkend="control-structures.declare.encoding">encoding</link> 지시어
  참고).
 </para>
 <note>
  <simpara>
   encoding 지시어는 PHP 5.3.0에서 추가되었습니다.
  </simpara>
 </note>
 <para>
  <literal>declare</literal>블록의 <literal>statement</literal>부분이 수행될것이다
  - 어떻게 수행이 되고 수행중에 어떤 사이드 이펙트가 발생할지는 
  <literal>directive</literal>블록의 디렉티브에 달려있다.
 </para>
 <para>
  <literal>declare</literal> 구문은 전역 유효영역 안에서 사용할수 있다.
  그래서 모든 코드가 그 디렉티브에 영향을 받는다. (그러나
  <literal>declare</literal>가 있는 파일을 포함하였을 때에는 원 파일에는
  영향을 주지 않습니다)
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// 이들은 동일합니다:

// 이를 사용할 수 있습니다:
declare(ticks=1) {
    // 여기에 전체 스크립트
}

// 또는 이렇게 사용할 수 있습니다:
declare(ticks=1);
// 여기에 전체 스크립트
?>
]]>
   </programlisting>
  </informalexample>
 </para>

 <sect2 xml:id="control-structures.declare.ticks">
  <title>틱(Ticks)</title>
  <caution>
   <simpara>
    PHP 5.3.0부터 틱은 배제되었고, PHP 6.0.0에서 제거될 예정입니다.
   </simpara>
  </caution>
  <para>
   틱은 <literal>declare</literal>블록에서 파서에 의해 수행되는
   <varname>N</varname> 저레벨(low-level) 구문마다 발생하는
   이벤트이다. <varname>N</varname> 값은 
   <literal>declare</literal>블록의 <literal>directive</literal>부분에서
   <code>ticks=<varname>N</varname></code> 으로 지정할수 있다.
  </para>
  <para>
   각 틱에서 발생하는 이벤트(들)은 <function>register_tick_function</function>함수
   를 써서 지정한다. 자세한 것은 아래 예제를 볼것. 각 틱에서는 하나 이상의
   이벤트가 발생할수 있음에 주의해야 한다.
  </para>
  <para>
   <example>
    <title>PHP 각 코드 섹션의 분석표만들기(Profile)</title>
    <programlisting role="php">
<![CDATA[
<?php
// 호출될대의 시간을 기록하는 함수
function profile($dump = FALSE)
{
    static $profile;

    // Profile에 저장된 모든 시간 리턴하고, 삭제함
    if ($dump) {
        $temp = $profile;
        unset($profile);
        return $temp;
    }

    $profile[] = microtime();
}

// 틱 핸들러 설정
register_tick_function("profile");

// declare 블록 전에 함수를 초기화
profile();

// 코드 블록의 실행하고, 두번째 구문에 틱을 부여함
declare(ticks=2) {
    for ($x = 1; $x < 50; ++$x) {
        echo similar_text(md5($x), md5($x*$x)), "<br />;";
    }
}

// 분석표에 저장된 데이터를 출력
print_r(profile(TRUE));
?>
]]>
   </programlisting>
  </example>
  위 예제 코드는 실행 블록안의 두번째  저레벨(low-level) 구문의
  시간에 따라 'declare'블록 안의 PHP코드를 분석한다. 이런 정보로
  어느 코드 부분에서 느려지는지 알아볼 수 있다. 이런 처리방법은
  다른 기법으로 수행할수있다: 틱을 이용하는 것은 좀더 편하고
  좀더 구현하기 쉽다.
 </para>
 <simpara>
  틱은 디버깅, 단순한 멀티태스킹 구현, 백그라운드 I/O와 다른 많은 작업
  에 적합하게 이용할수 있다.
 </simpara>
 <simpara>
  <function>register_tick_function</function>함수와
  <function>unregister_tick_function</function>함수를 참고하세요.
 </simpara>
</sect2>
<sect2 xml:id="control-structures.declare.encoding">
 <title>인코딩</title>
 <para>
  encoding 지시어를 사용하여 스크립트 별로 지정할 수 있는 인코딩입니다.
  <example>
   <title>스크립트의 인코딩 선언하기</title>
   <programlisting role="php">
<![CDATA[
<?php
declare(encoding='ISO-8859-1');
// code here
]]>
    </programlisting>
   </example>
  </para>

  <caution>
   <simpara>
    이름공간과 결합할 때, declare의 적합한 문법은
    <literal>declare(encoding='...');</literal> 뿐입니다.
    (<literal>...</literal>은 인코딩 값) 이름공간과 결합했을 때,
    <literal>declare(encoding='...') {}</literal>은 해석 오류를 발생합니다.
   </simpara>
  </caution>
  <para>
   PHP 5.3에서는 PHP가 <literal>--enable-zend-multibyte</literal>로 컴파일
   되지 않았을 경우, encoding 선언 값이 무시됩니다. PHP 6.0에서는,
   <literal>encoding</literal> 지시어가 파일이 생성된 인코딩을 스캐너에게
   알려줍니다. 적절한 값은 <literal>UTF-8</literal> 등의 인코딩 이름입니다.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
