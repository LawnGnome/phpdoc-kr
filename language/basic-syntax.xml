<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: n/a Maintainer: progcom Status: ready -->
<!-- CREDITS: fuzzy74 -->
 <chapter xml:id="language.basic-syntax" xmlns="http://docbook.org/ns/docbook">
  <title>기본 문법</title>
  <sect1 xml:id="language.basic-syntax.phpmode">
   <title>HTML에서 벗어나기</title>
   <para>
    PHP가 파일을 해석할 때, PHP가 사이에 있는 코드를 해석하라고 하는 시작과 끝
    태그를 찾습니다. 이런 방법의 해석은, 시작과 끝 태그 밖에 있는 부분은 PHP
    해석기가 무시하게 됨으로써, php가 어떠한 종료의 문서에도 포함될 수 있도록
    합니다. 대부분의 경우 다음 예제와 같이 php가 포함된 HTML 문서를 보게 될
    것입니다.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<p>이 부분은 무시합니다.</p>
<?php echo '이 부분은 해석합니다.'; ?>
<p>이 부분도 무시합니다.</p>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    좀 더 복잡한 구조도 사용할 수 있습니다:
    <example>
     <title>복잡한 벗어나기</title>
     <programlisting role="php">
<![CDATA[
<?php
if ($expression) {
    ?>
    <strong>This is true.</strong>
    <?php
} else {
    ?>
    <strong>This is false.</strong>
    <?php
}
?>
]]>
     </programlisting>
    </example>
    예상한 대로 작동합니다. PHP가 ?&gt; 닫기 태그를 만나면, 그것이
    무엇이던간에 다른 시작 태그를 만나기 전까지 단순히 출력하기 때문입니다.
    (바로 따라오는 줄바꿈 제외 - <link
     linkend="language.basic-syntax.instruction-separation">명령 구분</link>
    참고) 물론, 여기서 주어진 예제는 부자연스럽지만 큰 텍스트 블록을
    출력할 경우에는 PHP 해석 모드를 벗어나는 것이 모든 텍스트를
    <function>echo</function>나 <function>print</function>를 통하여 전송하는
    것보다 효율적입니다.
   </para>
   <para>
    php에서 사용할 수 있는 네가지 형태의 시작과 끝 태그가 있습니다. 그 중
    두가지, &lt;?php ?&gt;와 &lt;script language="php"&gt; &lt;/script&gt;는
    항상 사용할 수 있습니다. 두가지 짧은 태그와 <productname>ASP</productname>
    형식 태그는 &php.ini; 설정 파일에서 끄거나 켤 수 있습니다. 그러므로, 몇몇
    사람들에겐 짧은 태그나 <productname>ASP</productname> 형식 태그가 편할지는
    몰라도, 이식성이 부족하므로 일반적으로 권하지 않습니다.
    <note>
     <para>
      PHP를 XML이나 XHTML에 넣을 경우 &lt;?php ?&gt; 태그를 사용해야 표준과
      호환을 유지할 수 있습니다.
     </para>
    </note>
   </para>
   <para>
    <example>
     <title>PHP 시작과 끝 태그</title>
     <programlisting role="php">
<![CDATA[
1.  <?php echo 'XHTML나 XML 문서와 호환시키려면, 이렇게 쓰세요'; ?>

2.  <script language="php">
        echo '어떤 에디터 (프론트페이지같은)는 
              처리 명령을 좋아하지 않습니다';
    </script>

3.  <? echo '이런 형태가 제일 간단한 SGML 처리명령입니다'; ?>
    <?= expression ?>은 "<? echo expression ?>"을 간단히 쓴 모양입니다

4.  <% echo ("ASP스타일 태그를 쓸 수도 있습니다"); %>
    <%= $variable; # 이것은 "<% echo . . ." %>을 간단히 쓴 모양입니다
]]>
     </programlisting>
    </example>
   </para>
   <para>
    예제에서 볼 수 있는 태그 중 첫번째와 두번째는 항상 사용할 수 있지만,
    둘 중 첫번째 예제가 가장 보편적으로 사용되며, 권장됩니다.
   </para>
   <para>
    짧은 태그(예제 3)은 &php.ini; 설정 파일 지시어 <link
     linkend="ini.short-open-tag">short_open_tag</link>를 활성화하거나, php를
    <option>--enable-short-tags</option> 옵션으로 설정하였을 경우에만 사용할
    수 있습니다.
   </para>
   <para>
    <productname>ASP</productname> 형식 태그(예제 4)는 &php.ini; 설정 파일
    지시어 <link linkend="ini.asp-tags">asp_tags</link>를 활성화 했을 경우에만
    사용할 수 있습니다.
   </para>
   <para>
    <note>
     <para>
      프로그램이나 재사용을 위한 라이브러리를 개발할때, 또는 통제밖의
      PHP서버에 배치시킬때는 짧은 형 태그를 쓰는것은 피해야 한다.
      왜냐하면 짧은 형 태그는 목표하는 서버에서 지원되지 않을수도
      있기 때문이다. 이식성을 위해서, 재사용 코드는 짧은 형 태그로 
      쓰지 않도록 한다.
     </para>
    </note>
   </para>
  </sect1>
  
  <sect1 xml:id="language.basic-syntax.instruction-separation">
   <title>명령 구분</title>
   <para>
    C나 펄처럼, PHP는 각 명령 구문 끝을 세미콜론으로 종료해야 합니다. PHP 코드
    블록을 종료하면 자동으로 세미콜론을 적용합니다; PHP 블록의 마지막 줄에는
    세미콜론 종료를 하지 않아도 됩니다. 블록의 닫기 태그는 바로 뒤에 따라올 수
    있는 줄바꿈도 포함합니다.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 'This is a test';
?>

<?php echo 'This is a test' ?>

<?php echo '마지막 닫기 태그를 생략합니다';
]]>
     </programlisting>
    </informalexample>
    <note>
     <para>
      파일의 마지막에서 PHP 블록의 닫기 태그를 생략할 수 있으며, 때로는
      유용합니다. <function>include</function>나
      <function>require</function>를 사용할 경우, 원하지 않은 공백이 파일
      마지막에 들어가지 않게 함으로써, 나중에 추가 응답 헤더를 추가할 수
      있습니다. 또한 출력 버퍼링을 사용할 경우에도 포함한 파일들에 의해서 각
      파트의 마지막에 원하지 않은 공백을 피할 수 있으므로 도움이 됩니다.
     </para>
    </note>
   </para>
  </sect1>

  <sect1 xml:id="language.basic-syntax.comments">
   <title>주석</title>
   <para>
    PHP는 'C', 'C++', Unix 쉘 형식(펄 형식)의 주석(comment)형태를 
    지원한다. 예를 들면:

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 'This is a test'; // 한줄짜리 c++ 스타일 주석
    /* 여러줄의 주석
       이줄까지 주석처리 된다 */
    echo 'This is yet another test';
    echo 'One Final Test'; # 쉘 형식의 한줄짜리 주석
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    "한 줄" 주석 형식은 줄의 끝까지나 PHP 코드의 현재 블록까지 중, 먼저 오는
    부분까지만 주석으로 처리합니다. 이는 <literal>// ... ?&gt;</literal>나
    <literal># ... ?&gt;</literal> 뒤에 오는 HTML 코드가 출력됨을 의미합니다:
    ?&gt;는 PHP 모드를 종료하고 HTML 모드로 돌아가게 하므로,
    <literal>//</literal>나 <literal>#</literal>은 영향을 주지 않습니다. <link
     linkend="ini.asp-tags">asp_tags</link> 설정 지시어가 켜져 있으면,
    <literal>// %&gt;</literal>나 <literal># %&gt;</literal>에도 동일하게
    적용됩니다. 그러나, <literal>&lt;/script&gt;</literal> 태그는 한 줄
    주석에서 PHP 모드를 종료하지 않습니다.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<h1>This is an <?php # echo 'simple';?> example.</h1>
<p>The header above will say 'This is an example'.</p>
]]>
     </programlisting>
    </informalexample> 
   </para>
   <simpara>
    'C' 형식 주석은 첫 <literal>*/</literal>에서 종료합니다. 그러므로 'C' 형식
    주석을 중첩하지 않아야 합니다. 이는 큰 코드 블럭을 주석처리 하려고 할
    경우에 자주 발생하는 실수입니다.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
 /* 
    echo 'This is a test'; /* 이 주석은 문제가 발생합니다 */
 */
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>
 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
