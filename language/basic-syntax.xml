<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.8 $ -->
<!-- EN-Revision: 1.34 Maintainer: fuzzy74 Status: ready -->
 <chapter xml:id="language.basic-syntax" xmlns="http://docbook.org/ns/docbook">
  <title>기본 문법</title>

   <!--
   
    NOTE:                             Last modified: 2001-05-16 13:00 GMT
    
    the language part is currently under heavy revision. Please do not
    not make any heavy (i.e. structural) modifications to this part 
    for a moment. 
    
    You'd also better not start any translation yet.
    
    Comments are always welcome at phpdoc@lists.php.net
    
    Progress:
    
     intro : DOESN'T EXIST - yet?
             new chapter, with some introductionary remarks?
             Will be discussed on the ML soon.
     basic-syntax: 
             FINISHED
             except maybe moving the 'advanced escaping'
             to a better place?
             TODO: 
              - nada
     types : Being revised. Added all new types
             Boolean and Integer are more or less finished.
             The rest isn't.
             TODO: 
              - why is $foo[bar] bad syntax?
              - what's the difference between unset($bla) and
                $bla = NULL; (it is different!)
              - $obj->{expr} syntax
              - (unset) cast?????
              - $bla = unset <== should've been nuked, don't mention it
              - $str{offset} syntax, rather than $str[offset]
              - read notes and apply when any of them are useful
              - remove notes which have been included here.
              - ...
     the rest: Not yet started with.
             TODO: 
              - ?
     oop   : has been revised by Kristian, DONE.
   -->
   
  <sect1 xml:id="language.basic-syntax.phpmode">
   <title>HTML에서 벗어나기</title>
  
   <para>
    PHP가 파일을 해석할때 PHP코드로 해석하라고 하는 특별한 코드와 만나지
    않는다면 단순히 그 파일의 텍스트를 넘겨줄 뿐이다. 해석기(parser)는
    PHP 닫기 태그가 있는곳까지 발견된 코드 모두를 수행한다. PHP 닫기 태그
    를 만나면 다시 텍스트를 그냥 넘겨주기 시작하는것이다. 이런 메카니즘은
    HTML안에 PHP코드를 내장시킬수 있게 해준다: PHP 태그 밖의 모든것은 완전히
    단독으로 존재하는것이고, 반면에 PHP 태그 안쪽은 코드로서 해석이 된다.
   </para>

   <para>
    PHP 코드 블록은 네가지의 태그형태로 표시할수 있다. 이 중에서 두가지
    (&lt;?php. . .?&gt; 과 &lt;script language="php"&gt;. . .&lt;/script&gt;)는
    항상 유효한 형태이다. 반면에 다른 형태는 &php.ini; 설정 파일에서 켜거나 끌
    수 있다. 짧은형(short-form)태그와 ASP스타일(ASP-style) 태그는 편하겠지만,
    긴 형태 태그만큼 이식성이 뛰어나진 못하다. XML이나 XHTML안에
    PHP코드를 내장시키려면 XML과 호환될수 있도록 &lt;?php. . .?&gt;형을
    써야한다.
   </para>

   <para>
    PHP가 지원하는 태그 형태:
   </para>

    <para>
     <example>
      <title>HTML에서 벗어나기</title>
      <programlisting role="php">
<![CDATA[
1.  <?php echo("XHTML나 XML 문서와 호환시키려면, 이렇게 쓰세요\n"); ?>

2.  <? echo ("이런 형태가 제일간단하다. SGML 처리명령\n"); ?>
    <?= expression ?>는 "<? echo expression ?>"을 간단히 쓴 태그형
    
3.  <script language="php">
        echo ("어떤 에디터 (프론트페이지같은)는 
              처리 명령을 좋아하지 않는다");
    </script>

4.  <% echo ("ASP스타일 태그를 쓸수도 있다"); %>
    <%= $variable; # 이것은 "<% echo . . ." %>을 간단히 쓴 태그형
]]>
      </programlisting>
     </example>
    </para>

   <para>
    첫번째 방법 &lt;?php. . .?&gt;을 쓰는것이 가장 좋다. 이런 형태는 
    XHTML과 같은 XML호환 코드안에 PHP를 쓸수 있게 해주기때문이다.
   </para>

   <para>
    두번째 방법은 항상 유효하지 않다. 이 짧은 형은 활성화시켰을때만 유효하다.
    <function>short_tags</function> 함수 (PHP 3에서만)로,
    PHP 설정 파일 안의 <link linkend="ini.short-open-tag">short_open_tag</link>
    설정 값을 활성화시키거나, <command>configure</command>명령 시에
    --enable-short-tags옵션을 줘서 PHP를 컴파일함으로써 가용하게 할수있다.
   </para>

   <para>
    네번째 방법은 <link linkend="ini.asp-tags">asp_tags</link>설정값을
    활성화시킴으로써 ASP 스타일 태그형태를 쓸수 있을때만 유효하다.
    <note>
     <para>3.0.4부터 ASP 스타일 태그에 대한 지원이 추가되었다</para>
    </note>
   </para>

   <para>
    <note>
     <para>
      프로그램이나 재사용을 위한 라이브러리를 개발할때, 또는 통제밖의
      PHP서버에 배치시킬때는 짧은 형 태그를 쓰는것은 피해야 한다.
      왜냐하면 짧은 형 태그는 목표하는 서버에서 지원되지 않을수도
      있기 때문이다. 이식성을 위해서, 재사용 코드는 짧은 형 태그로 
      쓰지 않도록 한다.
     </para>
    </note>
   </para>

   <para>
    블록의 닫기 태그가 하나만 존재한다면 그 뒤에 바로 
    새줄(newline)이 포함될것이다. 또, 닫기 태그는 자동적으로 
    세미콜른(;)의 역할도 수행한다. 따라서 PHP블록의 마지막 줄은 세미콜른
    으로 끝낼 필요가 없다.
   </para>
    
   <para>
    PHP는 다음과 같은 구조도 허용이 된다:
    <example><title>향상된 회피(escaping)</title>
     <programlisting role="php">
<![CDATA[
<?php
if ($expression) { 
    ?>
    <strong>이것은 참이다.</strong>
    <?php 
} else { 
    ?>
    <strong>이것은 거짓이다.</strong>
    <?php 
}
?>
]]>
     </programlisting>
    </example>
    이런 구조는 기대하던대로 작동한다. 왜냐하면 PHP는 ?&gt;닫기 태그에
    맞닥뜨리고나서 열기 태그를 만나기 전까지의 무엇이든 단순히
    출력만 하기 때문이다. 이 예제는 PHP 파싱 모드를 줄임으로써
    <function>echo</function>나 <function>print</function> 또는 비슷한
    함수들이 모든 텍스트를 출력하는것보다 효율적으로 거대한 텍스트 블록
    을 출력할수 있게 한다.
   </para>
  </sect1>
  
  <sect1 xml:id="language.basic-syntax.instruction-separation">
   <title>명령 구분 기호</title>
   
   <simpara>
    명령은 C나 펄과 같은 기호를 사용하여 구분한다 - 각 명령은 세미콜른(;)
    으로 끝난다.
   </simpara>

   <para>
    닫기 태그 (?&gt;)는 또한 문장의 끝이라는 의미를 내포한다. 그래서
    다음 문장은 동일하다:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo "This is a test";
?>

<?php echo "This is a test" ?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>

  <sect1 xml:id="language.basic-syntax.comments">
   <title>주석</title>
   
   <para>
    PHP는 'C', 'C++', Unix 셀 스타일(shell-style)의 주석(comment)형태를 
    지원한다. 예를 들면:

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo "This is a test"; // 한줄짜리 c++ 스타일 주석
    /* 여러줄의 주석
       이줄까지 주석처리 된다 */
    echo "This is yet another test";
    echo "One Final Test"; # 셀스타일의 한줄짜리 주석
?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <simpara>
    "한줄짜리" 주석은 그 줄의 끝이나, 처음에 무엇이 오든 해당 PHP코드 
    블록에 주석을 단다.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<h1>This is an <?php # echo "simple";?> example.</h1>
<p>The header above will say 'This is an example'.
]]>
     </programlisting>
    </informalexample> 
   </para>

   <simpara>
    'C' 스타일 주석을 중복 내포하지 않도록 주의해야 한다. 이와 같은 실수는
    거대한 블록을 주석처리할 때 일어날수 있다.
   </simpara>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
 /* 
    echo "This is a test"; /* 이 주석은 문제를 일으킬것이다. */
 */
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   
   <simpara>
    한줄짜리 주석은 그 줄의 끝이나, 처음에 무엇이 오든 해당 PHP코드 
    블록에 주석을 단다.
    이 말의 의미는 <literal>// ?></literal>이후에 HTML코드가 출력될것이
    라는 것이다: ?> 은 PHP모드를 벗어나서 HTML모드로 돌아오게 하고,
    <literal>//</literal>은 이 동작에 영향을 미치지 못한다.

   </simpara>
  </sect1>
 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
