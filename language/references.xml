<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1.51 Maintainer: progcom Status: ready -->
<!-- CREDITS: fuzzy74 -->
 <chapter xml:id="language.references" xmlns="http://docbook.org/ns/docbook">
  <title>참조 표현</title>

  <sect1 xml:id="language.references.whatare">
   <title>참조란 무엇인가</title>
   <simpara>  
    PHP에서 참조란 다른 이름으로 같은 변수의 내용에 접근한다는 것을
    의미한다. C 포인터와 비슷한 개념은 아닙니다; 심볼 테이블이라고 볼 수 있다.
    PHP에서 변수명과 변수의 내용은 다르다. 그래서 같은 내용이 다른 이름을
    가질 수 있다. 가장 가까운 개념은 유닉스 파일명과 파일입니다 - 변수명은
    디렉토리 엔트리이고, 변수 내용은 파일 자체입니다. 참조는 유닉스
    파일시스템의 하드 링크와 유사하게 볼 수 있습니다.
   </simpara>
  </sect1>

  <sect1 xml:id="language.references.whatdo">
   <title>참조는 무엇을 하는가</title>
   <para>
    PHP 참조는 두 변수가 같은 내용을 참조할수 있게 한다. 다음과 같은 일을 한다:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$a =& $b;
?>
]]>
     </programlisting>
    </informalexample>
    <varname>$a</varname>와 <varname>$b</varname>가 같은 내용을 가리키는 것을
    의미합니다.
    <note>
     <para>
      여기에서 <varname>$a</varname>와 <varname>$b</varname>는 완전히
      동일합니다. <varname>$a</varname>는 <varname>$b</varname>를 가리키고,
      그 반대일 수도 있습니다. <varname>$a</varname>와 <varname>$b</varname>는
      같은 위치를 가리킵니다.
     </para>
    </note>
   </para>
   <note>
    <para>
     참조를 가진 배열이 복사되면, 그 값들은 참조인 상태로 남습니다. 이는
     배열이 함수에 값으로 넘겨졌을 때에도 유효합니다.
    </para>
   </note>
   <note>
    <para>
     정의되지 않은 변수를 참조를 통해 할당하거나, 넘기거나, 반환하면 변수가
     생성됩니다.
     <example>
      <title>정의되지 않은 변수에 참조 사용하기</title>
      <programlisting role="php">
<![CDATA[
<?php
function foo(&$var) { }

foo($a); // $a가 "생성되고" null로 할당됩니다

$b = array();
foo($b['b']);
var_dump(array_key_exists('b', $b)); // bool(true)

$c = new StdClass;
foo($c->d);
var_dump(property_exists($c, 'd')); // boold(true)
?>
]]>
      </programlisting>
     </example>
    </para>
   </note>
   <para>
    같은 문법을 참조를 반환하는 함수나, <literal>new</literal> 연산자(PHP
    4.0.4부터)에도 사용합니다.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$bar =& new fooclass();
$foo =& find_var($bar);
?>
]]>
     </programlisting>
    </informalexample>
    PHP 5부터, <link linkend="language.oop5.basic.new">new</link>는 자동으로
    참조를 반환하므로, 여기에서처럼 <literal>=&amp;</literal>를 사용하는 것은
    배제되었고 E_STRICT 등급 메세지를 발생합니다.
   </para>
    <note>
     <para>
     <literal>&amp;</literal> 연산자를 사용하지않으면 생성된 객체의 복사본을 돌려받는다.
     그 클래스에서 <literal>$this</literal>를 사용한다면 그것은 클래스의 현재 인스턴스에만
     영향을 미친다. <literal>&amp;</literal>가 없는 지정은 인스턴스(즉, 객체)를 복사할것이고
     <literal>$this</literal>는 복사본에만 영향을 미칠것이다. 이와 같은 것은
     퍼포먼스와 메모리의 효율적인 사용을 위해 오직 하나의 인스턴스만 취급하기를 원할 경우에 사용된다.
     </para>
     <para>
      <literal>@new</literal>처럼 생성자에서 발생하는 모든 에러 메시지를
      <emphasis>보이지 않게</emphasis> 하기 위해서 <literal>@</literal>연산자를 사용할수 있지만,
      <literal>&amp;new</literal>구문을 사용할때는 이 연산자는 작동하지 않는다.
      이것은 젠드 엔진의 한계로 이런 표현을 쓰면 해석 오류가 발생한다.
     </para>
   </note>
   <warning>
    <para>
     함수 안에서 <literal>global</literal>로 선언한 변수에 참조를 할당하면, 그
     참조는 그 함수 안에서만 보여집니다. 이를 피하려면
     <varname>$GLOBALS</varname> 배열을 사용하십시오.
     <example>
      <title>함수 안에서 전역 변수 참조하기</title>
      <programlisting role="php">
<![CDATA[
<?php
$var1 = "Example variable";
$var2 = "";

function global_references($use_globals)
{
    global $var1, $var2;
    if ($use_globals) {
        $var2 =& $var1; // 함수 안에서만 보여집니다
    } else {
        $GLOBALS["var2"] =& $var1; // 전역 문맥에서도 보여집니다
    }
}

global_references(false);
echo "var2 is set to '$var2'\n"; // var2 is set to ''
global_references(true);
echo "var2 is set to '$var2'\n"; // var2 is set to 'Example variable'
?>
]]>
      </programlisting>
     </example>
     <literal>global $var;</literal>는 <literal>$var =&amp;
      $GLOBALS['var'];</literal>의 단축형임을 생각하십시오. 그러므로 다른
     참조를 <literal>$var</literal>에 할당하는 것은 지역 변수의 참조를 변경할
     뿐입니다.
    </para>
   </warning>
   <note>
    <para>
     <link linkend="control-structures.foreach">foreach</link> 구문 안에서
     참조 변수에 값을 할당하면, 참조도 변경됩니다.
     <example>
      <title>참조와 foreach 구문</title>
      <programlisting role="php">
<![CDATA[
<?php
$ref = 0;
$row =& $ref;
foreach (array(1, 2, 3) as $row) {
    // do something
}
echo $ref; // 3 - 반복한 배열의 마지막 원소
?>
]]>
      </programlisting>
     </example>
    </para>
   </note>
   <para>
    참조가 하는 두번째 일은 참조에 의해 변수를 전달하는 것이다. 이는
    함수에서 지역 변수를 만들거나 같은 내용을 참조하는 호출을 사용하는 변수를 
    생성함으로써 가능해진다. 예를 들면:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo(&$var)
{
    $var++;
}

$a=5;
foo($a);
?>
]]>
     </programlisting>
    </informalexample>
    위 코드는 <varname>$a</varname>를 6으로 만들것이다. 이렇게 되는 이유는
    <varname>foo</varname>함수 안의 변수 <varname>$var</varname>가 
    <varname>$a</varname>와 같은 내용을 가리키기 때문이다. 이에 대한 정보는
    <link linkend="language.references.pass">참조에 의한 전달</link>
    섹션을 읽어보십시오.
   </para>
   <simpara>
    참조가 하는 세번째 일은 <link linkend="language.references.return">참조에 의해 돌려받기</link>이다.
   </simpara>
  </sect1>

  <sect1 xml:id="language.references.arent">
   <title>참조가 아닌 것</title>
   <para>
    전에 설명했듯이, 참조는 포인터가 아니다. 이말의 의미는 다음
    구문이 기대하던대로 작업을 수행하지 않을것이란 의미이다:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo(&$var)
{
    $var =& $GLOBALS["baz"];
}
foo($bar); 
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    위 예제에서 <varname>foo</varname>안의 <varname>$var</varname>변수는 
    호출자 안의 <varname>$bar</varname>와 연결될 것이다. 그리고 이 변수는
    <varname>$GLOBALS["baz"]</varname>과 다시 연결될것이다. 참조 메카니즘을
    사용하여 다른 호출 영역안의 <varname>$bar</varname>를 연결할수 있는 방법이
    존재하지는 않는다. 왜냐하면 <varname>$bar</varname>는 함수 <varname>foo</varname>에서
    유효하지 않기 때문이다 (그것은 <varname>$var</varname>에 의해 표현되는 것이 아니고, 
    <varname>$var</varname>는 오직 변수 내용만을 소유하고 호출 심볼 테이블 내에서
    이름이 값으로 변환되어 연결되지는 않는다).
    함수에 의해 선택된 참조 변수를 <link
     linkend="language.references.return">참조 반환</link>에 사용할 수
    있습니다.
   </simpara>
  </sect1>

  <sect1 xml:id="language.references.pass">
   <title>참조에 의한 전달</title>
   <para>
    함수에 참조에 의한 전달을 할 수 있습니다. 이로써 함수가 변수를 변경할 수
    있습니다. 문법은 다음과 같습니다:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo(&$var)
{
    $var++;
}

$a=5;
foo($a);
// $a is 6 here
?>
]]>
     </programlisting>
    </informalexample>
  함수 호출에 대해 참조 표시를 할수 없다는 것에 주의해야 한다. 
  - 함수 선언에서만 참조 표시를 할수 있다
  함수 선언만으로도 충분히 참조에 의해 인수를 정확하게 전달할수 있다. 최근
  버전의 PHP에서 <literal>foo(&amp;$a);</literal>처럼 &amp;를 사용하면,
  "call-time pass-by-reference"가 배제되었다는 경고를 받습니다.
  </para>
  <para>
  다음과 같은 것들은 참조에 의해 전달될수 있다:
   <itemizedlist>
    <listitem>
     <simpara>
      변수, 예, <literal>foo($a)</literal>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      New 구문, 예. <literal>foo(new foobar())</literal>
     </simpara>
    </listitem>
    <listitem>
     <para>
      함수에서 반환한 참조, 예: 
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function &bar()
{
    $a = 5;
    return $a;
}
foo(bar());
?>
]]>
     </programlisting>
    </informalexample>
    <link linkend="language.references.return">참조로 반환하기</link>에
    대해서도 참고하십시오.
     </para>
    </listitem>
  </itemizedlist>
  </para>
  <para>
  결과가 정의되어 있지 않기 때문에, 다른 표현식을 참조에 의해 전달해서는
  안됩니다.
  예를 들어, 다음과 같은 참조에 의한 전달 예제는 유효하지 않다.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function bar() // Note the missing &
{
    $a = 5;
    return $a;
}
foo(bar()); // PHP 5.0.5부터 치명적인 오류가 발생합니다

foo($a = 5); // 변수가 아닌, 표현식입니다
foo(5); // 치명적인 오류가 발생합니다
?>
]]>
     </programlisting>
    </informalexample>
    이런 조건은 PHP 4.0.4 이후 버전에서만 요구된다.
  </para>
  </sect1>

  <sect1 xml:id="language.references.return">
   <title>참조 반환하기</title>
   <para>
    참조에 의한 반환하기는 참조에 연결되어 있는 변수를 찾는 함수를 사용할 때
    유용합니다. 참조에 의한 반환을 성능을 증가시키기 위해 사용하지
    <emphasis>마십시오</emphasis>. 엔진이 스스로 최적화해 줍니다. 참조를
    반환하는건 기술적으로 할 필요가 있을 경우에만 하십시오. 참조를 반환하려면,
    다음 문법을 사용합니다:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class foo {
    public $value = 42;

    public function &getValue() {
        retrun $this->value;
    }
}

$obj = new foo;
$myValue = &$obj->getValue(); // $myValue는 $obj->value의 참조로, 42입니다.
$obj->value = 2;
echo $myValue;                // $obj->value의 새 값, 즉 2를 출력합니다.
?>
]]>
     </programlisting>
    </informalexample>
    위 예제 코드는  함수 <varname>getvalue</varname>에 의해 반환하는
    객체의 속성을 설정하지만, 참조 문법을 사용하지 않을 때와 같은
    복사가 아니다.
   </para>
   <note>
    <simpara>
     인수 전달과 달리, 여기서는 두 군데에서 <literal>&amp;</literal>을
     사용해야 한다 - 보통의 복사가 아니라, 참조에 의해 반환하는 것을 가리킬 때,
     그리고 일반적인 지정이 아닌 참조 연결이라는 것을 가리킬때,
     <varname>$myValue</varname>에 대해 사용해야 한다.
    </simpara>
   </note>
   <note>
    <simpara>
     다음 문법으로 함수에서 참조를 반환하려 할 수 있습니다:
     <literal>return ($this->value);</literal> 이는 작동하지
     <emphasis>않습니다</emphasis>. 변수가 아닌 <emphasis>표현식</emphasis>을
     참조로 반환하려고 하는 일이기 때문입니다. 함수에서는 변수만을 참조로
     반환할 수 있습니다 - 다른 것은 안됩니다.
     PHP4의 PHP 4.4.0부터, PHP5의 PHP 5.1.0부터 코드가 동적 표현식이나
     <literal>new</literal> 연산자의 결과를 반환하려 하면,
     <constant>E_NOTICE</constant> 오류가 발생합니다.
    </simpara>
   </note>
  </sect1>

  <sect1 xml:id="language.references.unset">
   <title>참조 해제</title>
   <para>
    참조 unset하면 변수 명과 변수 내용 사이의 연결만을 끊는다. 이 말의
    의미는 변수 내용이 사라질것이라는 것을 의미하지 않는다. 예를 들면:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b =& $a;
unset($a); 
?>
]]>
     </programlisting>
    </informalexample>
    위 예제 코드는 <varname>$a</varname>만 해제되고 <varname>$b</varname>를 
    해제(unset)하지는 않을것이다.
   </para>
   <simpara>
    다시 말하면, 유닉스의 <command>unlink</command> 호출에 비유할수 있을것이다.
   </simpara>
  </sect1>

  <sect1 xml:id="language.references.spot">
   <title>참조로 볼수 있는것</title>
   <simpara>
    PHP내의 많은 문법 구조가 참조 메카니즘에 의해 구현된다. 그래서 
    위에서 설명한 모든 참조 연결이 이런 구조에 적용된다.  위에서
    참조에 의한 전달과 참조에 의한 돌려주기 같은 몇몇 구조문을 설명했다.
    다음과 같은 구조는 참조를 사용한다:
   </simpara>

   <sect2 xml:id="references.global">
    <title><literal>global</literal> 참조</title>
    <para>
     <command>global $var</command>처럼 변수를 선언하면 전역 변수에
     대한 참조를 생성하게 된다. 즉, 다음과 같은 의미를 갖는다:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$var =& $GLOBALS["var"];
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     이는 <varname>$var</varname>를 해제해도 전역 변수가 해제되지는
     않는다는 의미입니다.
    </simpara>
   </sect2>

   <sect2 xml:id="references.this">
    <title><literal>$this</literal></title>
    <simpara>
     객체 메소드에서,<varname>$this</varname>는 항상 호출 객체로의 참조를 하게
     된다.
    </simpara>
   </sect2>
  </sect1>

 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
