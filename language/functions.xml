<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 337738 Maintainer: progcom Status: ready -->
<!-- CREDITS: fuzzy74,acidd15 -->
 <chapter xml:id="language.functions" xmlns="http://docbook.org/ns/docbook">
  <title>함수</title>

  <sect1 xml:id="functions.user-defined">
   <title>사용자 선언 함수</title>
 
   <para>
    다음과 같은 문법으로 함수를 선언할 수 있습니다:
   </para>
   <para>
    <example>
     <title>함수 사용을 설명하기 위한 가상 코드</title>
     <programlisting role="php">
<![CDATA[
<?php
function foo($arg_1, $arg_2, /* ..., */ $arg_n)
{
    echo "예제 함수.\n";
    return $retval;
}
?>
]]>
     </programlisting>
    </example>
   </para>
   
   <simpara>
    모든 유효한 PHP 코드를 함수 내부에서 사용할 수 있고, 다른 함수나
    <link linkend="keyword.class">class</link> 정의도 사용할 수 있습니다.
   </simpara>
   <para>
    함수 이름은 PHP의 다른 라벨과 같은 규칙을 따릅니다. 유효한 함수 이름은
    문자나 _로 시작하고, 여러 개의 문자, 숫자, _가 붙습니다. 정규 표현식으로는
    다음과 같이 표현됩니다:
    <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>.
   </para>
   &tip.userlandnaming;
   <simpara>
    함수는 아래 두 예제처럼 조건적으로 정의할 경우를
    <emphasis>제외하고</emphasis>, 참조하기 전에 정의할 필요는 없습니다.
   </simpara>
   <para>
    아래 예제 코드와 같이 함수가 조건적으로 선언되면 그 함수가 호출되기
    <emphasis>전에</emphasis> 함수를 선언해야 합니다.
   </para>
   <para>
    <example>
     <title>조건적인 함수</title>
     <programlisting role="php">
<![CDATA[
<?php

$makefoo = true;

/* We can't call foo() from here 
   since it doesn't exist yet,
   but we can call bar() */

bar();

if ($makefoo) {
  function foo()
  {
    echo "I don't exist until program execution reaches me.\n";
  }
}

/* Now we can safely call foo()
   since $makefoo evaluated to true */

if ($makefoo) foo();

function bar() 
{
  echo "I exist immediately upon program start.\n";
}

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>함수 안의 함수</title>
     <programlisting role="php">
<![CDATA[
<?php
function foo() 
{
  function bar() 
  {
    echo "foo()를 호출하기 전까지는 존재하지 않습니다.\n";
  }
}

/* bar()를 호출할 수 없습니다.
   아직 존재하지 않습니다. */

foo();

/* 이제 bar()를  호출할 수
   있습니다. foo()를 실행하여
   접근할 수 있게 되었습니다. */

bar();

?>  
]]>
     </programlisting>
    </example>
   </para>
   <para>
    PHP의 모든 함수와 클래스는 전역입니다 - 함수가 내부에서 정의되었더라도
    외부에서 호출할 수 있으며, 반대도 성립합니다.
   </para>
   <simpara>
    PHP는 함수 오버로딩(overloading)을 지원하지 않으며, 함수 정의를
    해제하거나 이미 선언된 함수를 다시 선언할 수 없습니다.
   </simpara>
   <note>
    <simpara>
     함수명은 대소문자를 구별하지 않지만, 선언한 대로 호출하는 것이 일반적으로 좋은 형태입니다.
    </simpara>
   </note>   
   <simpara>
    함수에서 <link linkend="functions.variable-arg-list">가변 길이 인수
     목록</link>과 <link linkend="functions.arguments.default">인수
     기본값</link>을 지원합니다. 자세한 정보는
    <function>func_num_args</function>, <function>func_get_arg</function>,
    <function>func_get_args</function> 함수 레퍼런스를 참고하십시오.
   </simpara>

   <para>
    PHP에서 재귀 함수 호출을 할 수 있습니다.
    <example>
     <title>재귀 함수</title>
     <programlisting role="php">
<![CDATA[
<?php
function recursion($a)
{
    if ($a < 20) {
        echo "$a\n";
        recursion($a + 1);
    }
}
?>
]]>
     </programlisting>
    </example>
   <note>
    <simpara>
     100-200 재귀 레벨을
     어서는 함수/메소드 호출을 피하십시오. 스택 한계에 도달하여 현재
     크립트가 중단될 수 있습니다.
     특히, 무한재귀호출은 프로그래밍 오류로 간주합니다.
    </simpara>
   </note>
   </para>

  </sect1>
 
  <sect1 xml:id="functions.arguments">
   <title>함수 인수</title>
 
   <simpara>
    함수 인수를 통해서 함수에 정보를 넘겨줄수 있다. 이런 함수 인수는
    콤마(,)로 구별되는 표현 목록이다.
   </simpara> 
   
   <para>
    PHP는 값에 의한 인수 전달(passing by value) (기본값),
    <link linkend="functions.arguments.by-reference">참조에 의한 전달</link>, 
    <link linkend="functions.arguments.default">인수 기본값</link> 기능을
    지원합니다. <link linkend="functions.variable-arg-list">가변 길이 인수
     목록</link>도 지원하며, 자세한 정보는 <function>func_num_args</function>,
    <function>func_get_arg</function>, <function>func_get_args</function> 함수
    레퍼런스를 참고하십시오.
   </para>
   <para>
    <example>
     <title>함수에 배열 넘겨주기</title>
     <programlisting role="php">
<![CDATA[
<?php
function takes_array($input)
{
    echo "$input[0] + $input[1] = ", $input[0]+$input[1];
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <sect2 xml:id="functions.arguments.by-reference">
    <title>참조에 의한 인수 전달하기</title>
 
    <simpara>
     기본적으로, 함수 인수는 값에 의해 전달됩니다. (그래서 함수내의 인수
     변수값을 변경해도 함수 밖에서는 바뀌지 않습니다) 함수가 그 인수를 바꾸게
     하려면, 참조로 넘겨줘야 합니다.
    </simpara>
    <para>
     항상 함수의 인수를 참조로 넘기게 하려면, 함수 정의에서 엠퍼샌드(&amp;)를
     인수 이름 앞에 붙이면 됩니다:
    </para>
    <para>
     <example>
      <title>참조에 의해 함수 인수 전달하기</title>
      <programlisting role="php">
<![CDATA[
<?php
function add_some_extra(&$string)
{
    $string .= 'and something extra.';
}
$str = 'This is a string, ';
add_some_extra($str);
echo $str;    // outputs 'This is a string, and something extra.'
?>
]]>
      </programlisting>
     </example>
    </para>
   </sect2>
   <sect2 xml:id="functions.arguments.default">
    <title>기본 인수 값</title>
 
    <para>
     함수는 다음과 같이 스칼라 인수에 대해 C++스타일 기본값으로 지정할수있다:
    </para>
    <para>
     <example>
      <title>함수에 기본 인수 사용하기</title>
      <programlisting role="php">
<![CDATA[
<?php
function makecoffee($type = "cappuccino")
{
    return "Making a cup of $type.\n";
}
echo makecoffee();
echo makecoffee(null);
echo makecoffee("espresso");
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
Making a cup of cappuccino.
Making a cup of .
Making a cup of espresso.
]]>
      </screen>
     </example>
    </para>
    <para>
     PHP는 <type>array</type>와 특별형 &null;을 기본값으로 사용할 수 있습니다.
     예를 들면:
    </para>
    <para>
     <example>
      <title>스칼라 형이 아닌 기본값 사용하기</title>
      <programlisting role="php">
<![CDATA[
<?php
function makecoffee($types = array("카푸치노"), $coffeeMaker = NULL)
{
    $device = is_null($coffeeMaker) ? "손" : $coffeeMaker;
    return "$device(으)로 ".join(", ", $types)."를 만듭니다.\n";
}
echo makecoffee();
echo makecoffee(array("카푸치노", "라바짜"), "찻주전자");
?>
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     기본값은 상수 표현식이 될수 있으나 (예를 들면) 변수나 
     클래스 멤버가 될수는 없다.
    </simpara>
    <para>
     기본 인수를 사용할때에는 모든 기본값은 기본값을 쓰지 않는 인수의
     오른쪽으로 가야 한다; 그렇지 않으면, 기대하던대로 작동하지 않을것이다.
     다음 예제 코드를 참고:
    </para>
    <para>
     <example>
      <title>기본 함수 인수가 잘못 사용된 예</title>
      <programlisting role="php">
<![CDATA[
<?php
function makeyogurt($type = "acidophilus", $flavour)
{
    return "Making a bowl of $type $flavour.\n";
}
 
echo makeyogurt("raspberry");   // won't work as expected
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
Warning: Missing argument 2 in call to makeyogurt() in 
/usr/local/etc/httpd/htdocs/phptest/functest.html on line 41
Making a bowl of raspberry .
]]>
      </screen>
     </example>
    </para>
    <para>
     위 코드를 아래 코드와 비교하라:
    </para>
    <para>
     <example>
      <title>기본 함수 인수의 정확한 사용예</title>
      <programlisting role="php">
<![CDATA[
<?php
function makeyogurt($flavour, $type = "acidophilus")
{
    return "Making a bowl of $type $flavour.\n";
}
 
echo makeyogurt("raspberry");   // works as expected
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
Making a bowl of acidophilus raspberry.
]]>
      </screen>
     </example>
    </para>

    <note>
     <simpara>
      PHP 5부터, 기본값을 참조로 넘길 수 있습니다.
     </simpara>
    </note>
</sect2>

   <sect2 xml:id="functions.arguments.type-declaration">
    <title>Type declarations</title>

    <note>
     <para>
      Type declarations were also known as type hints in PHP 5.
     </para>
    </note>

    <para>
     Type declarations allow functions to require that parameters are of a
     certain type at call time. If the given value is of the incorrect type,
     then an error is generated: in PHP 5, this will be a recoverable fatal
     error, while PHP 7 will throw a <classname>TypeError</classname>
     exception.
    </para>

    <para>
     To specify a type declaration, the type name should be added before the
     parameter name. The declaration can be made to accept &null; values if
     the default value of the parameter is set to &null;.
    </para>

    <sect3 xml:id="functions.arguments.type-declaration.types">
     <title>Valid types</title>
     <informaltable>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>Type</entry>
         <entry>Description</entry>
         <entry>Minimum PHP version</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>Class/interface name</entry>
         <entry>
          The parameter must be an &instanceof; the given class or interface
          name.
         </entry>
         <entry>PHP 5.0.0</entry>
        </row>
        <row>
         <entry><literal>self</literal></entry>
         <entry>
          The parameter must be an &instanceof; the same class as the one the
          method is defined on. This can only be used on class and instance
          methods.
         </entry>
         <entry>PHP 5.0.0</entry>
        </row>
        <row>
         <entry><type>array</type></entry>
         <entry>
          The parameter must be an <type>array</type>.
         </entry>
         <entry>PHP 5.1.0</entry>
        </row>
        <row>
         <entry><type>callable</type></entry>
         <entry>
          The parameter must be a valid <type>callable</type>.
         </entry>
         <entry>PHP 5.4.0</entry>
        </row>
        <row>
         <entry><type>bool</type></entry>
         <entry>
          The parameter must be a <type>boolean</type> value.
         </entry>
         <entry>PHP 7.0.0</entry>
        </row>
        <row>
         <entry><type>float</type></entry>
         <entry>
          The parameter must be a <type>float</type>ing point number.
         </entry>
         <entry>PHP 7.0.0</entry>
        </row>
        <row>
         <entry><type>int</type></entry>
         <entry>
          The parameter must be an <type>integer</type>.
         </entry>
         <entry>PHP 7.0.0</entry>
        </row>
        <row>
         <entry><type>string</type></entry>
         <entry>
          The parameter must be a <type>string</type>.
         </entry>
         <entry>PHP 7.0.0</entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </sect3>

    <sect3 xml:id="functions.arguments.type-declaration.examples">
     &reftitle.examples;
     <example>
      <title>Basic class type declaration</title>
      <programlisting role="php">
<![CDATA[
<?php
class C {}
class D extends C {}

// This doesn't extend C.
class E {}

function f(C $c) {
    echo get_class($c)."\n";
}

f(new C);
f(new D);
f(new E);
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
C
D

Fatal error: Uncaught TypeError: Argument 1 passed to f() must be an instance of C, instance of E given, called in - on line 14 and defined in -:8
Stack trace:
#0 -(14): f(Object(E))
#1 {main}
  thrown in - on line 8
]]>
      </screen>
     </example>

     <example>
      <title>Basic interface type declaration</title>
      <programlisting role="php">
<![CDATA[
<?php
interface I { public function f(); }
class C implements I { public function f() {} }

// This doesn't implement I.
class E {}

function f(I $i) {
    echo get_class($i)."\n";
}

f(new C);
f(new E);
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
C

Fatal error: Uncaught TypeError: Argument 1 passed to f() must implement interface I, instance of E given, called in - on line 13 and defined in -:8
Stack trace:
#0 -(13): f(Object(E))
#1 {main}
  thrown in - on line 8
]]>
      </screen>
     </example>

     <example>
      <title>Nullable type declaration</title>
      <programlisting role="php">
<![CDATA[
<?php
class C {}

function f(C $c = null) {
    var_dump($c);
}

f(new C);
f(null);
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
object(C)#1 (0) {
}
NULL
]]>
      </screen>
     </example>
    </sect3>

    <sect3 xml:id="functions.arguments.type-declaration.strict">
     <title>Strict typing</title>

     <para>
      By default, PHP will coerce values of the wrong type into the expected
      scalar type if possible. For example, a function that is given an
      <type>integer</type> for a parameter that expects a <type>string</type>
      will get a variable of type <type>string</type>.
     </para>

     <para>
      It is possible to enable strict mode on a per-file basis. In strict
      mode, only a variable of exact type of the type declaration will be
      accepted, or a <classname>TypeError</classname> will be thrown. The
      only exception to this rule is that an <type>integer</type> may be given
      to a function expecting a <type>float</type>.
     </para>

     <para>
      To enable strict mode, the &declare; statement is used with the
      <literal>strict_types</literal> declaration:
     </para>

     <caution>
      <para>
       Enabling strict mode will also affect
       <link linkend="functions.returning-values.type-declaration">return type declarations</link>.
      </para>
     </caution>

     <note>
      <para>
       Strict typing applies to function calls made from
       <emphasis>within</emphasis> the file with strict typing enabled, not to
       the functions declared within that file. If a file without strict
       typing enabled makes a call to a function that was defined in a file
       with strict typing, the caller's preference (weak typing) will be
       respected, and the value will be coerced.
      </para>
     </note>

     <note>
      <para>
       Strict typing is only defined for scalar type declarations, and as
       such, requires PHP 7.0.0 or later, as scalar type declarations were
       added in that version.
      </para>
     </note>

     <example>
      <title>Strict typing</title>
      <programlisting role="php">
<![CDATA[
<?php
declare(strict_types=1);

function sum(int $a, int $b) {
    return $a + $b;
}

var_dump(sum(1, 2));
var_dump(sum(1.5, 2.5));
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
int(3)

Fatal error: Uncaught TypeError: Argument 1 passed to sum() must be of the type integer, float given, called in - on line 9 and defined in -:4
Stack trace:
#0 -(9): sum(1.5, 2.5)
#1 {main}
  thrown in - on line 4
]]>
      </screen>
     </example>

     <example>
      <title>Weak typing</title>
      <programlisting role="php">
<![CDATA[
<?php
function sum(int $a, int $b) {
    return $a + $b;
}

var_dump(sum(1, 2));

// These will be coerced to integers: note the output below!
var_dump(sum(1.5, 2.5));
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
int(3)
int(3)
]]>
      </screen>
     </example>

     <example>
      <title>Catching <classname>TypeError</classname></title>
      <programlisting role="php">
<![CDATA[
<?php
declare(strict_types=1);

function sum(int $a, int $b) {
    return $a + $b;
}

try {
    var_dump(sum(1, 2));
    var_dump(sum(1.5, 2.5));
} catch (TypeError $e) {
    echo 'Error: '.$e->getMessage();
}
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
int(3)
Error: Argument 1 passed to sum() must be of the type integer, float given, called in - on line 10
]]>
      </screen>
     </example>
    </sect3>
   </sect2>
   <sect2 xml:id="functions.variable-arg-list">
    <title>가변 길이 인수 목록</title>

    <simpara>
     PHP는 사용자 선언 함수에서 가변 길이 인수 목록을 지원합니다. PHP 5.6 이상에서는
     <literal>...</literal> 토큰을 사용하고, PHP 5.5 이하에서는  
     <function>func_num_args</function>,
     <function>func_get_arg</function>,
     <function>func_get_args</function> 함수를 사용합니다.
    </simpara>

    <sect3 xml:id="functions.variable-arg-list.new">
     <title>PHP 5.6+에서 <literal>...</literal></title>

     <para>
      PHP 5.6 이상에서, 인수 목록은 <literal>...</literal> 토큰을 포함하여 함수가 가변 수의 인수를
      받을 수 있다고 표시할 수 있습니다. 인수는 배열로 주어진 변수에 전달됩니다; 예제:

      <example>
       <title>가변 인수에 접근하기 위한 <literal>...</literal> 사용하기</title>
       <programlisting role="php">
<![CDATA[
<?php
function sum(...$numbers) {
    $acc = 0;
    foreach ($numbers as $n) {
        $acc += $n;
    }
    return $acc;
}

echo sum(1, 2, 3, 4);
?>
]]>
       </programlisting>
       &example.outputs;
       <screen>
<![CDATA[
10
]]>
       </screen>
      </example>
     </para>
     <para>
      또한 함수를 호출할 때 <literal>...</literal>을 사용하여
      <type>array</type>, <classname>Traversable</classname> 변수, 또는
      literal을 인수 목록에 포함할 수 있습니다.
      literal into the argument list:

      <example>
       <title>인수 제공을 위한 <literal>...</literal> 사용하기</title>
       <programlisting role="php">
<![CDATA[
<?php
function add($a, $b) {
    return $a + $b;
}

echo add(...[1, 2])."\n";

$a = [1, 2];
echo add(...$a);
?>
]]>
       </programlisting>
       &example.outputs;
       <screen>
<![CDATA[
3
3
]]>
       </screen>
      </example>
     </para>

     <para>
      보통의 위치 인수를 <literal>...</literal> 앞에 지정할 수 있습니다.
      이 경우, 위치 인수에 어울리지 않는 인수만이 <literal>...</literal>로 생성되는 배열에
      추가됩니다.
     </para>

     <para>
      <literal>...</literal> 토큰 앞에
      <link linkend="language.oop5.typehinting">type hint</link>를
      추가할 수 있습니다. 이 정보가 존재할 경우, <literal>...</literal>에 들어가는
      모든 인수는 해당 클래스의 객체여야 합니다.

      <example>
       <title>Type hinted variable arguments</title>
       <programlisting role="php">
<![CDATA[
<?php
function total_intervals($unit, DateInterval ...$intervals) {
    $time = 0;
    foreach ($intervals as $interval) {
        $time += $interval->$unit;
    }
    return $time;
}

$a = new DateInterval('P1D');
$b = new DateInterval('P2D');
echo total_intervals('d', $a, $b).' days';

// This will fail, since null isn't a DateInterval object.
echo total_intervals('d', null);
?>
]]>
       </programlisting>
       &example.outputs;
       <screen>
<![CDATA[
3 days
Catchable fatal error: Argument 2 passed to total_intervals() must be an instance of DateInterval, null given, called in - on line 14 and defined in - on line 2
]]>
       </screen>
      </example>
     </para>

     <para>
      마지막으로, <literal>...</literal> 앞에 앰퍼샌드를 붙여서(<literal>&amp;</literal>)
      가변 인수를 <link linkend="functions.arguments.by-reference">참조로</link> 전달할
      수 있습니다.
     </para>
    </sect3>

    <sect3 xml:id="functions.variable-arg-list.old">
     <title>PHP 구 버전</title>

     <para>
      가변 인수로 만들기 위한 특별한 문법은 필요하지 않습니다; 하지만 함수의 인수에 접근하려면
      <function>func_num_args</function>, <function>func_get_arg</function>,
      <function>func_get_args</function> 함수를 사용해야 합니다.
     </para>

     <para>
      
      위 예제 중 첫번째를 PHP 5.5 이전에서는 다음과 같이 사용합니다:

      <example>
       <title>PHP 5.5 이전의 가변 길이 인수 접근하기</title>
       <programlisting role="php">
<![CDATA[
<?php
function sum() {
    $acc = 0;
    foreach (func_get_args() as $n) {
        $acc += $n;
    }
    return $acc;
}

echo sum(1, 2, 3, 4);
?>
]]>
       </programlisting>
       &example.outputs;
       <screen>
<![CDATA[
10
]]>
       </screen>
      </example>
     </para>
    </sect3>

   </sect2>
  </sect1>
 
  <sect1 xml:id="functions.returning-values">
   <title>반환값</title>
 
   <para>
    선택적인 return문을 사용하여 값을 돌려준다. 배열이나 객체를 포함하여
    모든 타입을 돌려줄수있다. 이 구문에서 함수의 수행이 즉시 중단되고
    현재 함수를 호출한 코드줄로 제어를 되돌린다. 
    자세한 정보는 <function>return</function>섹션을 참고할것.
   </para>
   
   <note>
    <para>
     If the <function>return</function> is omitted the value &null; will be
     returned.
    </para>
   </note>
   
   <sect2>
    <title>Use of return</title>
   <para>
    <example>
     <title><function>return</function>의 사용예</title>
     <programlisting role="php">
<![CDATA[
<?php
function square($num)
{
    return $num * $num;
}
echo square(4);   // outputs '16'.
?>
]]>
     </programlisting>
    </example>
   </para>
      
   <para>
    함수는 여러 값을 반환할 수 없습니다. 그러나 배열을 반환하게 해서 비슷한
    결과를 얻을 수 있습니다.
   </para>
   <para>
    <example>
     <title>여러 값을 취하기 위해 배열을 돌려줌</title>
     <programlisting role="php">
<![CDATA[
<?php
function small_numbers()
{
    return array (0, 1, 2);
}
list ($zero, $one, $two) = small_numbers();
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    함수에서 참조를 돌려주기위해서는, 함수 선언부와 돌려주는 변수값을
    지정하는 곳에서 참조 연산자 &amp; 를 사용해야 한다.
   </para>
   <para>
    <example>
     <title>함수에서 참조 돌려주기</title>
     <programlisting role="php">
<![CDATA[
<?php
function &returns_reference()
{
    return $someref;
}

$newref =& returns_reference();
?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    참조에 관한 자세한 정보는, <link linkend="language.references">참조 표현</link>섹션을
    참고.
   </simpara>
</sect2>   

  <sect2 xml:id="functions.returning-values.type-declaration">
   <title>Return type declarations</title>

   <para>
    PHP 7 adds support for return type declarations. Similarly to
    <link linkend="functions.arguments.type-declaration">argument type declarations</link>,
    return type declarations specify the type of the value that will be
    returned from a function. The same
    <link linkend="functions.arguments.type-declaration.types">types</link>
    are available for return type declarations as are available for argument
    type declarations.
   </para>

   <para>
    <link linkend="functions.arguments.type-declaration.strict">Strict typing</link>
    also has an effect on return type declarations. In the default weak mode,
    returned values will be coerced to the correct type if they are not
    already of that type. In strong mode, the returned value must be of the
    correct type, otherwise a <classname>TypeError</classname> will be thrown.
   </para>

   <note>
    <para>
     When overriding a parent method, the child's method must match any return
     type declaration on the parent. If the parent doesn't define a return
     type, then the child method may do so.
    </para>
   </note>

   <sect3 xml:id="functions.returning-values.type-declaration.examples">
    &reftitle.examples;

    <example>
     <title>Basic return type declaration</title>
     <programlisting role="php">
<![CDATA[
<?php
function sum($a, $b): float {
    return $a + $b;
}

// Note that a float will be returned.
var_dump(sum(1, 2));
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
float(3)
]]>
      </screen>
     </example>

     <example>
      <title>Strict mode in action</title>
      <programlisting role="php">
<![CDATA[
<?php
declare(strict_types=1);

function sum($a, $b): int {
    return $a + $b;
}

var_dump(sum(1, 2));
var_dump(sum(1, 2.5));
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
int(3)

Fatal error: Uncaught TypeError: Return value of sum() must be of the type integer, float returned in - on line 5 in -:5
Stack trace:
#0 -(9): sum(1, 2.5)
#1 {main}
  thrown in - on line 5
]]>
      </screen>
     </example>

     <example>
      <title>Returning an object</title>
      <programlisting role="php">
<![CDATA[
<?php
class C {}

function getC(): C {
    return new C;
}

var_dump(getC());
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
object(C)#1 (0) {
}
]]>
      </screen>
     </example>
    </sect3>
   </sect2>
  </sect1>
 
  <sect1 xml:id="functions.variable-functions">
   <title>가변 함수</title>

   <para>
    PHP는 가변 함수에 대한 개념을 지원한다. 이 용어의 의미는 어떤 변수
    뒤에 괄호가 따라온다면, PHP는 그 변수의 값을 갖는 함수를 찾아서 실행하려
    할것이란 것이다. 이런 개념은 이기능 외에도 콜백과 함수 테이블 등등을 구현할수 
    있게 해준다.
   </para>
   <para>
    가변 함수는 <function>echo</function>, <function>print</function>,
    <function>unset</function>, <function>isset</function>,
    <function>empty</function>, <function>include</function>,
    <function>require</function>와 같은 언어 구조와 함께 작동하지 않을것이다.
    래퍼 함수를 사용해서 이러한 구조를 가변 함수로 이용할 수 있습니다.
   </para>
   <para>
    <example>
     <title>가변 변수 사용예</title>
     <programlisting role="php">
<![CDATA[
<?php
function foo() {
    echo "foo() 안입니다.<br />\n";
}

function bar($arg = '')
{
    echo "bar() 안입니다; 인수는 '$arg'입니다.<br />\n";
}

// echo를 감싸는 래퍼 함수입니다.
function echoit($string)
{
    echo $string;
}

$func = 'foo';
$func();        // foo()를 호출합니다.

$func = 'bar';
$func('test');  // bar()를 호출합니다.

$func = 'echoit';
$func('test');  // echoit()을 호출합니다.
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    객체 메쏘드도 가변 함수 구문으로 호출할 수 있습니다.
    <example>
     <title>가변 메쏘드 사용예</title>
     <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    function Variable()
    {
        $name = 'Bar';
        $this->$name(); // Bar() 메쏘드를 호출합니다.
    }
    
    function Bar()
    {
        echo "This is Bar";
    }
}

$foo = new Foo();
$funcname = "Variable";
$foo->$funcname();  // $foo->Var()를 호출합니다.

?>
]]>
     </programlisting>
    </example>
   </para>
    <para>
    When calling static methods, the function call is stronger than the static property operator:
    <example>
     <title>Variable method example with static properties</title>
     <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    static $variable = 'static property';
    static function Variable()
    {
        echo 'Method Variable called';
    }
}

echo Foo::$variable; // This prints 'static property'. It does need a $variable in this scope.
$variable = "Variable";
Foo::$variable();  // This calls $foo->Variable() reading $variable in this scope.

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
     As of PHP 5.4.0, you can call any <type>callable</type> stored in a variable.
    <example>
     <title>Complex callables</title>
     <programlisting role="php">
<![CDATA[
class Foo
{
    static function bar()
    {
        echo "bar\n";
    }
    function baz()
    {
        echo "baz\n";
    }
}

$func = array("Foo", "bar");
$func(); // prints "bar"
$f = array(new Foo, "baz");
$func(); // prints "baz"
$f = "Foo::bar";
$func(); // prints "bar" as of PHP 7.0.0; prior, it raised a fatal error
]]>
     </programlisting>
    </example>
   </para>
   
   <para>
    또 <function>is_callable</function>,
    <function>call_user_func</function>,
    <link linkend="language.variables.variable">variable variables</link>, 
    <function>function_exists</function>섹션을 참고
   </para>
   
   <sect2 role="changelog">
    &reftitle.changelog;
    <para>
     <informaltable>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>&Version;</entry>
         <entry>&Description;</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>7.0.0</entry>
         <entry>
          'ClassName::methodName' is allowed as variable function.
         </entry>
        </row>
        <row>
         <entry>5.4.0</entry>
         <entry>
          Arrays, which are valid callables, are allowed as variable functions.
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </para>
   </sect2>
  </sect1>
  
  <sect1 xml:id="functions.internal">
   <title>내부 (내장) 함수</title>
   
   <para>
    PHP는 많은 함수와 상수로 표준화되었다. 그리고 특정 PHP확장 컴파일이
    요구하는 함수도 제공한다. 이런 함수는 확장을 컴파일하지 않으면 "undefined
    function"같은 치명적 오류 메시지를 출력합니다. 예를 들면, <link
     linkend="ref.image">이미지</link> 함수를 사용하기 위해서는
    <productname>GD</productname> 지원이 가능하게 컴파일해야 합니다.
    <function>mysql_connect</function> 함수를 사용하려면 <link
     linkend="ref.mysql">MySQL</link>을 지원하도록 컴파일해야 한다. <link
     linkend="ref.strings">문자열</link>과 <link linkend="ref.var">변수
     관련</link> 함수와 같이 PHP의 모든 버전에 포함되어있는 많은 핵심 함수가
    존재한다.
    <function>phpinfo</function>나
    <function>get_loaded_extensions</function>를 호출하면 현재 PHP에 올라간
    확장에 어떤것인지 확인할수 있다. 많은 확장이 기본값으로 활성화되어있고,
    PHP 매뉴얼은 여러 확장에 의해 분할되어있다는 것에 주의해야 한다. PHP를
    셋업하는 방법을 알고 싶다면,
    <link linkend="configuration">설정</link>,  
    <link linkend="install">설치</link>, 각 확장에 대한 챕터를 보라.
   </para>
   <para>
    함수의 원형(prototype) 읽기와 이해는 <link linkend="about.prototypes">함수
     선언 읽는 법</link>이라는 매뉴얼 섹션에서 설명한다.
    함수가 돌려주는 것이나 함수가 값으로 직접 전달하는지 이해하는것이 중요하다.
    예를 들면,  
    <function>str_replace</function>함수는 변경된 문자열을 돌려주는 반면에
    <function>usort</function>함수는 실질적으로 변수 자체에 전달하도록 동작한다.
    각 매뉴얼 페이지는 각함수에 대해서 함수 인수와 동작 변경,성공과 실패시 
    돌려주는 값과 유용한 정보에 대해서 나와있다. 이런 중요한 차이점(아직은 희박)
    을 아는 것은 PHP 코드를 정확하게 쓰는데 있어서 매우 결정적인 역할을 한다.
   </para>
   <note>
    <simpara>
     <type>string</type>을 기대한 곳에 <type>array</type>를 넘기는 등, 함수에
     주어진 인수가 기대한 것이 아닐 경우, 함수의 반환값은 정의되지 않았습니다.
     이런 경우 &null;을 반환할 수 있지만, 이는 단순한 경우이며, 이에 의존하지
     마십시오.
    </simpara>
   </note>
   <para>
    더불어 <function>function_exists</function>, 
    <link linkend="funcref">the function reference</link>,
    <function>get_extension_funcs</function>, 
    <function>dl</function>섹션을 참고할것.
   </para>
  </sect1>

  <sect1 xml:id="functions.anonymous">
   <title>익명 함수</title>
   <simpara>
    Anonymous functions, also known as <literal>closures</literal>, allow the
    creation of functions which have no specified name. They are most useful as
    the value of <link linkend="language.types.callback">callback</link>
    parameters, but they have many other uses.
   </simpara>

   <example>
    <title>Anonymous function example</title>
    <programlisting role="php">
<![CDATA[
<?php
echo preg_replace_callback('~-([a-z])~', function ($match) {
    return strtoupper($match[1]);
}, 'hello-world');
// outputs helloWorld
?>
]]>
    </programlisting>
   </example>

   <simpara>
    Closures can also be used as the values of variables; PHP automatically 
    converts such expressions into instances of the
    <classname>Closure</classname> internal class. Assigning a closure to a
    variable uses the same syntax as any other assignment, including the
    trailing semicolon:
   </simpara>

   <example>
    <title>Anonymous function variable assignment example</title>
    <programlisting role="php">
<![CDATA[
<?php
$greet = function($name)
{
    printf("Hello %s\r\n", $name);
};

$greet('World');
$greet('PHP');
?>
]]>
    </programlisting>
   </example>
   
   <simpara>
    Closures may also inherit variables from the parent scope. 
    Any such variables must be passed to the <literal>use</literal> language construct.
   </simpara>

   <example>
    <title>Inheriting variables from the parent scope</title>
    <programlisting role="php">
<![CDATA[
<?php
$message = 'hello';

// No "use"
$example = function () {
    var_dump($message);
};
echo $example();

// Inherit $message
$example = function () use ($message) {
    var_dump($message);
};
echo $example();

// Inherited variable's value is from when the function
// is defined, not when called
$message = 'world';
echo $example();

// Reset message
$message = 'hello';

// Inherit by-reference
$example = function () use (&$message) {
    var_dump($message);
};
echo $example();

// The changed value in the parent scope
// is reflected inside the function call
$message = 'world';
echo $example();

// Closures can also accept regular arguments
$example = function ($arg) use ($message) {
    var_dump($arg . ' ' . $message);
};
$example("hello");
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Notice: Undefined variable: message in /example.php on line 6
NULL
string(5) "hello"
string(5) "hello"
string(5) "hello"
string(5) "world"
string(11) "hello world"
]]>
    </screen>
   </example>

   <simpara>
    Inheriting variables from the parent scope is <emphasis>not</emphasis> 
    the same as using global variables. 
    Global variables exist in the global scope, which is the same no
    matter what function is executing. The parent scope of a closure is the
    function in which the closure was declared (not necessarily the function it
    was called from). See the following example:
   </simpara>

   <example>
    <title>Closures and scoping</title>
    <programlisting role="php">
<![CDATA[
<?php
// A basic shopping cart which contains a list of added products
// and the quantity of each product. Includes a method which
// calculates the total price of the items in the cart using a
// closure as a callback.
class Cart
{
    const PRICE_BUTTER  = 1.00;
    const PRICE_MILK    = 3.00;
    const PRICE_EGGS    = 6.95;

    protected $products = array();
    
    public function add($product, $quantity)
    {
        $this->products[$product] = $quantity;
    }
    
    public function getQuantity($product)
    {
        return isset($this->products[$product]) ? $this->products[$product] :
               FALSE;
    }
    
    public function getTotal($tax)
    {
        $total = 0.00;
        
        $callback =
            function ($quantity, $product) use ($tax, &$total)
            {
                $pricePerItem = constant(__CLASS__ . "::PRICE_" .
                    strtoupper($product));
                $total += ($pricePerItem * $quantity) * ($tax + 1.0);
            };
        
        array_walk($this->products, $callback);
        return round($total, 2);
    }
}

$my_cart = new Cart;

// Add some items to the cart
$my_cart->add('butter', 1);
$my_cart->add('milk', 3);
$my_cart->add('eggs', 6);

// Print the total with a 5% sales tax.
print $my_cart->getTotal(0.05) . "\n";
// The result is 54.29
?>
]]>
    </programlisting>
   </example>
   
   <simpara>
    Anonymous functions are implemented using the <link linkend="class.closure">
    <classname>Closure</classname></link> class.
   </simpara>
   
   <sect2 role="changelog">
    &reftitle.changelog;
    <para>
     <informaltable>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>&Version;</entry>
         <entry>&Description;</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>5.4.0</entry>
         <entry>
          <varname>$this</varname> can be used in anonymous functions.
         </entry>
        </row>
        <row>
         <entry>5.3.0</entry>
         <entry>
          Anonymous functions become available.
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </para>
   </sect2>

   <sect2 role="notes">
    &reftitle.notes;
    <note>
     <simpara>
      It is possible to use <function>func_num_args</function>,
      <function>func_get_arg</function>, and <function>func_get_args</function>
      from within a closure.
     </simpara>
    </note>
   </sect2>
   
  </sect1>

 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
